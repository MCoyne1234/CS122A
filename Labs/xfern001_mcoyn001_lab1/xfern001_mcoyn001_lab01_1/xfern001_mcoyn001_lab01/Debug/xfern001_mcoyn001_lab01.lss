
mcoyn001_lab01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000394  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800104  00800104  0000042c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e02  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000974  00000000  00000000  00001346  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065e  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000587  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005db  00000000  00000000  00002a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003006  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cb d0       	rcall	.+406    	; 0x25a <main>
  c4:	65 c1       	rjmp	.+714    	; 0x390 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Tick>:
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	69 f0       	breq	.+26     	; 0xe8 <Tick+0x20>
  ce:	1c f4       	brge	.+6      	; 0xd6 <Tick+0xe>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <Tick+0x1c>
  d4:	18 c0       	rjmp	.+48     	; 0x106 <Tick+0x3e>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	91 05       	cpc	r25, r1
  da:	59 f0       	breq	.+22     	; 0xf2 <Tick+0x2a>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	69 f0       	breq	.+26     	; 0xfc <Tick+0x34>
  e2:	11 c0       	rjmp	.+34     	; 0x106 <Tick+0x3e>
  e4:	15 b8       	out	0x05, r1	; 5
  e6:	1d c0       	rjmp	.+58     	; 0x122 <Tick+0x5a>
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	88 7f       	andi	r24, 0xF8	; 248
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	28 9a       	sbi	0x05, 0	; 5
  f0:	1b c0       	rjmp	.+54     	; 0x128 <Tick+0x60>
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	88 7f       	andi	r24, 0xF8	; 248
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	29 9a       	sbi	0x05, 1	; 5
  fa:	19 c0       	rjmp	.+50     	; 0x12e <Tick+0x66>
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	88 7f       	andi	r24, 0xF8	; 248
 100:	85 b9       	out	0x05, r24	; 5
 102:	2a 9a       	sbi	0x05, 2	; 5
 104:	17 c0       	rjmp	.+46     	; 0x134 <Tick+0x6c>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	91 05       	cpc	r25, r1
 10a:	71 f0       	breq	.+28     	; 0x128 <Tick+0x60>
 10c:	1c f4       	brge	.+6      	; 0x114 <Tick+0x4c>
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	99 f4       	brne	.+38     	; 0x138 <Tick+0x70>
 112:	07 c0       	rjmp	.+14     	; 0x122 <Tick+0x5a>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	91 05       	cpc	r25, r1
 118:	51 f0       	breq	.+20     	; 0x12e <Tick+0x66>
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	91 05       	cpc	r25, r1
 11e:	61 f4       	brne	.+24     	; 0x138 <Tick+0x70>
 120:	09 c0       	rjmp	.+18     	; 0x134 <Tick+0x6c>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	08 95       	ret
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	08 95       	ret
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 95       	ret

0000013a <Tick2>:
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	91 05       	cpc	r25, r1
 13e:	39 f0       	breq	.+14     	; 0x14e <Tick2+0x14>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	91 05       	cpc	r25, r1
 144:	31 f0       	breq	.+12     	; 0x152 <Tick2+0x18>
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	31 f4       	brne	.+12     	; 0x156 <Tick2+0x1c>
 14a:	15 b8       	out	0x05, r1	; 5
 14c:	0c c0       	rjmp	.+24     	; 0x166 <Tick2+0x2c>
 14e:	2b 9a       	sbi	0x05, 3	; 5
 150:	0d c0       	rjmp	.+26     	; 0x16c <Tick2+0x32>
 152:	2b 98       	cbi	0x05, 3	; 5
 154:	0e c0       	rjmp	.+28     	; 0x172 <Tick2+0x38>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	91 05       	cpc	r25, r1
 15a:	41 f0       	breq	.+16     	; 0x16c <Tick2+0x32>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	91 05       	cpc	r25, r1
 160:	41 f0       	breq	.+16     	; 0x172 <Tick2+0x38>
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	41 f4       	brne	.+16     	; 0x176 <Tick2+0x3c>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 95       	ret
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 17c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 180:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 184:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 188:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <_avr_timer_cntcurr>
 18c:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <_avr_timer_cntcurr+0x1>
 190:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr+0x2>
 194:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1c6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ca:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 1ce:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 1d2:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 1d6:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_avr_timer_cntcurr>
 1f8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <_avr_timer_cntcurr+0x1>
 1fc:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <_avr_timer_cntcurr+0x2>
 200:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <_avr_timer_cntcurr+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 20e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 212:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 216:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <TimerFlag>
 228:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 22c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 230:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 234:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 238:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 23c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 240:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 244:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <main>:
          default:break;
      }
      return state;
  }
int main(void)
{   
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	00 d0       	rcall	.+0      	; 0x260 <main+0x6>
 260:	00 d0       	rcall	.+0      	; 0x262 <main+0x8>
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
   DDRA = 0x00; PORTA = 0x00;
 266:	11 b8       	out	0x01, r1	; 1
 268:	12 b8       	out	0x02, r1	; 2
   DDRB = 0xFF; PORTB = 0x00;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	84 b9       	out	0x04, r24	; 4
 26e:	15 b8       	out	0x05, r1	; 5
    
    TimerSet(500);
 270:	64 ef       	ldi	r22, 0xF4	; 244
 272:	71 e0       	ldi	r23, 0x01	; 1
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	7f df       	rcall	.-258    	; 0x178 <TimerSet>
    TimerOn();
 27a:	8f df       	rcall	.-226    	; 0x19a <TimerOn>
 27c:	af e0       	ldi	r26, 0x0F	; 15
        
    unsigned long t1 = 1;
    unsigned long t2 = 2;
    
    static task task1, task2;
    task *tasks[] = { &task1, &task2};
 27e:	b1 e0       	ldi	r27, 0x01	; 1
 280:	ba 83       	std	Y+2, r27	; 0x02
 282:	a9 83       	std	Y+1, r26	; 0x01
 284:	e4 e0       	ldi	r30, 0x04	; 4
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	fc 83       	std	Y+4, r31	; 0x04
 28a:	eb 83       	std	Y+3, r30	; 0x03
 28c:	1c 92       	st	X, r1
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    
    task1.state = 0;//Task initial state.
 28e:	41 e0       	ldi	r20, 0x01	; 1
    task1.period = t1;//Task Period.
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	11 96       	adiw	r26, 0x01	; 1
 298:	4d 93       	st	X+, r20
 29a:	5d 93       	st	X+, r21
 29c:	6d 93       	st	X+, r22
 29e:	7c 93       	st	X, r23
 2a0:	14 97       	sbiw	r26, 0x04	; 4
 2a2:	15 96       	adiw	r26, 0x05	; 5
    task1.elapsedTime = t1; // Task current elasped time.
 2a4:	4d 93       	st	X+, r20
 2a6:	5d 93       	st	X+, r21
 2a8:	6d 93       	st	X+, r22
 2aa:	7c 93       	st	X, r23
 2ac:	18 97       	sbiw	r26, 0x08	; 8
 2ae:	84 e6       	ldi	r24, 0x64	; 100
    task1.TickFct = &Tick; // Function pointer for the tick.
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	1a 96       	adiw	r26, 0x0a	; 10
 2b4:	9c 93       	st	X, r25
 2b6:	8e 93       	st	-X, r24
 2b8:	19 97       	sbiw	r26, 0x09	; 9
 2ba:	10 82       	st	Z, r1
    
    task2.state = 0;//Task initial state.
 2bc:	82 e0       	ldi	r24, 0x02	; 2
    task2.period = t2;//Task Period.
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	a0 e0       	ldi	r26, 0x00	; 0
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	81 83       	std	Z+1, r24	; 0x01
 2c6:	92 83       	std	Z+2, r25	; 0x02
 2c8:	a3 83       	std	Z+3, r26	; 0x03
 2ca:	b4 83       	std	Z+4, r27	; 0x04
 2cc:	85 83       	std	Z+5, r24	; 0x05
    task2.elapsedTime = t2; // Task current elasped time.
 2ce:	96 83       	std	Z+6, r25	; 0x06
 2d0:	a7 83       	std	Z+7, r26	; 0x07
 2d2:	b0 87       	std	Z+8, r27	; 0x08
 2d4:	8d e9       	ldi	r24, 0x9D	; 157
    task2.TickFct = &Tick2; // Function pointer for the tick.
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	92 87       	std	Z+10, r25	; 0x0a
 2da:	81 87       	std	Z+9, r24	; 0x09
 2dc:	6e 01       	movw	r12, r28
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	c8 0e       	add	r12, r24
 2e2:	d1 1c       	adc	r13, r1
 2e4:	aa 24       	eor	r10, r10
            tasks[i]->elapsedTime += 1;
        }
        while(!TimerFlag){
            butt = ( !(PINA & 0x04) );
            if( butt){
                button = 1;
 2e6:	a3 94       	inc	r10
 2e8:	b1 2c       	mov	r11, r1
 2ea:	de 01       	movw	r26, r28
 2ec:	11 96       	adiw	r26, 0x01	; 1
 2ee:	7d 01       	movw	r14, r26
 2f0:	f7 01       	movw	r30, r14
    unsigned short i; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 2f2:	01 91       	ld	r16, Z+
 2f4:	11 91       	ld	r17, Z+
 2f6:	7f 01       	movw	r14, r30
 2f8:	d8 01       	movw	r26, r16
 2fa:	15 96       	adiw	r26, 0x05	; 5
 2fc:	4d 91       	ld	r20, X+
 2fe:	5d 91       	ld	r21, X+
 300:	6d 91       	ld	r22, X+
 302:	7c 91       	ld	r23, X
 304:	18 97       	sbiw	r26, 0x08	; 8
 306:	11 96       	adiw	r26, 0x01	; 1
 308:	8d 91       	ld	r24, X+
 30a:	9d 91       	ld	r25, X+
 30c:	0d 90       	ld	r0, X+
 30e:	bc 91       	ld	r27, X
 310:	a0 2d       	mov	r26, r0
 312:	48 17       	cp	r20, r24
 314:	59 07       	cpc	r21, r25
 316:	6a 07       	cpc	r22, r26
 318:	7b 07       	cpc	r23, r27
 31a:	81 f4       	brne	.+32     	; 0x33c <main+0xe2>
 31c:	f8 01       	movw	r30, r16
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 31e:	80 81       	ld	r24, Z
 320:	01 84       	ldd	r0, Z+9	; 0x09
 322:	f2 85       	ldd	r31, Z+10	; 0x0a
 324:	e0 2d       	mov	r30, r0
 326:	08 2e       	mov	r0, r24
 328:	00 0c       	add	r0, r0
 32a:	99 0b       	sbc	r25, r25
 32c:	09 95       	icall
 32e:	d8 01       	movw	r26, r16
 330:	8c 93       	st	X, r24
 332:	f8 01       	movw	r30, r16
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 334:	15 82       	std	Z+5, r1	; 0x05
 336:	16 82       	std	Z+6, r1	; 0x06
 338:	17 82       	std	Z+7, r1	; 0x07
 33a:	10 86       	std	Z+8, r1	; 0x08
 33c:	f8 01       	movw	r30, r16
            }
            tasks[i]->elapsedTime += 1;
 33e:	85 81       	ldd	r24, Z+5	; 0x05
 340:	96 81       	ldd	r25, Z+6	; 0x06
 342:	a7 81       	ldd	r26, Z+7	; 0x07
 344:	b0 85       	ldd	r27, Z+8	; 0x08
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	a1 1d       	adc	r26, r1
 34a:	b1 1d       	adc	r27, r1
 34c:	85 83       	std	Z+5, r24	; 0x05
 34e:	96 83       	std	Z+6, r25	; 0x06
 350:	a7 83       	std	Z+7, r26	; 0x07
 352:	b0 87       	std	Z+8, r27	; 0x08
 354:	ec 14       	cp	r14, r12
    
    char butt = 0;
    unsigned short i; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
 356:	fd 04       	cpc	r15, r13
 358:	59 f6       	brne	.-106    	; 0x2f0 <main+0x96>
 35a:	13 c0       	rjmp	.+38     	; 0x382 <main+0x128>
 35c:	02 99       	sbic	0x00, 2	; 0
            }
            tasks[i]->elapsedTime += 1;
        }
        while(!TimerFlag){
            butt = ( !(PINA & 0x04) );
            if( butt){
 35e:	11 c0       	rjmp	.+34     	; 0x382 <main+0x128>
 360:	b0 92 20 01 	sts	0x0120, r11	; 0x800120 <button+0x1>
                button = 1;
 364:	a0 92 1f 01 	sts	0x011F, r10	; 0x80011f <button>
 368:	06 c0       	rjmp	.+12     	; 0x376 <main+0x11c>
                while(button == 1 ){
 36a:	02 99       	sbic	0x00, 2	; 0
                    butt = ( !(PINA & 0x04) );
                    if( butt ) button = 0;
 36c:	fe cf       	rjmp	.-4      	; 0x36a <main+0x110>
 36e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <button+0x1>
 372:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <button>
 376:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <button>
        }
        while(!TimerFlag){
            butt = ( !(PINA & 0x04) );
            if( butt){
                button = 1;
                while(button == 1 ){
 37a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <button+0x1>
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	a1 f3       	breq	.-24     	; 0x36a <main+0x110>
 382:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <TimerFlag>
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
            }
            tasks[i]->elapsedTime += 1;
        }
        while(!TimerFlag){
 386:	88 23       	and	r24, r24
 388:	49 f3       	breq	.-46     	; 0x35c <main+0x102>
 38a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <TimerFlag>
                    butt = ( !(PINA & 0x04) );
                    if( butt ) button = 0;
                }
            }
        };
        TimerFlag = 0;
 38e:	ad cf       	rjmp	.-166    	; 0x2ea <main+0x90>

00000390 <_exit>:
    }
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
