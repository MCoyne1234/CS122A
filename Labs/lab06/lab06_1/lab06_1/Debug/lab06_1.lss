
lab06_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800108  00800108  00000548  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f64  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000976  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f1  00000000  00000000  00001f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d0  00000000  00000000  00002790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000632  00000000  00000000  00002d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003392  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 32       	cpi	r26, 0x2C	; 44
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	72 d1       	rcall	.+740    	; 0x3a8 <main>
  c4:	f1 c1       	rjmp	.+994    	; 0x4a8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
  c8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
  cc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
  d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
  d4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
  d8:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <_avr_timer_cntcurr>
  dc:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <_avr_timer_cntcurr+0x1>
  e0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_avr_timer_cntcurr+0x2>
  e4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 10e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 112:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 116:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 11a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_avr_timer_cntcurr>
 11e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <_avr_timer_cntcurr+0x1>
 122:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <_avr_timer_cntcurr+0x2>
 126:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_avr_timer_cntcurr>
 148:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <_avr_timer_cntcurr+0x2>
 150:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_avr_timer_cntcurr>
 15e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <_avr_timer_cntcurr+0x1>
 162:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <_avr_timer_cntcurr+0x2>
 166:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <TimerFlag>
 178:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 17c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 180:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 184:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 188:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_avr_timer_cntcurr>
 18c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <_avr_timer_cntcurr+0x1>
 190:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <_avr_timer_cntcurr+0x2>
 194:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	10 98       	cbi	0x02, 0	; 2
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	11 9a       	sbi	0x02, 1	; 2
 1d6:	00 00       	nop
 1d8:	11 98       	cbi	0x02, 1	; 2
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_Cursor>:
 1e8:	81 31       	cpi	r24, 0x11	; 17
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <LCD_Cursor+0xa>
 1ec:	81 58       	subi	r24, 0x81	; 129
 1ee:	f0 cf       	rjmp	.-32     	; 0x1d0 <LCD_WriteCommand>
 1f0:	08 95       	ret
 1f2:	81 55       	subi	r24, 0x51	; 81
 1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <LCD_WriteCommand>
 1f6:	08 95       	ret

000001f8 <LCD_init>:
 1f8:	84 e6       	ldi	r24, 0x64	; 100
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	d6 df       	rcall	.-84     	; 0x1aa <delay_ms>
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	e7 df       	rcall	.-50     	; 0x1d0 <LCD_WriteCommand>
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	e5 df       	rcall	.-54     	; 0x1d0 <LCD_WriteCommand>
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	e3 df       	rcall	.-58     	; 0x1d0 <LCD_WriteCommand>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	e1 df       	rcall	.-62     	; 0x1d0 <LCD_WriteCommand>
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	cb cf       	rjmp	.-106    	; 0x1aa <delay_ms>
 214:	08 95       	ret

00000216 <LCD_WriteData>:
 216:	10 9a       	sbi	0x02, 0	; 2
 218:	8b b9       	out	0x0b, r24	; 11
 21a:	11 9a       	sbi	0x02, 1	; 2
 21c:	00 00       	nop
 21e:	11 98       	cbi	0x02, 1	; 2
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	c2 cf       	rjmp	.-124    	; 0x1aa <delay_ms>
 226:	08 95       	ret

00000228 <Tick4>:
}


int Tick4(int state){
    
    switch(state){
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	21 f0       	breq	.+8      	; 0x234 <Tick4+0xc>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	91 05       	cpc	r25, r1
 230:	39 f0       	breq	.+14     	; 0x240 <Tick4+0x18>
 232:	25 c0       	rjmp	.+74     	; 0x27e <Tick4+0x56>
        case START3:       
            t_max = 6;
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <t_max>
            t_count = 0;
 23a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <t_count>
 23e:	25 c0       	rjmp	.+74     	; 0x28a <Tick4+0x62>
        break;
        case ON:
        LCD_ClearScreen();
 240:	d0 df       	rcall	.-96     	; 0x1e2 <LCD_ClearScreen>
        //LCD_DisplayString(1, count + '0');
        LCD_Cursor(2);
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	d1 df       	rcall	.-94     	; 0x1e8 <LCD_Cursor>
        LCD_WriteData(count + '0');
 246:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <count>
 24a:	80 5d       	subi	r24, 0xD0	; 208
        
        LCD_Cursor(4);
 24c:	e4 df       	rcall	.-56     	; 0x216 <LCD_WriteData>
 24e:	84 e0       	ldi	r24, 0x04	; 4
        LCD_WriteData(b1 + '0');
 250:	cb df       	rcall	.-106    	; 0x1e8 <LCD_Cursor>
 252:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <b1>
 256:	80 5d       	subi	r24, 0xD0	; 208
        
        LCD_Cursor(6);
 258:	de df       	rcall	.-68     	; 0x216 <LCD_WriteData>
 25a:	86 e0       	ldi	r24, 0x06	; 6
        LCD_WriteData(b2 + '0');
 25c:	c5 df       	rcall	.-118    	; 0x1e8 <LCD_Cursor>
 25e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <b2>
 262:	80 5d       	subi	r24, 0xD0	; 208
        
        LCD_Cursor(8);
 264:	d8 df       	rcall	.-80     	; 0x216 <LCD_WriteData>
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	bf df       	rcall	.-130    	; 0x1e8 <LCD_Cursor>
        LCD_WriteData(b3 + '0');
 26a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <b3>
 26e:	80 5d       	subi	r24, 0xD0	; 208
 270:	d2 df       	rcall	.-92     	; 0x216 <LCD_WriteData>
 272:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <t_count>
        //LCD_DisplayString(1, "0123456789ABCDEF");
        //++count;
        ++t_count;
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <t_count>
 27c:	09 c0       	rjmp	.+18     	; 0x290 <Tick4+0x68>
 27e:	00 97       	sbiw	r24, 0x00	; 0
        break;
        default:
        break;
    }
    
    switch(state){
 280:	21 f0       	breq	.+8      	; 0x28a <Tick4+0x62>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	91 05       	cpc	r25, r1
 286:	a1 f4       	brne	.+40     	; 0x2b0 <Tick4+0x88>
 288:	03 c0       	rjmp	.+6      	; 0x290 <Tick4+0x68>
 28a:	81 e0       	ldi	r24, 0x01	; 1
        case START3:
            state = ON;
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	08 95       	ret
        break;
        case ON:
            if(t_count > t_max){
 290:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <t_count>
 294:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <t_max>
 298:	89 17       	cp	r24, r25
 29a:	40 f4       	brcc	.+16     	; 0x2ac <Tick4+0x84>
                t_count = 0;
 29c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <t_count>
                LCD_ClearScreen();
 2a0:	a0 df       	rcall	.-192    	; 0x1e2 <LCD_ClearScreen>
 2a2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0xb>
                task4.active = 0x00;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	08 95       	ret
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	08 95       	ret

000002b2 <updateCount>:
        case OFF:
        break;
        default:break;
    }
    return state;
}
 2b2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <count>
}

void updateCount(int incValue) {
    const char MAX_COUNT = 9;
    const char MIN_COUNT = 0;
    unsigned char newCount = count + incValue;
 2b6:	89 0f       	add	r24, r25
    if (MIN_COUNT <= newCount && newCount <= MAX_COUNT) {
 2b8:	8a 30       	cpi	r24, 0x0A	; 10
 2ba:	10 f4       	brcc	.+4      	; 0x2c0 <updateCount+0xe>
        count = newCount;
 2bc:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <count>
 2c0:	08 95       	ret

000002c2 <Tick2>:

static task task2, task4;
task *tasks[] = {  &task2, &task4 };
const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

int Tick2(int state) {
 2c2:	ac 01       	movw	r20, r24
    b1 = (~( PINA &  Inc)) & Inc ;
 2c4:	30 b1       	in	r19, 0x00	; 0
 2c6:	30 72       	andi	r19, 0x20	; 32
 2c8:	30 95       	com	r19
 2ca:	30 72       	andi	r19, 0x20	; 32
 2cc:	30 93 26 01 	sts	0x0126, r19	; 0x800126 <b1>
    b2 = (~( PINA &  Dec)) & Dec ;
 2d0:	20 b1       	in	r18, 0x00	; 0
 2d2:	20 74       	andi	r18, 0x40	; 64
 2d4:	20 95       	com	r18
 2d6:	20 74       	andi	r18, 0x40	; 64
 2d8:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <b2>
    b3 = (~( PINA &  LCD_B)) & LCD_B ;
 2dc:	90 b1       	in	r25, 0x00	; 0
 2de:	90 71       	andi	r25, 0x10	; 16
 2e0:	90 95       	com	r25
 2e2:	90 71       	andi	r25, 0x10	; 16
 2e4:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <b3>
    b4 = b3;
    if(b4){b4 = b2;}
 2e8:	91 11       	cpse	r25, r1
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <Tick2+0x30>

int Tick2(int state) {
    b1 = (~( PINA &  Inc)) & Inc ;
    b2 = (~( PINA &  Dec)) & Dec ;
    b3 = (~( PINA &  LCD_B)) & LCD_B ;
    b4 = b3;
 2ec:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <b4>
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <Tick2+0x3e>
    if(b4){b4 = b2;}
 2f2:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <b4>
   if (b3 == LCD_B) { task4.active = 0x01;}
 2f6:	90 31       	cpi	r25, 0x10	; 16
 2f8:	19 f4       	brne	.+6      	; 0x300 <Tick2+0x3e>
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__data_end+0xb>
   
    switch (state) { // Transitions
 300:	42 30       	cpi	r20, 0x02	; 2
 302:	51 05       	cpc	r21, r1
 304:	61 f1       	breq	.+88     	; 0x35e <Tick2+0x9c>
 306:	3c f4       	brge	.+14     	; 0x316 <Tick2+0x54>
 308:	41 15       	cp	r20, r1
 30a:	51 05       	cpc	r21, r1
 30c:	59 f0       	breq	.+22     	; 0x324 <Tick2+0x62>
 30e:	41 30       	cpi	r20, 0x01	; 1
 310:	51 05       	cpc	r21, r1
 312:	71 f0       	breq	.+28     	; 0x330 <Tick2+0x6e>
 314:	33 c0       	rjmp	.+102    	; 0x37c <Tick2+0xba>
 316:	43 30       	cpi	r20, 0x03	; 3
 318:	51 05       	cpc	r21, r1
 31a:	31 f1       	breq	.+76     	; 0x368 <Tick2+0xa6>
 31c:	44 30       	cpi	r20, 0x04	; 4
 31e:	51 05       	cpc	r21, r1
 320:	41 f1       	breq	.+80     	; 0x372 <Tick2+0xb0>
 322:	2c c0       	rjmp	.+88     	; 0x37c <Tick2+0xba>
        case Start:
        count = InitialCount;
 324:	84 e0       	ldi	r24, 0x04	; 4
 326:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <count>
        state = Wait;
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	50 e0       	ldi	r21, 0x00	; 0
        break;
 32e:	3a c0       	rjmp	.+116    	; 0x3a4 <Tick2+0xe2>
        case Wait:
        //if (buttons == Inc) {
            
          if( (b1 && (b2 == 0) ) ){  
 330:	33 23       	and	r19, r19
 332:	41 f0       	breq	.+16     	; 0x344 <Tick2+0x82>
 334:	21 11       	cpse	r18, r1
 336:	0e c0       	rjmp	.+28     	; 0x354 <Tick2+0x92>
            updateCount(1);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	ba df       	rcall	.-140    	; 0x2b2 <updateCount>
            state = IncHold;
 33e:	42 e0       	ldi	r20, 0x02	; 2
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	30 c0       	rjmp	.+96     	; 0x3a4 <Tick2+0xe2>
           // } else if (buttons == Dec) {
           } else if ( (b1 == 0) && b2 ) {
 344:	22 23       	and	r18, r18
 346:	71 f1       	breq	.+92     	; 0x3a4 <Tick2+0xe2>
            updateCount(-1);
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	9f ef       	ldi	r25, 0xFF	; 255
 34c:	b2 df       	rcall	.-156    	; 0x2b2 <updateCount>
            state = DecHold;
 34e:	43 e0       	ldi	r20, 0x03	; 3
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	28 c0       	rjmp	.+80     	; 0x3a4 <Tick2+0xe2>
            //} else if (buttons == Reset) {
            }else if (b1 && b2) {
            count = 0;
 354:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <count>
            state = ResetHold;
 358:	44 e0       	ldi	r20, 0x04	; 4
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	23 c0       	rjmp	.+70     	; 0x3a4 <Tick2+0xe2>
            state = Wait;
        }
        break;
        case IncHold:
        //if (buttons == Inc) {
        if( (b1 && (b2 == 0) ) ){
 35e:	33 23       	and	r19, r19
 360:	81 f0       	breq	.+32     	; 0x382 <Tick2+0xc0>
 362:	22 23       	and	r18, r18
 364:	f9 f0       	breq	.+62     	; 0x3a4 <Tick2+0xe2>
 366:	10 c0       	rjmp	.+32     	; 0x388 <Tick2+0xc6>
            state = Wait;
        }
        break;
        case DecHold:
        //if (buttons == Dec) {
         if( ( (b1 == 0) && b2) ){
 368:	31 11       	cpse	r19, r1
 36a:	11 c0       	rjmp	.+34     	; 0x38e <Tick2+0xcc>
 36c:	21 11       	cpse	r18, r1
 36e:	1a c0       	rjmp	.+52     	; 0x3a4 <Tick2+0xe2>
 370:	11 c0       	rjmp	.+34     	; 0x394 <Tick2+0xd2>
            state = Wait;
        }
        break;
        case ResetHold:
        //if (buttons == Reset) {
        if (b1 && b2) {
 372:	33 23       	and	r19, r19
 374:	91 f0       	breq	.+36     	; 0x39a <Tick2+0xd8>
 376:	21 11       	cpse	r18, r1
 378:	15 c0       	rjmp	.+42     	; 0x3a4 <Tick2+0xe2>
 37a:	12 c0       	rjmp	.+36     	; 0x3a0 <Tick2+0xde>
            } else {
            state = Wait;
        }
        break;
        default:
        state = Wait;
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	11 c0       	rjmp	.+34     	; 0x3a4 <Tick2+0xe2>
            //} else if (buttons == Reset) { // Intentional bug. Leave in.
            } else if (b1 & b2) { // Intentional bug. Leave in.
            //PORTD = 0xFF;
            //for(;;);
            } else {
            state = Wait;
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	0e c0       	rjmp	.+28     	; 0x3a4 <Tick2+0xe2>
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	0b c0       	rjmp	.+22     	; 0x3a4 <Tick2+0xe2>
        case DecHold:
        //if (buttons == Dec) {
         if( ( (b1 == 0) && b2) ){
            state = DecHold;
            } else {
            state = Wait;
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <Tick2+0xe2>
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <Tick2+0xe2>
        case ResetHold:
        //if (buttons == Reset) {
        if (b1 && b2) {
            state = ResetHold;
            } else {
            state = Wait;
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Tick2+0xe2>
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	50 e0       	ldi	r21, 0x00	; 0
        case ResetHold:
        break;
    }

    return state;
}
 3a4:	ca 01       	movw	r24, r20
 3a6:	08 95       	ret

000003a8 <main>:
    return state;
}

int main(void)
{
    DDRA = 0x03; PORTA = 0x00;
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	81 b9       	out	0x01, r24	; 1
 3ac:	12 b8       	out	0x02, r1	; 2
    
    DDRC = 0xF0; PORTC = 0x00;
 3ae:	80 ef       	ldi	r24, 0xF0	; 240
 3b0:	87 b9       	out	0x07, r24	; 7
 3b2:	18 b8       	out	0x08, r1	; 8
    DDRD = 0xFF; PORTD = 0x00;
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	8a b9       	out	0x0a, r24	; 10
 3b8:	1b b8       	out	0x0b, r1	; 11

    TimerSet(50);
 3ba:	62 e3       	ldi	r22, 0x32	; 50
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	82 de       	rcall	.-764    	; 0xc8 <TimerSet>
    TimerOn();
 3c4:	92 de       	rcall	.-732    	; 0xea <TimerOn>
    
    LCD_init();
 3c6:	18 df       	rcall	.-464    	; 0x1f8 <LCD_init>
 3c8:	0c df       	rcall	.-488    	; 0x1e2 <LCD_ClearScreen>
    LCD_ClearScreen();
 3ca:	e4 e1       	ldi	r30, 0x14	; 20
 3cc:	f1 e0       	ldi	r31, 0x01	; 1
    
    unsigned long t2 = 2;
    unsigned long t4 = 10;
    
    
    task2.state = 0;//Task initial state.
 3ce:	10 82       	st	Z, r1
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	90 e0       	ldi	r25, 0x00	; 0
    task2.period = t2;//Task Period.
 3d4:	a0 e0       	ldi	r26, 0x00	; 0
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	81 83       	std	Z+1, r24	; 0x01
 3da:	92 83       	std	Z+2, r25	; 0x02
 3dc:	a3 83       	std	Z+3, r26	; 0x03
 3de:	b4 83       	std	Z+4, r27	; 0x04
 3e0:	85 83       	std	Z+5, r24	; 0x05
 3e2:	96 83       	std	Z+6, r25	; 0x06
    task2.elapsedTime = t2; // Task current elapsed time.
 3e4:	a7 83       	std	Z+7, r26	; 0x07
 3e6:	b0 87       	std	Z+8, r27	; 0x08
 3e8:	81 e6       	ldi	r24, 0x61	; 97
 3ea:	91 e0       	ldi	r25, 0x01	; 1
    task2.TickFct = &Tick2; // Function pointer for the tick.
 3ec:	92 87       	std	Z+10, r25	; 0x0a
 3ee:	81 87       	std	Z+9, r24	; 0x09
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	83 87       	std	Z+11, r24	; 0x0b
    task2.active = 0x01;   // Set task active.
 3f4:	e8 e0       	ldi	r30, 0x08	; 8
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
    
    task4.state = 0;//Task initial state.
 3f8:	10 82       	st	Z, r1
 3fa:	8a e0       	ldi	r24, 0x0A	; 10
 3fc:	90 e0       	ldi	r25, 0x00	; 0
    task4.period = t4;//Task Period.
 3fe:	a0 e0       	ldi	r26, 0x00	; 0
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	81 83       	std	Z+1, r24	; 0x01
 404:	92 83       	std	Z+2, r25	; 0x02
 406:	a3 83       	std	Z+3, r26	; 0x03
 408:	b4 83       	std	Z+4, r27	; 0x04
 40a:	85 83       	std	Z+5, r24	; 0x05
 40c:	96 83       	std	Z+6, r25	; 0x06
    task4.elapsedTime = t4; // Task current elapsed time.
 40e:	a7 83       	std	Z+7, r26	; 0x07
 410:	b0 87       	std	Z+8, r27	; 0x08
 412:	84 e1       	ldi	r24, 0x14	; 20
 414:	91 e0       	ldi	r25, 0x01	; 1
    task4.TickFct = &Tick4; // Function pointer for the tick.
 416:	92 87       	std	Z+10, r25	; 0x0a
 418:	81 87       	std	Z+9, r24	; 0x09
 41a:	13 86       	std	Z+11, r1	; 0x0b
 41c:	04 e0       	ldi	r16, 0x04	; 4
    task4.active = 0x00;   // Set task active.
 41e:	11 e0       	ldi	r17, 0x01	; 1
 420:	c0 e0       	ldi	r28, 0x00	; 0
 422:	d1 e0       	ldi	r29, 0x01	; 1
 424:	6e 01       	movw	r12, r28
 426:	e8 80       	ld	r14, Y
 428:	f9 80       	ldd	r15, Y+1	; 0x01
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( (tasks[i]->elapsedTime >= tasks[i]->period) && tasks[i]->active ) {
 42a:	d7 01       	movw	r26, r14
 42c:	15 96       	adiw	r26, 0x05	; 5
 42e:	4d 91       	ld	r20, X+
 430:	5d 91       	ld	r21, X+
 432:	6d 91       	ld	r22, X+
 434:	7c 91       	ld	r23, X
 436:	18 97       	sbiw	r26, 0x08	; 8
 438:	11 96       	adiw	r26, 0x01	; 1
 43a:	8d 91       	ld	r24, X+
 43c:	9d 91       	ld	r25, X+
 43e:	0d 90       	ld	r0, X+
 440:	bc 91       	ld	r27, X
 442:	a0 2d       	mov	r26, r0
 444:	48 17       	cp	r20, r24
 446:	59 07       	cpc	r21, r25
 448:	6a 07       	cpc	r22, r26
 44a:	7b 07       	cpc	r23, r27
 44c:	a0 f0       	brcs	.+40     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 44e:	f7 01       	movw	r30, r14
 450:	83 85       	ldd	r24, Z+11	; 0x0b
 452:	88 23       	and	r24, r24
 454:	81 f0       	breq	.+32     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 456:	80 81       	ld	r24, Z
 458:	01 84       	ldd	r0, Z+9	; 0x09
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 45a:	f2 85       	ldd	r31, Z+10	; 0x0a
 45c:	e0 2d       	mov	r30, r0
 45e:	08 2e       	mov	r0, r24
 460:	00 0c       	add	r0, r0
 462:	99 0b       	sbc	r25, r25
 464:	09 95       	icall
 466:	d7 01       	movw	r26, r14
 468:	8c 93       	st	X, r24
 46a:	e8 81       	ld	r30, Y
 46c:	f9 81       	ldd	r31, Y+1	; 0x01
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 46e:	15 82       	std	Z+5, r1	; 0x05
 470:	16 82       	std	Z+6, r1	; 0x06
 472:	17 82       	std	Z+7, r1	; 0x07
 474:	10 86       	std	Z+8, r1	; 0x08
 476:	d6 01       	movw	r26, r12
 478:	ed 91       	ld	r30, X+
            }
            tasks[i]->elapsedTime += 1;
 47a:	fc 91       	ld	r31, X
 47c:	22 96       	adiw	r28, 0x02	; 2
 47e:	85 81       	ldd	r24, Z+5	; 0x05
 480:	96 81       	ldd	r25, Z+6	; 0x06
 482:	a7 81       	ldd	r26, Z+7	; 0x07
 484:	b0 85       	ldd	r27, Z+8	; 0x08
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	a1 1d       	adc	r26, r1
 48a:	b1 1d       	adc	r27, r1
 48c:	85 83       	std	Z+5, r24	; 0x05
 48e:	96 83       	std	Z+6, r25	; 0x06
 490:	a7 83       	std	Z+7, r26	; 0x07
 492:	b0 87       	std	Z+8, r27	; 0x08
 494:	c0 17       	cp	r28, r16
 496:	d1 07       	cpc	r29, r17
    
    
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
 498:	29 f6       	brne	.-118    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 49a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TimerFlag>
                tasks[i]->elapsedTime = 0;
            }
            tasks[i]->elapsedTime += 1;
        }

        while(!TimerFlag){}
 49e:	88 23       	and	r24, r24
 4a0:	e1 f3       	breq	.-8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 4a2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <TimerFlag>
        TimerFlag = 0;
 4a6:	bc cf       	rjmp	.-136    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
    }
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
