
lab_3_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000044c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080013a  0080013a  0000051a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebc  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a08  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006cc  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  000025c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060c  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000462  00000000  00000000  00002da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003202  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b9 c0       	rjmp	.+370    	; 0x1a8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 33       	cpi	r26, 0x3A	; 58
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e3       	ldi	r26, 0x3A	; 58
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 36       	cpi	r26, 0x64	; 100
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e6 d0       	rcall	.+460    	; 0x290 <main>
  c4:	c1 c1       	rjmp	.+898    	; 0x448 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Tick4>:
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
	
	return '\0';
}
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	99 f5       	brne	.+102    	; 0x134 <Tick4+0x6c>
  ce:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <t_count>
  d2:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <t_max>
  d6:	23 17       	cp	r18, r19
  d8:	48 f1       	brcs	.+82     	; 0x12c <Tick4+0x64>
  da:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <t_count>
  de:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <pattern>
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	e6 5f       	subi	r30, 0xF6	; 246
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	01 90       	ld	r0, Z+
  ee:	f0 81       	ld	r31, Z
  f0:	e0 2d       	mov	r30, r0
  f2:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <iter>
  f6:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <iter+0x1>
  fa:	e2 0f       	add	r30, r18
  fc:	f3 1f       	adc	r31, r19
  fe:	20 81       	ld	r18, Z
 100:	22 b9       	out	0x02, r18	; 2
 102:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <iter>
 106:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <iter+0x1>
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <iter+0x1>
 112:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <iter>
 116:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <p_size>
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	24 17       	cp	r18, r20
 11e:	35 07       	cpc	r19, r21
 120:	6c f0       	brlt	.+26     	; 0x13c <Tick4+0x74>
 122:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <iter+0x1>
 126:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <iter>
 12a:	08 95       	ret
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <t_count>
 132:	08 95       	ret
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	11 f4       	brne	.+4      	; 0x13c <Tick4+0x74>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <TimerSet>:
 13e:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <_avr_timer_M>
 142:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <_avr_timer_M+0x1>
 146:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <_avr_timer_M+0x2>
 14a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <_avr_timer_M+0x3>
 14e:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <_avr_timer_cntcurr>
 152:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <_avr_timer_cntcurr+0x1>
 156:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_avr_timer_cntcurr+0x2>
 15a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_avr_timer_cntcurr+0x3>
 15e:	08 95       	ret

00000160 <TimerOn>:
 160:	8b e0       	ldi	r24, 0x0B	; 11
 162:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 166:	8d e7       	ldi	r24, 0x7D	; 125
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 16e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 178:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 17c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 180:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_avr_timer_M>
 184:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <_avr_timer_M+0x1>
 188:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <_avr_timer_M+0x2>
 18c:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <_avr_timer_M+0x3>
 190:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <_avr_timer_cntcurr>
 194:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <_avr_timer_cntcurr+0x1>
 198:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <_avr_timer_cntcurr+0x2>
 19c:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <_avr_timer_cntcurr+0x3>
 1a0:	8f b7       	in	r24, 0x3f	; 63
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	8f bf       	out	0x3f, r24	; 63
 1a6:	08 95       	ret

000001a8 <__vector_13>:
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_avr_timer_cntcurr>
 1be:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_avr_timer_cntcurr+0x1>
 1c2:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <_avr_timer_cntcurr+0x2>
 1c6:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <_avr_timer_cntcurr+0x3>
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	a1 09       	sbc	r26, r1
 1ce:	b1 09       	sbc	r27, r1
 1d0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <_avr_timer_cntcurr>
 1d4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <_avr_timer_cntcurr+0x1>
 1d8:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <_avr_timer_cntcurr+0x2>
 1dc:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <_avr_timer_cntcurr+0x3>
 1e0:	89 2b       	or	r24, r25
 1e2:	8a 2b       	or	r24, r26
 1e4:	8b 2b       	or	r24, r27
 1e6:	99 f4       	brne	.+38     	; 0x20e <__vector_13+0x66>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <TimerFlag>
 1ee:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_avr_timer_M>
 1f2:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <_avr_timer_M+0x1>
 1f6:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <_avr_timer_M+0x2>
 1fa:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <_avr_timer_M+0x3>
 1fe:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <_avr_timer_cntcurr>
 202:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <_avr_timer_cntcurr+0x1>
 206:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <_avr_timer_cntcurr+0x2>
 20a:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <_avr_timer_cntcurr+0x3>
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <SPI_ServantInit>:
 220:	80 e4       	ldi	r24, 0x40	; 64
 222:	84 b9       	out	0x04, r24	; 4
 224:	8c bd       	out	0x2c, r24	; 44
 226:	08 95       	ret

00000228 <SPI_ServantReceive>:
 228:	0d b4       	in	r0, 0x2d	; 45
 22a:	07 fe       	sbrs	r0, 7
 22c:	fd cf       	rjmp	.-6      	; 0x228 <SPI_ServantReceive>
 22e:	8e b5       	in	r24, 0x2e	; 46
 230:	08 95       	ret

00000232 <__vector_19>:
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	0b b6       	in	r0, 0x3b	; 59
 23e:	0f 92       	push	r0
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	cf 93       	push	r28
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
 25a:	ce b5       	in	r28, 0x2e	; 46
 25c:	e5 df       	rcall	.-54     	; 0x228 <SPI_ServantReceive>
 25e:	68 2f       	mov	r22, r24
 260:	8c 2f       	mov	r24, r28
 262:	e6 d0       	rcall	.+460    	; 0x430 <__udivmodqi4>
 264:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <receivedData>
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	cf 91       	pop	r28
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <main>:
    }
    return state;
}

int main(void)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <main+0x6>
 296:	00 d0       	rcall	.+0      	; 0x298 <main+0x8>
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF; PORTA = 0xAA;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	81 b9       	out	0x01, r24	; 1
 2a0:	9a ea       	ldi	r25, 0xAA	; 170
 2a2:	92 b9       	out	0x02, r25	; 2
    
    DDRC = 0xF0; PORTC = 0x00;
 2a4:	10 ef       	ldi	r17, 0xF0	; 240
 2a6:	17 b9       	out	0x07, r17	; 7
 2a8:	18 b8       	out	0x08, r1	; 8
    DDRD = 0xFF; PORTD = 0x00;
 2aa:	8a b9       	out	0x0a, r24	; 10
 2ac:	1b b8       	out	0x0b, r1	; 11

    TimerSet(50);
 2ae:	62 e3       	ldi	r22, 0x32	; 50
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	43 df       	rcall	.-378    	; 0x13e <TimerSet>
    TimerOn();
 2b8:	53 df       	rcall	.-346    	; 0x160 <TimerOn>
 2ba:	10 93 62 01 	sts	0x0162, r17	; 0x800162 <maskUp>
    
    maskUp = 0xF0;
 2be:	8f e0       	ldi	r24, 0x0F	; 15
    maskLow = 0x0F;
 2c0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <maskLow>
 2c4:	a5 e4       	ldi	r26, 0x45	; 69
    
    unsigned long t2 = 1;
    unsigned long t4 = 2;
    
    static task task2, task4;
    task *tasks[] = {  &task2, &task4};
 2c6:	b1 e0       	ldi	r27, 0x01	; 1
 2c8:	ba 83       	std	Y+2, r27	; 0x02
 2ca:	a9 83       	std	Y+1, r26	; 0x01
 2cc:	ea e3       	ldi	r30, 0x3A	; 58
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	fc 83       	std	Y+4, r31	; 0x04
 2d2:	eb 83       	std	Y+3, r30	; 0x03
 2d4:	1c 92       	st	X, r1
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    
    
    task2.state = 0;//Task initial state.
 2d6:	41 e0       	ldi	r20, 0x01	; 1
    task2.period = t2;//Task Period.
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	11 96       	adiw	r26, 0x01	; 1
 2e0:	4d 93       	st	X+, r20
 2e2:	5d 93       	st	X+, r21
 2e4:	6d 93       	st	X+, r22
 2e6:	7c 93       	st	X, r23
 2e8:	14 97       	sbiw	r26, 0x04	; 4
 2ea:	15 96       	adiw	r26, 0x05	; 5
    task2.elapsedTime = t2; // Task current elapsed time.
 2ec:	4d 93       	st	X+, r20
 2ee:	5d 93       	st	X+, r21
 2f0:	6d 93       	st	X+, r22
 2f2:	7c 93       	st	X, r23
 2f4:	18 97       	sbiw	r26, 0x08	; 8
 2f6:	80 ef       	ldi	r24, 0xF0	; 240
    task2.TickFct = &Tick2; // Function pointer for the tick.
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	1a 96       	adiw	r26, 0x0a	; 10
 2fc:	9c 93       	st	X, r25
 2fe:	8e 93       	st	-X, r24
 300:	19 97       	sbiw	r26, 0x09	; 9
 302:	10 82       	st	Z, r1
    
    task4.state = 0;//Task initial state.
 304:	82 e0       	ldi	r24, 0x02	; 2
    task4.period = t4;//Task Period.
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	a0 e0       	ldi	r26, 0x00	; 0
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	81 83       	std	Z+1, r24	; 0x01
 30e:	92 83       	std	Z+2, r25	; 0x02
 310:	a3 83       	std	Z+3, r26	; 0x03
 312:	b4 83       	std	Z+4, r27	; 0x04
 314:	85 83       	std	Z+5, r24	; 0x05
    task4.elapsedTime = t4; // Task current elapsed time.
 316:	96 83       	std	Z+6, r25	; 0x06
 318:	a7 83       	std	Z+7, r26	; 0x07
 31a:	b0 87       	std	Z+8, r27	; 0x08
 31c:	84 e6       	ldi	r24, 0x64	; 100
    task4.TickFct = &Tick4; // Function pointer for the tick.
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	92 87       	std	Z+10, r25	; 0x0a
 322:	81 87       	std	Z+9, r24	; 0x09
 324:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <data>
    
    data = 0;
    
     SPI_ServantInit();
 328:	7b df       	rcall	.-266    	; 0x220 <SPI_ServantInit>
 32a:	7e 01       	movw	r14, r28
 32c:	85 e0       	ldi	r24, 0x05	; 5
 32e:	e8 0e       	add	r14, r24
 330:	f1 1c       	adc	r15, r1
 332:	de 01       	movw	r26, r28
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	6d 01       	movw	r12, r26
 338:	f6 01       	movw	r30, r12
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 33a:	01 91       	ld	r16, Z+
 33c:	11 91       	ld	r17, Z+
 33e:	6f 01       	movw	r12, r30
 340:	d8 01       	movw	r26, r16
 342:	15 96       	adiw	r26, 0x05	; 5
 344:	4d 91       	ld	r20, X+
 346:	5d 91       	ld	r21, X+
 348:	6d 91       	ld	r22, X+
 34a:	7c 91       	ld	r23, X
 34c:	18 97       	sbiw	r26, 0x08	; 8
 34e:	11 96       	adiw	r26, 0x01	; 1
 350:	8d 91       	ld	r24, X+
 352:	9d 91       	ld	r25, X+
 354:	0d 90       	ld	r0, X+
 356:	bc 91       	ld	r27, X
 358:	a0 2d       	mov	r26, r0
 35a:	48 17       	cp	r20, r24
 35c:	59 07       	cpc	r21, r25
 35e:	6a 07       	cpc	r22, r26
 360:	7b 07       	cpc	r23, r27
 362:	81 f4       	brne	.+32     	; 0x384 <main+0xf4>
 364:	f8 01       	movw	r30, r16
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 366:	80 81       	ld	r24, Z
 368:	01 84       	ldd	r0, Z+9	; 0x09
 36a:	f2 85       	ldd	r31, Z+10	; 0x0a
 36c:	e0 2d       	mov	r30, r0
 36e:	08 2e       	mov	r0, r24
 370:	00 0c       	add	r0, r0
 372:	99 0b       	sbc	r25, r25
 374:	09 95       	icall
 376:	d8 01       	movw	r26, r16
 378:	8c 93       	st	X, r24
 37a:	f8 01       	movw	r30, r16
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 37c:	15 82       	std	Z+5, r1	; 0x05
 37e:	16 82       	std	Z+6, r1	; 0x06
 380:	17 82       	std	Z+7, r1	; 0x07
 382:	10 86       	std	Z+8, r1	; 0x08
 384:	f8 01       	movw	r30, r16
            }
            tasks[i]->elapsedTime += 1;
 386:	85 81       	ldd	r24, Z+5	; 0x05
 388:	96 81       	ldd	r25, Z+6	; 0x06
 38a:	a7 81       	ldd	r26, Z+7	; 0x07
 38c:	b0 85       	ldd	r27, Z+8	; 0x08
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	a1 1d       	adc	r26, r1
 392:	b1 1d       	adc	r27, r1
 394:	85 83       	std	Z+5, r24	; 0x05
 396:	96 83       	std	Z+6, r25	; 0x06
 398:	a7 83       	std	Z+7, r26	; 0x07
 39a:	b0 87       	std	Z+8, r27	; 0x08
 39c:	ce 14       	cp	r12, r14
     SPI_ServantInit();
    
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
 39e:	df 04       	cpc	r13, r15
 3a0:	59 f6       	brne	.-106    	; 0x338 <main+0xa8>
 3a2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <TimerFlag>
                tasks[i]->elapsedTime = 0;
            }
            tasks[i]->elapsedTime += 1;
        }

        while(!TimerFlag){}
 3a6:	88 23       	and	r24, r24
 3a8:	e1 f3       	breq	.-8      	; 0x3a2 <main+0x112>
 3aa:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <TimerFlag>
        TimerFlag = 0;
 3ae:	c1 cf       	rjmp	.-126    	; 0x332 <main+0xa2>

000003b0 <slaveData>:
    }
 3b0:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <data>
    return 0;
}

void slaveData(){ 
    pattern = (data >> 4);
 3b4:	8e 2f       	mov	r24, r30
 3b6:	82 95       	swap	r24
 3b8:	8f 70       	andi	r24, 0x0F	; 15
 3ba:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <pattern>
    speed = (data & 0x0F);
 3be:	ef 70       	andi	r30, 0x0F	; 15
 3c0:	e0 93 5f 01 	sts	0x015F, r30	; 0x80015f <speed>
    t_max = speeds[speed];
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	e0 50       	subi	r30, 0x00	; 0
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	90 81       	ld	r25, Z
 3cc:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <t_max>
    p_size = sizes[pattern];
 3d0:	e8 2f       	mov	r30, r24
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	ea 5f       	subi	r30, 0xFA	; 250
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	80 81       	ld	r24, Z
 3da:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <p_size>
 3de:	08 95       	ret

000003e0 <Tick2>:

void slaveData();



int Tick2(int state){
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	ec 01       	movw	r28, r24
    
    switch(state){
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	21 f0       	breq	.+8      	; 0x3f2 <Tick2+0x12>
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	91 05       	cpc	r25, r1
 3ee:	99 f0       	breq	.+38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f0:	17 c0       	rjmp	.+46     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
        case START2:
            pattern =0;
 3f2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <pattern>
            p_size = 0;
 3f6:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <p_size>
            speed=0;
 3fa:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <speed>
            slave = 0;
 3fe:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <slave>
            t_count=0 ;
 402:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <t_count>
            t_max=2;
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <t_max>
            iter = 0;
 40c:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <iter+0x1>
 410:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <iter>
 414:	07 c0       	rjmp	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
        break;
        case RECEIVE:
                 //if( (PINB & 0x10) == 0){
                    data = SPI_ServantReceive();
 416:	08 df       	rcall	.-496    	; 0x228 <SPI_ServantReceive>
 418:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <data>
                    slaveData();
 41c:	c9 df       	rcall	.-110    	; 0x3b0 <slaveData>
 41e:	04 c0       	rjmp	.+8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 420:	89 2b       	or	r24, r25
        break;
        default:
        break;
    }
    
    switch(state){
 422:	11 f4       	brne	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 424:	c1 e0       	ldi	r28, 0x01	; 1
        case START2:
            state = RECEIVE;
 426:	d0 e0       	ldi	r29, 0x00	; 0
 428:	ce 01       	movw	r24, r28
        case RECEIVE:           
        break;
        default:break;
    }
    return state;
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <__udivmodqi4>:
 430:	99 1b       	sub	r25, r25
 432:	79 e0       	ldi	r23, 0x09	; 9
 434:	04 c0       	rjmp	.+8      	; 0x43e <__udivmodqi4_ep>

00000436 <__udivmodqi4_loop>:
 436:	99 1f       	adc	r25, r25
 438:	96 17       	cp	r25, r22
 43a:	08 f0       	brcs	.+2      	; 0x43e <__udivmodqi4_ep>
 43c:	96 1b       	sub	r25, r22

0000043e <__udivmodqi4_ep>:
 43e:	88 1f       	adc	r24, r24
 440:	7a 95       	dec	r23
 442:	c9 f7       	brne	.-14     	; 0x436 <__udivmodqi4_loop>
 444:	80 95       	com	r24
 446:	08 95       	ret

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
