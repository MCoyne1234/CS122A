
mcoyn001_xfern001_lab03_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000418  000004ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000418  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  0080010a  0080010a  000004b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f4a  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000997  00000000  00000000  0000154a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000732  00000000  00000000  00001ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063d  00000000  00000000  00002860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ca  00000000  00000000  00002e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003567  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a1 c0       	rjmp	.+322    	; 0x178 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0f c1       	rjmp	.+542    	; 0x26c <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 33       	cpi	r26, 0x35	; 53
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fd d0       	rcall	.+506    	; 0x2be <main>
  c4:	a7 c1       	rjmp	.+846    	; 0x414 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Tick3>:
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	d9 f4       	brne	.+54     	; 0x104 <Tick3+0x3c>
  ce:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <master>
  d2:	22 23       	and	r18, r18
  d4:	d9 f0       	breq	.+54     	; 0x10c <Tick3+0x44>
  d6:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <data>
  da:	20 31       	cpi	r18, 0x10	; 16
  dc:	19 f4       	brne	.+6      	; 0xe4 <Tick3+0x1c>
  de:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <data>
  e2:	03 c0       	rjmp	.+6      	; 0xea <Tick3+0x22>
  e4:	20 e1       	ldi	r18, 0x10	; 16
  e6:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <data>
  ea:	42 b1       	in	r20, 0x02	; 2
  ec:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <mask>
  f0:	32 2f       	mov	r19, r18
  f2:	30 95       	com	r19
  f4:	43 23       	and	r20, r19
  f6:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <data>
  fa:	32 23       	and	r19, r18
  fc:	24 2f       	mov	r18, r20
  fe:	23 2b       	or	r18, r19
 100:	22 b9       	out	0x02, r18	; 2
 102:	08 95       	ret
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	11 f4       	brne	.+4      	; 0x10c <Tick3+0x44>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	08 95       	ret

0000010e <TimerSet>:
 10e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 112:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 116:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 11a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 11e:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <_avr_timer_cntcurr>
 122:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <_avr_timer_cntcurr+0x1>
 126:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <_avr_timer_cntcurr+0x2>
 12a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <_avr_timer_cntcurr+0x3>
 12e:	08 95       	ret

00000130 <TimerOn>:
 130:	8b e0       	ldi	r24, 0x0B	; 11
 132:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 136:	8d e7       	ldi	r24, 0x7D	; 125
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 13e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 148:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 14c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 158:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 15c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 160:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 164:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 168:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 16c:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 170:	8f b7       	in	r24, 0x3f	; 63
 172:	80 68       	ori	r24, 0x80	; 128
 174:	8f bf       	out	0x3f, r24	; 63
 176:	08 95       	ret

00000178 <__vector_13>:
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_avr_timer_cntcurr>
 18e:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x1>
 192:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <_avr_timer_cntcurr+0x2>
 196:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <_avr_timer_cntcurr+0x3>
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	a1 09       	sbc	r26, r1
 19e:	b1 09       	sbc	r27, r1
 1a0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 1a4:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 1a8:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 1ac:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 1b0:	89 2b       	or	r24, r25
 1b2:	8a 2b       	or	r24, r26
 1b4:	8b 2b       	or	r24, r27
 1b6:	99 f4       	brne	.+38     	; 0x1de <__vector_13+0x66>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <TimerFlag>
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1ca:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ce:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 1d2:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 1d6:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 1da:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <SPI_MasterInit>:
 //Straight from the datasheet
volatile unsigned char receivedData;
 
void SPI_MasterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_SS)|(1<<DD_MOSI) | (1<<DD_SCK);
 1f0:	80 eb       	ldi	r24, 0xB0	; 176
 1f2:	84 b9       	out	0x04, r24	; 4
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 1f4:	81 e5       	ldi	r24, 0x51	; 81
 1f6:	8c bd       	out	0x2c, r24	; 44
 1f8:	08 95       	ret

000001fa <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(unsigned char cData){
	// Start transmission 
	SPDR = cData;
 1fa:	8e bd       	out	0x2e, r24	; 46
	
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 1fc:	0d b4       	in	r0, 0x2d	; 45
 1fe:	07 fe       	sbrs	r0, 7
 200:	fd cf       	rjmp	.-6      	; 0x1fc <SPI_MasterTransmit+0x2>
}
 202:	08 95       	ret

00000204 <Tick>:
enum States2{ START2, RECIEVE };
enum States3{ START3, ON};
char data, dataRec, master, mask;


int Tick(int state){
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
    
    switch(state){
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	91 05       	cpc	r25, r1
 20e:	41 f4       	brne	.+16     	; 0x220 <Tick+0x1c>
        case START:
        break;
        case LISTEN:
        break;
        case SEND:    
            if(master) SPI_MasterTransmit(data);       
 210:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <master>
 214:	88 23       	and	r24, r24
 216:	41 f0       	breq	.+16     	; 0x228 <Tick+0x24>
 218:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <data>
 21c:	ee df       	rcall	.-36     	; 0x1fa <SPI_MasterTransmit>
 21e:	04 c0       	rjmp	.+8      	; 0x228 <Tick+0x24>
        break;
        default:
        break;
    }
    
    switch(state){
 220:	89 2b       	or	r24, r25
 222:	11 f4       	brne	.+4      	; 0x228 <Tick+0x24>
        case START:
            state = SEND;
 224:	c2 e0       	ldi	r28, 0x02	; 2
 226:	d0 e0       	ldi	r29, 0x00	; 0
            //state = LISTEN;
        break;
        default:break;
    }
    return state;
}
 228:	ce 01       	movw	r24, r28
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <SPI_ServantInit>:

void SPI_ServantInit(void){
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI */
	SPCR = (1<<SPE);
 234:	8c bd       	out	0x2c, r24	; 44
 236:	08 95       	ret

00000238 <SPI_ServantReceive>:
}

char SPI_ServantReceive(void)
{
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)))
 238:	0d b4       	in	r0, 0x2d	; 45
 23a:	07 fe       	sbrs	r0, 7
 23c:	fd cf       	rjmp	.-6      	; 0x238 <SPI_ServantReceive>
;
/* Return Data Register */
return SPDR;
 23e:	8e b5       	in	r24, 0x2e	; 46
}
 240:	08 95       	ret

00000242 <Tick2>:

int Tick2(int state){
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
    
    switch(state){
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	91 05       	cpc	r25, r1
 24c:	39 f4       	brne	.+14     	; 0x25c <Tick2+0x1a>
        case START2:
        break;
        case RECIEVE:
            if(!master){
 24e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <master>
 252:	81 11       	cpse	r24, r1
 254:	07 c0       	rjmp	.+14     	; 0x264 <Tick2+0x22>
                PORTA = SPI_ServantReceive();//receivedData;
 256:	f0 df       	rcall	.-32     	; 0x238 <SPI_ServantReceive>
 258:	82 b9       	out	0x02, r24	; 2
 25a:	04 c0       	rjmp	.+8      	; 0x264 <Tick2+0x22>
        break;
        default:
        break;
    }
    
    switch(state){
 25c:	89 2b       	or	r24, r25
 25e:	11 f4       	brne	.+4      	; 0x264 <Tick2+0x22>
        case START2:
            state = RECIEVE;
 260:	c1 e0       	ldi	r28, 0x01	; 1
 262:	d0 e0       	ldi	r29, 0x00	; 0
        case RECIEVE:           
        break;
        default:break;
    }
    return state;
}
 264:	ce 01       	movw	r24, r28
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <__vector_19>:

ISR(SPI_STC_vect){
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	0b b6       	in	r0, 0x3b	; 59
 278:	0f 92       	push	r0
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
  receivedData = SPI_ServantReceive();
 292:	d2 df       	rcall	.-92     	; 0x238 <SPI_ServantReceive>
 294:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <receivedData>
}
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0b be       	out	0x3b, r0	; 59
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <main>:
    }
    return state;
}

int main(void)
{
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <main+0x6>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <main+0x8>
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <main+0xa>
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF; PORTA = 0x10;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	81 b9       	out	0x01, r24	; 1
 2d0:	10 e1       	ldi	r17, 0x10	; 16
 2d2:	12 b9       	out	0x02, r17	; 2
    //DDRB = 0xFE; PORTB = 0x00;
    DDRC = 0xF0; PORTC = 0x00;
 2d4:	90 ef       	ldi	r25, 0xF0	; 240
 2d6:	97 b9       	out	0x07, r25	; 7
 2d8:	18 b8       	out	0x08, r1	; 8
    DDRD = 0xFF; PORTD = 0x00;
 2da:	8a b9       	out	0x0a, r24	; 10
 2dc:	1b b8       	out	0x0b, r1	; 11
    
    TimerSet(2);
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	13 df       	rcall	.-474    	; 0x10e <TimerSet>
    TimerOn();
 2e8:	23 df       	rcall	.-442    	; 0x130 <TimerOn>
 2ea:	10 93 30 01 	sts	0x0130, r17	; 0x800130 <mask>
    
    //sei();
    
    mask = 0x10;
 2ee:	86 e0       	ldi	r24, 0x06	; 6
    unsigned long t1 = 50;
    unsigned long t2 = 3;
    unsigned long t3 = 250;
    
    static task task1, task2, task3;
    task *tasks[] = { &task3, &task1, &task2};
 2f0:	e4 e0       	ldi	r30, 0x04	; 4
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	de 01       	movw	r26, r28
 2f6:	11 96       	adiw	r26, 0x01	; 1
 2f8:	01 90       	ld	r0, Z+
 2fa:	0d 92       	st	X+, r0
 2fc:	8a 95       	dec	r24
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <main+0x3a>
 300:	e0 e2       	ldi	r30, 0x20	; 32
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    
    task1.state = 0;//Task initial state.
 302:	f1 e0       	ldi	r31, 0x01	; 1
 304:	10 82       	st	Z, r1
 306:	82 e3       	ldi	r24, 0x32	; 50
    task1.period = t1;//Task Period.
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	a0 e0       	ldi	r26, 0x00	; 0
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	81 83       	std	Z+1, r24	; 0x01
 310:	92 83       	std	Z+2, r25	; 0x02
 312:	a3 83       	std	Z+3, r26	; 0x03
 314:	b4 83       	std	Z+4, r27	; 0x04
 316:	85 83       	std	Z+5, r24	; 0x05
    task1.elapsedTime = t1; // Task current elasped time.
 318:	96 83       	std	Z+6, r25	; 0x06
 31a:	a7 83       	std	Z+7, r26	; 0x07
 31c:	b0 87       	std	Z+8, r27	; 0x08
 31e:	82 e0       	ldi	r24, 0x02	; 2
    task1.TickFct = &Tick; // Function pointer for the tick.
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	92 87       	std	Z+10, r25	; 0x0a
 324:	81 87       	std	Z+9, r24	; 0x09
 326:	e5 e1       	ldi	r30, 0x15	; 21
    
    task2.state = 0;//Task initial state.
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	10 82       	st	Z, r1
 32c:	83 e0       	ldi	r24, 0x03	; 3
    task2.period = t2;//Task Period.
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	a0 e0       	ldi	r26, 0x00	; 0
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	81 83       	std	Z+1, r24	; 0x01
 336:	92 83       	std	Z+2, r25	; 0x02
 338:	a3 83       	std	Z+3, r26	; 0x03
 33a:	b4 83       	std	Z+4, r27	; 0x04
 33c:	85 83       	std	Z+5, r24	; 0x05
    task2.elapsedTime = t2; // Task current elapsed time.
 33e:	96 83       	std	Z+6, r25	; 0x06
 340:	a7 83       	std	Z+7, r26	; 0x07
 342:	b0 87       	std	Z+8, r27	; 0x08
 344:	81 e2       	ldi	r24, 0x21	; 33
    task2.TickFct = &Tick2; // Function pointer for the tick.
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	92 87       	std	Z+10, r25	; 0x0a
 34a:	81 87       	std	Z+9, r24	; 0x09
 34c:	ea e0       	ldi	r30, 0x0A	; 10
    
    task3.state = 0;//Task initial state.
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	10 82       	st	Z, r1
 352:	8a ef       	ldi	r24, 0xFA	; 250
    task3.period = t3;//Task Period.
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	a0 e0       	ldi	r26, 0x00	; 0
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	81 83       	std	Z+1, r24	; 0x01
 35c:	92 83       	std	Z+2, r25	; 0x02
 35e:	a3 83       	std	Z+3, r26	; 0x03
 360:	b4 83       	std	Z+4, r27	; 0x04
 362:	85 83       	std	Z+5, r24	; 0x05
    task3.elapsedTime = t3; // Task current elapsed time.
 364:	96 83       	std	Z+6, r25	; 0x06
 366:	a7 83       	std	Z+7, r26	; 0x07
 368:	b0 87       	std	Z+8, r27	; 0x08
 36a:	84 e6       	ldi	r24, 0x64	; 100
    task3.TickFct = &Tick3; // Function pointer for the tick.
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	92 87       	std	Z+10, r25	; 0x0a
 370:	81 87       	std	Z+9, r24	; 0x09
 372:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <data>
    
    data = 0;
 376:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <dataRec>
    dataRec = 0;
 37a:	18 9b       	sbis	0x03, 0	; 3
    
    if(PINB & 0x01) master = 0xFF;
 37c:	05 c0       	rjmp	.+10     	; 0x388 <main+0xca>
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <master>
    else master = 0x00;
    
    if(master) SPI_MasterInit();
 384:	35 df       	rcall	.-406    	; 0x1f0 <SPI_MasterInit>
 386:	03 c0       	rjmp	.+6      	; 0x38e <main+0xd0>
    
    data = 0;
    dataRec = 0;
    
    if(PINB & 0x01) master = 0xFF;
    else master = 0x00;
 388:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <master>
    
    if(master) SPI_MasterInit();
    else SPI_ServantInit();
 38c:	51 df       	rcall	.-350    	; 0x230 <SPI_ServantInit>
 38e:	7e 01       	movw	r14, r28
 390:	87 e0       	ldi	r24, 0x07	; 7
 392:	e8 0e       	add	r14, r24
 394:	f1 1c       	adc	r15, r1
 396:	de 01       	movw	r26, r28
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	6d 01       	movw	r12, r26
 39c:	f6 01       	movw	r30, r12
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 39e:	01 91       	ld	r16, Z+
 3a0:	11 91       	ld	r17, Z+
 3a2:	6f 01       	movw	r12, r30
 3a4:	d8 01       	movw	r26, r16
 3a6:	15 96       	adiw	r26, 0x05	; 5
 3a8:	4d 91       	ld	r20, X+
 3aa:	5d 91       	ld	r21, X+
 3ac:	6d 91       	ld	r22, X+
 3ae:	7c 91       	ld	r23, X
 3b0:	18 97       	sbiw	r26, 0x08	; 8
 3b2:	11 96       	adiw	r26, 0x01	; 1
 3b4:	8d 91       	ld	r24, X+
 3b6:	9d 91       	ld	r25, X+
 3b8:	0d 90       	ld	r0, X+
 3ba:	bc 91       	ld	r27, X
 3bc:	a0 2d       	mov	r26, r0
 3be:	48 17       	cp	r20, r24
 3c0:	59 07       	cpc	r21, r25
 3c2:	6a 07       	cpc	r22, r26
 3c4:	7b 07       	cpc	r23, r27
 3c6:	81 f4       	brne	.+32     	; 0x3e8 <main+0x12a>
 3c8:	f8 01       	movw	r30, r16
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 3ca:	80 81       	ld	r24, Z
 3cc:	01 84       	ldd	r0, Z+9	; 0x09
 3ce:	f2 85       	ldd	r31, Z+10	; 0x0a
 3d0:	e0 2d       	mov	r30, r0
 3d2:	08 2e       	mov	r0, r24
 3d4:	00 0c       	add	r0, r0
 3d6:	99 0b       	sbc	r25, r25
 3d8:	09 95       	icall
 3da:	d8 01       	movw	r26, r16
 3dc:	8c 93       	st	X, r24
 3de:	f8 01       	movw	r30, r16
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 3e0:	15 82       	std	Z+5, r1	; 0x05
 3e2:	16 82       	std	Z+6, r1	; 0x06
 3e4:	17 82       	std	Z+7, r1	; 0x07
 3e6:	10 86       	std	Z+8, r1	; 0x08
 3e8:	f8 01       	movw	r30, r16
            }
            tasks[i]->elapsedTime += 1;
 3ea:	85 81       	ldd	r24, Z+5	; 0x05
 3ec:	96 81       	ldd	r25, Z+6	; 0x06
 3ee:	a7 81       	ldd	r26, Z+7	; 0x07
 3f0:	b0 85       	ldd	r27, Z+8	; 0x08
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	a1 1d       	adc	r26, r1
 3f6:	b1 1d       	adc	r27, r1
 3f8:	85 83       	std	Z+5, r24	; 0x05
 3fa:	96 83       	std	Z+6, r25	; 0x06
 3fc:	a7 83       	std	Z+7, r26	; 0x07
 3fe:	b0 87       	std	Z+8, r27	; 0x08
 400:	ce 14       	cp	r12, r14
    else SPI_ServantInit();
    
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
 402:	df 04       	cpc	r13, r15
 404:	59 f6       	brne	.-106    	; 0x39c <main+0xde>
 406:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <TimerFlag>
                tasks[i]->elapsedTime = 0;
            }
            tasks[i]->elapsedTime += 1;
        }

        while(!TimerFlag){}
 40a:	88 23       	and	r24, r24
 40c:	e1 f3       	breq	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <TimerFlag>
        TimerFlag = 0;
 412:	c1 cf       	rjmp	.-126    	; 0x396 <main+0xd8>

00000414 <_exit>:
    }
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
