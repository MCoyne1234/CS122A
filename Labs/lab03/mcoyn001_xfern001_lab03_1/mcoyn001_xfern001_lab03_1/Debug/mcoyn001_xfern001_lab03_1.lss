
mcoyn001_xfern001_lab03_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000007a8  0000083c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800126  00800126  00000862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001298  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a28  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a22  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  000030b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006db  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f7  00000000  00000000  00003a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000423e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
   6:	00 00       	nop
   8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
   a:	00 00       	nop
   c:	70 c0       	rjmp	.+224    	; 0xee <__bad_interrupt>
   e:	00 00       	nop
  10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
  12:	00 00       	nop
  14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
  16:	00 00       	nop
  18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
  1a:	00 00       	nop
  1c:	68 c0       	rjmp	.+208    	; 0xee <__bad_interrupt>
  1e:	00 00       	nop
  20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
  22:	00 00       	nop
  24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>
  26:	00 00       	nop
  28:	62 c0       	rjmp	.+196    	; 0xee <__bad_interrupt>
  2a:	00 00       	nop
  2c:	60 c0       	rjmp	.+192    	; 0xee <__bad_interrupt>
  2e:	00 00       	nop
  30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
  32:	00 00       	nop
  34:	92 c0       	rjmp	.+292    	; 0x15a <__vector_13>
  36:	00 00       	nop
  38:	5a c0       	rjmp	.+180    	; 0xee <__bad_interrupt>
  3a:	00 00       	nop
  3c:	58 c0       	rjmp	.+176    	; 0xee <__bad_interrupt>
  3e:	00 00       	nop
  40:	56 c0       	rjmp	.+172    	; 0xee <__bad_interrupt>
  42:	00 00       	nop
  44:	54 c0       	rjmp	.+168    	; 0xee <__bad_interrupt>
  46:	00 00       	nop
  48:	52 c0       	rjmp	.+164    	; 0xee <__bad_interrupt>
  4a:	00 00       	nop
  4c:	cf c1       	rjmp	.+926    	; 0x3ec <__vector_19>
  4e:	00 00       	nop
  50:	4e c0       	rjmp	.+156    	; 0xee <__bad_interrupt>
  52:	00 00       	nop
  54:	4c c0       	rjmp	.+152    	; 0xee <__bad_interrupt>
  56:	00 00       	nop
  58:	4a c0       	rjmp	.+148    	; 0xee <__bad_interrupt>
  5a:	00 00       	nop
  5c:	48 c0       	rjmp	.+144    	; 0xee <__bad_interrupt>
  5e:	00 00       	nop
  60:	46 c0       	rjmp	.+140    	; 0xee <__bad_interrupt>
  62:	00 00       	nop
  64:	44 c0       	rjmp	.+136    	; 0xee <__bad_interrupt>
  66:	00 00       	nop
  68:	42 c0       	rjmp	.+132    	; 0xee <__bad_interrupt>
  6a:	00 00       	nop
  6c:	40 c0       	rjmp	.+128    	; 0xee <__bad_interrupt>
  6e:	00 00       	nop
  70:	3e c0       	rjmp	.+124    	; 0xee <__bad_interrupt>
  72:	00 00       	nop
  74:	3c c0       	rjmp	.+120    	; 0xee <__bad_interrupt>
  76:	00 00       	nop
  78:	3a c0       	rjmp	.+116    	; 0xee <__bad_interrupt>
  7a:	00 00       	nop
  7c:	38 c0       	rjmp	.+112    	; 0xee <__bad_interrupt>
  7e:	00 00       	nop
  80:	36 c0       	rjmp	.+108    	; 0xee <__bad_interrupt>
  82:	00 00       	nop
  84:	34 c0       	rjmp	.+104    	; 0xee <__bad_interrupt>
  86:	00 00       	nop
  88:	32 c0       	rjmp	.+100    	; 0xee <__bad_interrupt>
  8a:	00 00       	nop
  8c:	55 03       	mulsu	r21, r21
  8e:	58 03       	fmul	r21, r16
  90:	5c 03       	fmul	r21, r20
  92:	60 03       	mulsu	r22, r16
  94:	64 03       	mulsu	r22, r20
  96:	68 03       	fmul	r22, r16
  98:	6c 03       	fmul	r22, r20
  9a:	6f 03       	fmul	r22, r23
  9c:	73 03       	mulsu	r23, r19
  9e:	76 03       	mulsu	r23, r22
  a0:	76 03       	mulsu	r23, r22
  a2:	76 03       	mulsu	r23, r22
  a4:	76 03       	mulsu	r23, r22
  a6:	76 03       	mulsu	r23, r22
  a8:	76 03       	mulsu	r23, r22
  aa:	76 03       	mulsu	r23, r22
  ac:	3a 03       	fmul	r19, r18
  ae:	40 03       	mulsu	r20, r16
  b0:	47 03       	mulsu	r20, r23
  b2:	4e 03       	fmul	r20, r22

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d0 e4       	ldi	r29, 0x40	; 64
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ea       	ldi	r30, 0xA8	; 168
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	00 e0       	ldi	r16, 0x00	; 0
  cc:	0b bf       	out	0x3b, r16	; 59
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x14>
  d0:	07 90       	elpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a6 32       	cpi	r26, 0x26	; 38
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0x10>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a6 e2       	ldi	r26, 0x26	; 38
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	a5 36       	cpi	r26, 0x65	; 101
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	f7 d1       	rcall	.+1006   	; 0x4da <main>
  ec:	5b c3       	rjmp	.+1718   	; 0x7a4 <_exit>

000000ee <__bad_interrupt>:
  ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <TimerSet>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  f0:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <_avr_timer_M>
  f4:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <_avr_timer_M+0x1>
  f8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_M+0x2>
  fc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_M+0x3>
 100:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <_avr_timer_cntcurr>
 104:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <_avr_timer_cntcurr+0x1>
 108:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <_avr_timer_cntcurr+0x2>
 10c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <_avr_timer_cntcurr+0x3>
 110:	08 95       	ret

00000112 <TimerOn>:
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 118:	8d e7       	ldi	r24, 0x7D	; 125
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 12a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 132:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_avr_timer_M>
 136:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <_avr_timer_M+0x1>
 13a:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <_avr_timer_M+0x2>
 13e:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <_avr_timer_M+0x3>
 142:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_avr_timer_cntcurr>
 146:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_avr_timer_cntcurr+0x1>
 14a:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <_avr_timer_cntcurr+0x2>
 14e:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <_avr_timer_cntcurr+0x3>
 152:	8f b7       	in	r24, 0x3f	; 63
 154:	80 68       	ori	r24, 0x80	; 128
 156:	8f bf       	out	0x3f, r24	; 63
 158:	08 95       	ret

0000015a <__vector_13>:
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_avr_timer_cntcurr>
 170:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_avr_timer_cntcurr+0x1>
 174:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <_avr_timer_cntcurr+0x2>
 178:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <_avr_timer_cntcurr+0x3>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	a1 09       	sbc	r26, r1
 180:	b1 09       	sbc	r27, r1
 182:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_avr_timer_cntcurr>
 186:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_avr_timer_cntcurr+0x1>
 18a:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <_avr_timer_cntcurr+0x2>
 18e:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <_avr_timer_cntcurr+0x3>
 192:	89 2b       	or	r24, r25
 194:	8a 2b       	or	r24, r26
 196:	8b 2b       	or	r24, r27
 198:	99 f4       	brne	.+38     	; 0x1c0 <__vector_13+0x66>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TimerFlag>
 1a0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_avr_timer_M>
 1a4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <_avr_timer_M+0x1>
 1a8:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <_avr_timer_M+0x2>
 1ac:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <_avr_timer_M+0x3>
 1b0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_avr_timer_cntcurr>
 1b4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_avr_timer_cntcurr+0x1>
 1b8:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <_avr_timer_cntcurr+0x2>
 1bc:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <_avr_timer_cntcurr+0x3>
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 1d2:	18 16       	cp	r1, r24
 1d4:	19 06       	cpc	r1, r25
 1d6:	5c f0       	brlt	.+22     	; 0x1ee <delay_ms+0x1c>
 1d8:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 1da:	00 00       	nop
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 1e0:	e1 f7       	brne	.-8      	; 0x1da <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 1e2:	4f 5f       	subi	r20, 0xFF	; 255
 1e4:	5f 4f       	sbci	r21, 0xFF	; 255
 1e6:	84 17       	cp	r24, r20
 1e8:	95 07       	cpc	r25, r21
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <delay_ms+0x20>
 1ec:	08 95       	ret
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 1f2:	27 e0       	ldi	r18, 0x07	; 7
 1f4:	33 e0       	ldi	r19, 0x03	; 3
 1f6:	f1 cf       	rjmp	.-30     	; 0x1da <delay_ms+0x8>

000001f8 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 1f8:	10 98       	cbi	0x02, 0	; 2
   DATA_BUS = Command;
 1fa:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 1fc:	11 9a       	sbi	0x02, 1	; 2
   asm("nop");
 1fe:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 200:	11 98       	cbi	0x02, 1	; 2
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	e5 cf       	rjmp	.-54     	; 0x1d2 <delay_ms>
 208:	08 95       	ret

0000020a <LCD_ClearScreen>:
#define E 1			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	f5 cf       	rjmp	.-22     	; 0x1f8 <LCD_WriteCommand>
 20e:	08 95       	ret

00000210 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 210:	81 31       	cpi	r24, 0x11	; 17
 212:	18 f4       	brcc	.+6      	; 0x21a <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 214:	81 58       	subi	r24, 0x81	; 129
 216:	f0 cf       	rjmp	.-32     	; 0x1f8 <LCD_WriteCommand>
 218:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 21a:	81 55       	subi	r24, 0x51	; 81
 21c:	ed cf       	rjmp	.-38     	; 0x1f8 <LCD_WriteCommand>
 21e:	08 95       	ret

00000220 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 220:	84 e6       	ldi	r24, 0x64	; 100
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	d6 df       	rcall	.-84     	; 0x1d2 <delay_ms>
	LCD_WriteCommand(0x38);
 226:	88 e3       	ldi	r24, 0x38	; 56
 228:	e7 df       	rcall	.-50     	; 0x1f8 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	e5 df       	rcall	.-54     	; 0x1f8 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 22e:	8f e0       	ldi	r24, 0x0F	; 15
 230:	e3 df       	rcall	.-58     	; 0x1f8 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	e1 df       	rcall	.-62     	; 0x1f8 <LCD_WriteCommand>
	delay_ms(10);						 
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	cb cf       	rjmp	.-106    	; 0x1d2 <delay_ms>
 23c:	08 95       	ret

0000023e <LCD_WriteData>:
 23e:	10 9a       	sbi	0x02, 0	; 2
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 240:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 242:	11 9a       	sbi	0x02, 1	; 2
   asm("nop");
 244:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 246:	11 98       	cbi	0x02, 1	; 2
   delay_ms(1);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	c2 cf       	rjmp	.-124    	; 0x1d2 <delay_ms>
 24e:	08 95       	ret

00000250 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	18 2f       	mov	r17, r24
 25a:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 25c:	d6 df       	rcall	.-84     	; 0x20a <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 25e:	88 81       	ld	r24, Y
 260:	88 23       	and	r24, r24
 262:	51 f0       	breq	.+20     	; 0x278 <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 264:	01 e0       	ldi	r16, 0x01	; 1
 266:	01 0f       	add	r16, r17
 268:	81 2f       	mov	r24, r17
 26a:	d2 df       	rcall	.-92     	; 0x210 <LCD_Cursor>
      LCD_WriteData(*string++);
 26c:	89 91       	ld	r24, Y+
 26e:	e7 df       	rcall	.-50     	; 0x23e <LCD_WriteData>
 270:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 272:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 274:	81 11       	cpse	r24, r1
 276:	f6 cf       	rjmp	.-20     	; 0x264 <LCD_DisplayString+0x14>
 278:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <Tick4>:
 282:	ef 92       	push	r14
        default:break;
    }
    return state;
}

int Tick4(int state){
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	61 97       	sbiw	r28, 0x11	; 17
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	8c 01       	movw	r16, r24
    
    switch(state){
 2a0:	00 97       	sbiw	r24, 0x00	; 0
 2a2:	21 f0       	breq	.+8      	; 0x2ac <Tick4+0x2a>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	91 05       	cpc	r25, r1
 2a8:	d1 f0       	breq	.+52     	; 0x2de <Tick4+0x5c>
 2aa:	50 c0       	rjmp	.+160    	; 0x34c <Tick4+0xca>
        case START3:
            pattern =0; 
 2ac:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <pattern>
            p_size = 0; 
 2b0:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <p_size>
            speed=0; 
 2b4:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <speed>
            slave = 0; 
 2b8:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <slave>
            t_count=0 ;
 2bc:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <t_count>
            t_max=0;
 2c0:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <t_max>
            iter = 0;
 2c4:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <iter+0x1>
 2c8:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <iter>
            if(master) key = 10;
 2cc:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <master>
 2d0:	88 23       	and	r24, r24
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <Tick4+0x54>
 2d4:	3d c0       	rjmp	.+122    	; 0x350 <Tick4+0xce>
 2d6:	8a e0       	ldi	r24, 0x0A	; 10
 2d8:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <key>
 2dc:	39 c0       	rjmp	.+114    	; 0x350 <Tick4+0xce>
        break;
        case ON:
            if(t_count == t_max){
 2de:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <t_count>
 2e2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <t_max>
 2e6:	89 13       	cpse	r24, r25
 2e8:	2d c0       	rjmp	.+90     	; 0x344 <Tick4+0xc2>
                if(master && (key != '\0' )) {
 2ea:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <master>
 2ee:	88 23       	and	r24, r24
 2f0:	89 f1       	breq	.+98     	; 0x354 <Tick4+0xd2>
 2f2:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <key>
 2f6:	88 23       	and	r24, r24
 2f8:	69 f1       	breq	.+90     	; 0x354 <Tick4+0xd2>
                    message_1[6] = (pattern +'1');
 2fa:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <pattern>
 2fe:	8f 5c       	subi	r24, 0xCF	; 207
 300:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <message_1+0x6>
                    message_2[5] = (speed +'1');
 304:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <speed>
 308:	8f 5c       	subi	r24, 0xCF	; 207
 30a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <message_2+0x5>
                    message_3[4] = (slave +'0');
 30e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <slave>
 312:	80 5d       	subi	r24, 0xD0	; 208
 314:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
                    char line_1[17] = {};
 318:	ce 01       	movw	r24, r28
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	7c 01       	movw	r14, r24
 31e:	81 e1       	ldi	r24, 0x11	; 17
 320:	f7 01       	movw	r30, r14
 322:	11 92       	st	Z+, r1
 324:	8a 95       	dec	r24
 326:	e9 f7       	brne	.-6      	; 0x322 <Tick4+0xa0>
                    strcat(line_1, message_1);
 328:	6d e0       	ldi	r22, 0x0D	; 13
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	c7 01       	movw	r24, r14
 32e:	2f d2       	rcall	.+1118   	; 0x78e <strcat>
                    strcat(line_1, message_2);
 330:	66 e0       	ldi	r22, 0x06	; 6
 332:	71 e0       	ldi	r23, 0x01	; 1
 334:	c7 01       	movw	r24, r14
 336:	2b d2       	rcall	.+1110   	; 0x78e <strcat>
                     
                    LCD_DisplayString( 1, (unsigned char*)line_1);
 338:	b7 01       	movw	r22, r14
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	89 df       	rcall	.-238    	; 0x250 <LCD_DisplayString>
                    //LCD_DisplayString( 17, (unsigned char*)message_2);
                    t_count = 0;
 33e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <t_count>
 342:	08 c0       	rjmp	.+16     	; 0x354 <Tick4+0xd2>
                }
            }else ++t_count;                
 344:	8f 5f       	subi	r24, 0xFF	; 255
 346:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <t_count>
 34a:	04 c0       	rjmp	.+8      	; 0x354 <Tick4+0xd2>
        break;
        default:
        break;
    }
    
    switch(state){
 34c:	89 2b       	or	r24, r25
 34e:	11 f4       	brne	.+4      	; 0x354 <Tick4+0xd2>
        case START:
        state = ON;
 350:	01 e0       	ldi	r16, 0x01	; 1
 352:	10 e0       	ldi	r17, 0x00	; 0
        case ON:
        break;
        default:break;
    }
    return state;
}
 354:	c8 01       	movw	r24, r16
 356:	61 96       	adiw	r28, 0x11	; 17
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	08 95       	ret

00000370 <SPI_MasterInit>:
 //Straight from the datasheet
volatile unsigned char receivedData;
 
void SPI_MasterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_SS)|(1<<DD_MOSI) | (1<<DD_SCK);
 370:	80 eb       	ldi	r24, 0xB0	; 176
 372:	84 b9       	out	0x04, r24	; 4
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 374:	81 e5       	ldi	r24, 0x51	; 81
 376:	8c bd       	out	0x2c, r24	; 44
 378:	08 95       	ret

0000037a <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(unsigned char cData){
	// Start transmission 
	SPDR = cData;
 37a:	8e bd       	out	0x2e, r24	; 46
	
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 37c:	0d b4       	in	r0, 0x2d	; 45
 37e:	07 fe       	sbrs	r0, 7
 380:	fd cf       	rjmp	.-6      	; 0x37c <SPI_MasterTransmit+0x2>
}
 382:	08 95       	ret

00000384 <Tick>:


void keyAssign();
void slaveData();

int Tick(int state){
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ec 01       	movw	r28, r24
    
    switch(state){
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	91 05       	cpc	r25, r1
 38e:	41 f4       	brne	.+16     	; 0x3a0 <Tick+0x1c>
        case START:
        break;
        case LISTEN:
        break;
        case SEND:    
            if(master) SPI_MasterTransmit(data);       
 390:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <master>
 394:	88 23       	and	r24, r24
 396:	41 f0       	breq	.+16     	; 0x3a8 <Tick+0x24>
 398:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <data>
 39c:	ee df       	rcall	.-36     	; 0x37a <SPI_MasterTransmit>
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <Tick+0x24>
        break;
        default:
        break;
    }
    
    switch(state){
 3a0:	89 2b       	or	r24, r25
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <Tick+0x24>
        case START:
            state = SEND;
 3a4:	c2 e0       	ldi	r28, 0x02	; 2
 3a6:	d0 e0       	ldi	r29, 0x00	; 0
            //state = LISTEN;
        break;
        default:break;
    }
    return state;
}
 3a8:	ce 01       	movw	r24, r28
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <SPI_ServantInit>:

void SPI_ServantInit(void){
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
 3b0:	80 e4       	ldi	r24, 0x40	; 64
 3b2:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI */
	SPCR = (1<<SPE);
 3b4:	8c bd       	out	0x2c, r24	; 44
 3b6:	08 95       	ret

000003b8 <SPI_ServantReceive>:
}

char SPI_ServantReceive(void)
{
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)))
 3b8:	0d b4       	in	r0, 0x2d	; 45
 3ba:	07 fe       	sbrs	r0, 7
 3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <SPI_ServantReceive>
;
/* Return Data Register */
return SPDR;
 3be:	8e b5       	in	r24, 0x2e	; 46
}
 3c0:	08 95       	ret

000003c2 <Tick2>:

int Tick2(int state){
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	ec 01       	movw	r28, r24
    
    switch(state){
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	91 05       	cpc	r25, r1
 3cc:	39 f4       	brne	.+14     	; 0x3dc <Tick2+0x1a>
        case START2:
        break;
        case RECIEVE:
            if(!master){
 3ce:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <master>
 3d2:	81 11       	cpse	r24, r1
 3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <Tick2+0x22>
                PORTA = SPI_ServantReceive();//receivedData;
 3d6:	f0 df       	rcall	.-32     	; 0x3b8 <SPI_ServantReceive>
 3d8:	82 b9       	out	0x02, r24	; 2
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <Tick2+0x22>
        break;
        default:
        break;
    }
    
    switch(state){
 3dc:	89 2b       	or	r24, r25
 3de:	11 f4       	brne	.+4      	; 0x3e4 <Tick2+0x22>
        case START2:
            state = RECIEVE;
 3e0:	c1 e0       	ldi	r28, 0x01	; 1
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
        case RECIEVE:           
        break;
        default:break;
    }
    return state;
}
 3e4:	ce 01       	movw	r24, r28
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <__vector_19>:

ISR(SPI_STC_vect){
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	0b b6       	in	r0, 0x3b	; 59
 3f8:	0f 92       	push	r0
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
  receivedData = SPI_ServantReceive();
 412:	d2 df       	rcall	.-92     	; 0x3b8 <SPI_ServantReceive>
 414:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <receivedData>
}
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0b be       	out	0x3b, r0	; 59
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
 43e:	8f ee       	ldi	r24, 0xEF	; 239
 440:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 442:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 444:	30 9b       	sbis	0x06, 0	; 6
 446:	29 c0       	rjmp	.+82     	; 0x49a <GetKeypadKey+0x5c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 448:	31 9b       	sbis	0x06, 1	; 6
 44a:	29 c0       	rjmp	.+82     	; 0x49e <GetKeypadKey+0x60>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 44c:	32 9b       	sbis	0x06, 2	; 6
 44e:	29 c0       	rjmp	.+82     	; 0x4a2 <GetKeypadKey+0x64>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 450:	33 9b       	sbis	0x06, 3	; 6
 452:	29 c0       	rjmp	.+82     	; 0x4a6 <GetKeypadKey+0x68>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
 454:	8f ed       	ldi	r24, 0xDF	; 223
 456:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 458:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 45a:	30 9b       	sbis	0x06, 0	; 6
 45c:	26 c0       	rjmp	.+76     	; 0x4aa <GetKeypadKey+0x6c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 45e:	31 9b       	sbis	0x06, 1	; 6
 460:	26 c0       	rjmp	.+76     	; 0x4ae <GetKeypadKey+0x70>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 462:	32 9b       	sbis	0x06, 2	; 6
 464:	26 c0       	rjmp	.+76     	; 0x4b2 <GetKeypadKey+0x74>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 466:	33 9b       	sbis	0x06, 3	; 6
 468:	26 c0       	rjmp	.+76     	; 0x4b6 <GetKeypadKey+0x78>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
 46a:	8f eb       	ldi	r24, 0xBF	; 191
 46c:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 46e:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 470:	30 9b       	sbis	0x06, 0	; 6
 472:	23 c0       	rjmp	.+70     	; 0x4ba <GetKeypadKey+0x7c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 474:	31 9b       	sbis	0x06, 1	; 6
 476:	23 c0       	rjmp	.+70     	; 0x4be <GetKeypadKey+0x80>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 478:	32 9b       	sbis	0x06, 2	; 6
 47a:	23 c0       	rjmp	.+70     	; 0x4c2 <GetKeypadKey+0x84>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 47c:	33 9b       	sbis	0x06, 3	; 6
 47e:	23 c0       	rjmp	.+70     	; 0x4c6 <GetKeypadKey+0x88>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
 480:	8f e7       	ldi	r24, 0x7F	; 127
 482:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 484:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 486:	30 9b       	sbis	0x06, 0	; 6
 488:	20 c0       	rjmp	.+64     	; 0x4ca <GetKeypadKey+0x8c>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 48a:	31 9b       	sbis	0x06, 1	; 6
 48c:	20 c0       	rjmp	.+64     	; 0x4ce <GetKeypadKey+0x90>
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 48e:	32 9b       	sbis	0x06, 2	; 6
 490:	20 c0       	rjmp	.+64     	; 0x4d2 <GetKeypadKey+0x94>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 492:	33 9b       	sbis	0x06, 3	; 6
 494:	20 c0       	rjmp	.+64     	; 0x4d6 <GetKeypadKey+0x98>
	
	return '\0';
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 49a:	81 e3       	ldi	r24, 0x31	; 49
 49c:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 49e:	84 e3       	ldi	r24, 0x34	; 52
 4a0:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 4a2:	87 e3       	ldi	r24, 0x37	; 55
 4a4:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 4a6:	8a e2       	ldi	r24, 0x2A	; 42
 4a8:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 4aa:	82 e3       	ldi	r24, 0x32	; 50
 4ac:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 4ae:	85 e3       	ldi	r24, 0x35	; 53
 4b0:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 4b2:	88 e3       	ldi	r24, 0x38	; 56
 4b4:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 4b6:	80 e3       	ldi	r24, 0x30	; 48
 4b8:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 4ba:	83 e3       	ldi	r24, 0x33	; 51
 4bc:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 4be:	86 e3       	ldi	r24, 0x36	; 54
 4c0:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 4c2:	89 e3       	ldi	r24, 0x39	; 57
 4c4:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 4c6:	83 e2       	ldi	r24, 0x23	; 35
 4c8:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 4ca:	81 e4       	ldi	r24, 0x41	; 65
 4cc:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 4ce:	82 e4       	ldi	r24, 0x42	; 66
 4d0:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 4d2:	83 e4       	ldi	r24, 0x43	; 67
 4d4:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 4d6:	84 e4       	ldi	r24, 0x44	; 68
	
	return '\0';
}
 4d8:	08 95       	ret

000004da <main>:
    }
    return state;
}

int main(void)
{
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	28 97       	sbiw	r28, 0x08	; 8
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF; PORTA = 0x10;
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	81 b9       	out	0x01, r24	; 1
 4f2:	90 e1       	ldi	r25, 0x10	; 16
 4f4:	92 b9       	out	0x02, r25	; 2
    //DDRB = 0xFE; PORTB = 0x00;
    DDRC = 0xF0; PORTC = 0x00;
 4f6:	10 ef       	ldi	r17, 0xF0	; 240
 4f8:	17 b9       	out	0x07, r17	; 7
 4fa:	18 b8       	out	0x08, r1	; 8
    DDRD = 0xFF; PORTD = 0x00;
 4fc:	8a b9       	out	0x0a, r24	; 10
 4fe:	1b b8       	out	0x0b, r1	; 11
    
    TimerSet(50);
 500:	62 e3       	ldi	r22, 0x32	; 50
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	f3 dd       	rcall	.-1050   	; 0xf0 <TimerSet>
    TimerOn();
 50a:	03 de       	rcall	.-1018   	; 0x112 <TimerOn>
    
    LCD_init();
 50c:	89 de       	rcall	.-750    	; 0x220 <LCD_init>
 50e:	7d de       	rcall	.-774    	; 0x20a <LCD_ClearScreen>
    LCD_ClearScreen();
 510:	10 93 63 01 	sts	0x0163, r17	; 0x800163 <maskUp>
    //LCD_Cursor(1);   
    //LCD_DisplayString( 1, (unsigned char*)"YO");
    
    maskUp = 0xF0;
 514:	8f e0       	ldi	r24, 0x0F	; 15
 516:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <maskLow>
    maskLow = 0x0F;
 51a:	88 e0       	ldi	r24, 0x08	; 8
 51c:	ee e1       	ldi	r30, 0x1E	; 30
    unsigned long t2 = 2;
    unsigned long t3 = 1;
    unsigned long t4 = 1;
    
    static task task1, task2, task3, task4;
    task *tasks[] = { &task3, &task1, &task2, &task4};
 51e:	f1 e0       	ldi	r31, 0x01	; 1
 520:	de 01       	movw	r26, r28
 522:	11 96       	adiw	r26, 0x01	; 1
 524:	01 90       	ld	r0, Z+
 526:	0d 92       	st	X+, r0
 528:	8a 95       	dec	r24
 52a:	e1 f7       	brne	.-8      	; 0x524 <main+0x4a>
 52c:	e7 e4       	ldi	r30, 0x47	; 71
 52e:	f1 e0       	ldi	r31, 0x01	; 1
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    
    task1.state = 0;//Task initial state.
 530:	10 82       	st	Z, r1
 532:	86 e0       	ldi	r24, 0x06	; 6
 534:	90 e0       	ldi	r25, 0x00	; 0
    task1.period = t1;//Task Period.
 536:	a0 e0       	ldi	r26, 0x00	; 0
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	81 83       	std	Z+1, r24	; 0x01
 53c:	92 83       	std	Z+2, r25	; 0x02
 53e:	a3 83       	std	Z+3, r26	; 0x03
 540:	b4 83       	std	Z+4, r27	; 0x04
 542:	85 83       	std	Z+5, r24	; 0x05
 544:	96 83       	std	Z+6, r25	; 0x06
    task1.elapsedTime = t1; // Task current elasped time.
 546:	a7 83       	std	Z+7, r26	; 0x07
 548:	b0 87       	std	Z+8, r27	; 0x08
 54a:	82 ec       	ldi	r24, 0xC2	; 194
 54c:	91 e0       	ldi	r25, 0x01	; 1
    task1.TickFct = &Tick; // Function pointer for the tick.
 54e:	92 87       	std	Z+10, r25	; 0x0a
 550:	81 87       	std	Z+9, r24	; 0x09
 552:	ec e3       	ldi	r30, 0x3C	; 60
 554:	f1 e0       	ldi	r31, 0x01	; 1
    
    task2.state = 0;//Task initial state.
 556:	10 82       	st	Z, r1
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	90 e0       	ldi	r25, 0x00	; 0
    task2.period = t2;//Task Period.
 55c:	a0 e0       	ldi	r26, 0x00	; 0
 55e:	b0 e0       	ldi	r27, 0x00	; 0
 560:	81 83       	std	Z+1, r24	; 0x01
 562:	92 83       	std	Z+2, r25	; 0x02
 564:	a3 83       	std	Z+3, r26	; 0x03
 566:	b4 83       	std	Z+4, r27	; 0x04
 568:	85 83       	std	Z+5, r24	; 0x05
 56a:	96 83       	std	Z+6, r25	; 0x06
    task2.elapsedTime = t2; // Task current elapsed time.
 56c:	a7 83       	std	Z+7, r26	; 0x07
 56e:	b0 87       	std	Z+8, r27	; 0x08
 570:	81 ee       	ldi	r24, 0xE1	; 225
 572:	91 e0       	ldi	r25, 0x01	; 1
    task2.TickFct = &Tick2; // Function pointer for the tick.
 574:	92 87       	std	Z+10, r25	; 0x0a
 576:	81 87       	std	Z+9, r24	; 0x09
 578:	e1 e3       	ldi	r30, 0x31	; 49
 57a:	f1 e0       	ldi	r31, 0x01	; 1
    
    task3.state = 0;//Task initial state.
 57c:	10 82       	st	Z, r1
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
    task3.period = t3;//Task Period.
 582:	a0 e0       	ldi	r26, 0x00	; 0
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	81 83       	std	Z+1, r24	; 0x01
 588:	92 83       	std	Z+2, r25	; 0x02
 58a:	a3 83       	std	Z+3, r26	; 0x03
 58c:	b4 83       	std	Z+4, r27	; 0x04
 58e:	85 83       	std	Z+5, r24	; 0x05
 590:	96 83       	std	Z+6, r25	; 0x06
    task3.elapsedTime = t3; // Task current elapsed time.
 592:	a7 83       	std	Z+7, r26	; 0x07
 594:	b0 87       	std	Z+8, r27	; 0x08
 596:	23 ea       	ldi	r18, 0xA3	; 163
 598:	33 e0       	ldi	r19, 0x03	; 3
    task3.TickFct = &Tick3; // Function pointer for the tick.
 59a:	32 87       	std	Z+10, r19	; 0x0a
 59c:	21 87       	std	Z+9, r18	; 0x09
 59e:	e6 e2       	ldi	r30, 0x26	; 38
 5a0:	f1 e0       	ldi	r31, 0x01	; 1
    
    task4.state = 0;//Task initial state.
 5a2:	10 82       	st	Z, r1
 5a4:	81 83       	std	Z+1, r24	; 0x01
 5a6:	92 83       	std	Z+2, r25	; 0x02
    task4.period = t4;//Task Period.
 5a8:	a3 83       	std	Z+3, r26	; 0x03
 5aa:	b4 83       	std	Z+4, r27	; 0x04
 5ac:	85 83       	std	Z+5, r24	; 0x05
 5ae:	96 83       	std	Z+6, r25	; 0x06
    task4.elapsedTime = t4; // Task current elapsed time.
 5b0:	a7 83       	std	Z+7, r26	; 0x07
 5b2:	b0 87       	std	Z+8, r27	; 0x08
 5b4:	81 e4       	ldi	r24, 0x41	; 65
 5b6:	91 e0       	ldi	r25, 0x01	; 1
    task4.TickFct = &Tick4; // Function pointer for the tick.
 5b8:	92 87       	std	Z+10, r25	; 0x0a
 5ba:	81 87       	std	Z+9, r24	; 0x09
 5bc:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <data>
    
    data = 0;
 5c0:	18 9b       	sbis	0x03, 0	; 3
 5c2:	05 c0       	rjmp	.+10     	; 0x5ce <main+0xf4>
    
    if(PINB & 0x01) master = 0xFF;
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <master>
 5ca:	d2 de       	rcall	.-604    	; 0x370 <SPI_MasterInit>
    else master = 0x00;
    
    if(master) SPI_MasterInit();
 5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <main+0xfa>
 5ce:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <master>
    task4.TickFct = &Tick4; // Function pointer for the tick.
    
    data = 0;
    
    if(PINB & 0x01) master = 0xFF;
    else master = 0x00;
 5d2:	ee de       	rcall	.-548    	; 0x3b0 <SPI_ServantInit>
    
    if(master) SPI_MasterInit();
    else SPI_ServantInit();
 5d4:	7e 01       	movw	r14, r28
 5d6:	89 e0       	ldi	r24, 0x09	; 9
 5d8:	e8 0e       	add	r14, r24
 5da:	f1 1c       	adc	r15, r1
 5dc:	de 01       	movw	r26, r28
 5de:	11 96       	adiw	r26, 0x01	; 1
 5e0:	6d 01       	movw	r12, r26
 5e2:	f6 01       	movw	r30, r12
 5e4:	01 91       	ld	r16, Z+
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 5e6:	11 91       	ld	r17, Z+
 5e8:	6f 01       	movw	r12, r30
 5ea:	d8 01       	movw	r26, r16
 5ec:	15 96       	adiw	r26, 0x05	; 5
 5ee:	4d 91       	ld	r20, X+
 5f0:	5d 91       	ld	r21, X+
 5f2:	6d 91       	ld	r22, X+
 5f4:	7c 91       	ld	r23, X
 5f6:	18 97       	sbiw	r26, 0x08	; 8
 5f8:	11 96       	adiw	r26, 0x01	; 1
 5fa:	8d 91       	ld	r24, X+
 5fc:	9d 91       	ld	r25, X+
 5fe:	0d 90       	ld	r0, X+
 600:	bc 91       	ld	r27, X
 602:	a0 2d       	mov	r26, r0
 604:	48 17       	cp	r20, r24
 606:	59 07       	cpc	r21, r25
 608:	6a 07       	cpc	r22, r26
 60a:	7b 07       	cpc	r23, r27
 60c:	81 f4       	brne	.+32     	; 0x62e <main+0x154>
 60e:	f8 01       	movw	r30, r16
 610:	80 81       	ld	r24, Z
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 612:	01 84       	ldd	r0, Z+9	; 0x09
 614:	f2 85       	ldd	r31, Z+10	; 0x0a
 616:	e0 2d       	mov	r30, r0
 618:	08 2e       	mov	r0, r24
 61a:	00 0c       	add	r0, r0
 61c:	99 0b       	sbc	r25, r25
 61e:	09 95       	icall
 620:	d8 01       	movw	r26, r16
 622:	8c 93       	st	X, r24
 624:	f8 01       	movw	r30, r16
 626:	15 82       	std	Z+5, r1	; 0x05
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 628:	16 82       	std	Z+6, r1	; 0x06
 62a:	17 82       	std	Z+7, r1	; 0x07
 62c:	10 86       	std	Z+8, r1	; 0x08
 62e:	f8 01       	movw	r30, r16
 630:	85 81       	ldd	r24, Z+5	; 0x05
            }
            tasks[i]->elapsedTime += 1;
 632:	96 81       	ldd	r25, Z+6	; 0x06
 634:	a7 81       	ldd	r26, Z+7	; 0x07
 636:	b0 85       	ldd	r27, Z+8	; 0x08
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	a1 1d       	adc	r26, r1
 63c:	b1 1d       	adc	r27, r1
 63e:	85 83       	std	Z+5, r24	; 0x05
 640:	96 83       	std	Z+6, r25	; 0x06
 642:	a7 83       	std	Z+7, r26	; 0x07
 644:	b0 87       	std	Z+8, r27	; 0x08
 646:	ce 14       	cp	r12, r14
 648:	df 04       	cpc	r13, r15
    else SPI_ServantInit();
    
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
 64a:	59 f6       	brne	.-106    	; 0x5e2 <main+0x108>
 64c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <TimerFlag>
                tasks[i]->elapsedTime = 0;
            }
            tasks[i]->elapsedTime += 1;
        }

        while(!TimerFlag){}
 650:	88 23       	and	r24, r24
 652:	e1 f3       	breq	.-8      	; 0x64c <main+0x172>
 654:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <TimerFlag>
        TimerFlag = 0;
 658:	c1 cf       	rjmp	.-126    	; 0x5dc <main+0x102>

0000065a <keyAssign>:
 65a:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <key>
    return 0;
}

void keyAssign(){
    
    switch(key){
 65e:	8e 2f       	mov	r24, r30
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	fc 01       	movw	r30, r24
 664:	f1 97       	sbiw	r30, 0x31	; 49
 666:	e4 31       	cpi	r30, 0x14	; 20
 668:	f1 05       	cpc	r31, r1
 66a:	08 f0       	brcs	.+2      	; 0x66e <keyAssign+0x14>
 66c:	3f c0       	rjmp	.+126    	; 0x6ec <keyAssign+0x92>
 66e:	ea 5b       	subi	r30, 0xBA	; 186
 670:	ff 4f       	sbci	r31, 0xFF	; 255
 672:	84 c0       	rjmp	.+264    	; 0x77c <__tablejump2__>
        case 'A':
            pattern = 0;
 674:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <pattern>
            p_size = 2;
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <p_size>
        break;
 67e:	36 c0       	rjmp	.+108    	; 0x6ec <keyAssign+0x92>
        case 'B':
            pattern = 1;
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <pattern>
        p_size = 2;
 686:	82 e0       	ldi	r24, 0x02	; 2
 688:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <p_size>
        break;
 68c:	2f c0       	rjmp	.+94     	; 0x6ec <keyAssign+0x92>
        case 'C':
            pattern = 2;
 68e:	82 e0       	ldi	r24, 0x02	; 2
 690:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <pattern>
        p_size = 14;
 694:	8e e0       	ldi	r24, 0x0E	; 14
 696:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <p_size>
        break;
 69a:	28 c0       	rjmp	.+80     	; 0x6ec <keyAssign+0x92>
        case 'D':
            pattern = 3;
 69c:	83 e0       	ldi	r24, 0x03	; 3
 69e:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <pattern>
            p_size = 17;
 6a2:	81 e1       	ldi	r24, 0x11	; 17
 6a4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <p_size>
        break;
 6a8:	21 c0       	rjmp	.+66     	; 0x6ec <keyAssign+0x92>
        case '1':
            speed = 0;
 6aa:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <speed>
        break;
 6ae:	1e c0       	rjmp	.+60     	; 0x6ec <keyAssign+0x92>
        case '2':
            speed = 1;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <speed>
        break;
 6b6:	1a c0       	rjmp	.+52     	; 0x6ec <keyAssign+0x92>
            case '3':
            speed = 2;
 6b8:	82 e0       	ldi	r24, 0x02	; 2
 6ba:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <speed>
        break;
 6be:	16 c0       	rjmp	.+44     	; 0x6ec <keyAssign+0x92>
        case '4':
            speed = 3;
 6c0:	83 e0       	ldi	r24, 0x03	; 3
 6c2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <speed>
        break;
 6c6:	12 c0       	rjmp	.+36     	; 0x6ec <keyAssign+0x92>
        case '5':
            speed = 4;
 6c8:	84 e0       	ldi	r24, 0x04	; 4
 6ca:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <speed>
        break;
 6ce:	0e c0       	rjmp	.+28     	; 0x6ec <keyAssign+0x92>
        case '6':
            speed = 5;
 6d0:	85 e0       	ldi	r24, 0x05	; 5
 6d2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <speed>
        break;
 6d6:	0a c0       	rjmp	.+20     	; 0x6ec <keyAssign+0x92>
        case '7':
            slave = 0;
 6d8:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <slave>
        break;
 6dc:	07 c0       	rjmp	.+14     	; 0x6ec <keyAssign+0x92>
        case '8':
            slave = 1;
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <slave>
        break;
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <keyAssign+0x92>
        case '9':
            slave = 2;
 6e6:	82 e0       	ldi	r24, 0x02	; 2
 6e8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <slave>
        break;
        default:
        break;
    }
    
    data = ( (data & ~maskUp) | ( (pattern << 4) & maskUp) )
 6ec:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <data>
 6f0:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <maskLow>
 6f4:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <pattern>
 6f8:	80 e1       	ldi	r24, 0x10	; 16
 6fa:	28 9f       	mul	r18, r24
 6fc:	90 01       	movw	r18, r0
 6fe:	11 24       	eor	r1, r1
 700:	24 27       	eor	r18, r20
 702:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <maskUp>
 706:	23 23       	and	r18, r19
 708:	24 27       	eor	r18, r20
 70a:	85 2f       	mov	r24, r21
 70c:	80 95       	com	r24
 70e:	48 23       	and	r20, r24
 710:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <speed>
 714:	95 23       	and	r25, r21
 716:	84 2f       	mov	r24, r20
 718:	89 2b       	or	r24, r25
 71a:	82 2b       	or	r24, r18
 71c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <data>
 720:	08 95       	ret

00000722 <slaveData>:
    | ( ( data & ~maskLow) | ( (speed) & maskLow) );
}

void slaveData(){ 
    pattern = (data >> 4);
 722:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <data>
 726:	8e 2f       	mov	r24, r30
 728:	82 95       	swap	r24
 72a:	8f 70       	andi	r24, 0x0F	; 15
 72c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <pattern>
    speed = (data & 0x0F);
 730:	8e 2f       	mov	r24, r30
 732:	8f 70       	andi	r24, 0x0F	; 15
 734:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <speed>
    p_size = sizes[data];
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	ea 5e       	subi	r30, 0xEA	; 234
 73c:	fe 4f       	sbci	r31, 0xFE	; 254
 73e:	80 81       	ld	r24, Z
 740:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <p_size>
 744:	08 95       	ret

00000746 <Tick3>:
        default:break;
    }
    return state;
}

int Tick3(int state){
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	ec 01       	movw	r28, r24
    
    switch(state){
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	91 05       	cpc	r25, r1
 750:	69 f4       	brne	.+26     	; 0x76c <Tick3+0x26>
        case START3:
        break;
        case ON:
            if(master) {
 752:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <master>
 756:	88 23       	and	r24, r24
 758:	39 f0       	breq	.+14     	; 0x768 <Tick3+0x22>
                key = GetKeypadKey();
 75a:	71 de       	rcall	.-798    	; 0x43e <GetKeypadKey>
 75c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <key>
                if(key != '\0' ){
 760:	88 23       	and	r24, r24
                    keyAssign();
 762:	41 f0       	breq	.+16     	; 0x774 <Tick3+0x2e>
 764:	7a df       	rcall	.-268    	; 0x65a <keyAssign>
                 }
            }else  slaveData();           
 766:	06 c0       	rjmp	.+12     	; 0x774 <Tick3+0x2e>
 768:	dc df       	rcall	.-72     	; 0x722 <slaveData>
 76a:	04 c0       	rjmp	.+8      	; 0x774 <Tick3+0x2e>
        break;
        default:
        break;
    }
    
    switch(state){
 76c:	89 2b       	or	r24, r25
 76e:	11 f4       	brne	.+4      	; 0x774 <Tick3+0x2e>
        case START3:
            state = ON;
 770:	c1 e0       	ldi	r28, 0x01	; 1
 772:	d0 e0       	ldi	r29, 0x00	; 0
        case ON:
        break;
        default:break;
    }
    return state;
}
 774:	ce 01       	movw	r24, r28
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	08 95       	ret

0000077c <__tablejump2__>:
 77c:	ee 0f       	add	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	00 24       	eor	r0, r0
 782:	00 1c       	adc	r0, r0
 784:	0b be       	out	0x3b, r0	; 59
 786:	07 90       	elpm	r0, Z+
 788:	f6 91       	elpm	r31, Z
 78a:	e0 2d       	mov	r30, r0
 78c:	09 94       	ijmp

0000078e <strcat>:
 78e:	fb 01       	movw	r30, r22
 790:	dc 01       	movw	r26, r24
 792:	0d 90       	ld	r0, X+
 794:	00 20       	and	r0, r0
 796:	e9 f7       	brne	.-6      	; 0x792 <strcat+0x4>
 798:	11 97       	sbiw	r26, 0x01	; 1
 79a:	01 90       	ld	r0, Z+
 79c:	0d 92       	st	X+, r0
 79e:	00 20       	and	r0, r0
 7a0:	e1 f7       	brne	.-8      	; 0x79a <strcat+0xc>
 7a2:	08 95       	ret

000007a4 <_exit>:
 7a4:	f8 94       	cli

000007a6 <__stop_program>:
 7a6:	ff cf       	rjmp	.-2      	; 0x7a6 <__stop_program>
