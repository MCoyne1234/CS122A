
mcoyn001_xfern001_lab03_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000007a8  0000083c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080012c  0080012c  00000868  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a2  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a44  00000000  00000000  00001c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0c  00000000  00000000  000026b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000030c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e4  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000795  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000041e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
   6:	00 00       	nop
   8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
   a:	00 00       	nop
   c:	70 c0       	rjmp	.+224    	; 0xee <__bad_interrupt>
   e:	00 00       	nop
  10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
  12:	00 00       	nop
  14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
  16:	00 00       	nop
  18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
  1a:	00 00       	nop
  1c:	68 c0       	rjmp	.+208    	; 0xee <__bad_interrupt>
  1e:	00 00       	nop
  20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
  22:	00 00       	nop
  24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>
  26:	00 00       	nop
  28:	62 c0       	rjmp	.+196    	; 0xee <__bad_interrupt>
  2a:	00 00       	nop
  2c:	60 c0       	rjmp	.+192    	; 0xee <__bad_interrupt>
  2e:	00 00       	nop
  30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__vector_13>
  36:	00 00       	nop
  38:	5a c0       	rjmp	.+180    	; 0xee <__bad_interrupt>
  3a:	00 00       	nop
  3c:	58 c0       	rjmp	.+176    	; 0xee <__bad_interrupt>
  3e:	00 00       	nop
  40:	56 c0       	rjmp	.+172    	; 0xee <__bad_interrupt>
  42:	00 00       	nop
  44:	54 c0       	rjmp	.+168    	; 0xee <__bad_interrupt>
  46:	00 00       	nop
  48:	52 c0       	rjmp	.+164    	; 0xee <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b4 c1       	rjmp	.+872    	; 0x3b6 <__vector_19>
  4e:	00 00       	nop
  50:	4e c0       	rjmp	.+156    	; 0xee <__bad_interrupt>
  52:	00 00       	nop
  54:	4c c0       	rjmp	.+152    	; 0xee <__bad_interrupt>
  56:	00 00       	nop
  58:	4a c0       	rjmp	.+148    	; 0xee <__bad_interrupt>
  5a:	00 00       	nop
  5c:	48 c0       	rjmp	.+144    	; 0xee <__bad_interrupt>
  5e:	00 00       	nop
  60:	46 c0       	rjmp	.+140    	; 0xee <__bad_interrupt>
  62:	00 00       	nop
  64:	44 c0       	rjmp	.+136    	; 0xee <__bad_interrupt>
  66:	00 00       	nop
  68:	42 c0       	rjmp	.+132    	; 0xee <__bad_interrupt>
  6a:	00 00       	nop
  6c:	40 c0       	rjmp	.+128    	; 0xee <__bad_interrupt>
  6e:	00 00       	nop
  70:	3e c0       	rjmp	.+124    	; 0xee <__bad_interrupt>
  72:	00 00       	nop
  74:	3c c0       	rjmp	.+120    	; 0xee <__bad_interrupt>
  76:	00 00       	nop
  78:	3a c0       	rjmp	.+116    	; 0xee <__bad_interrupt>
  7a:	00 00       	nop
  7c:	38 c0       	rjmp	.+112    	; 0xee <__bad_interrupt>
  7e:	00 00       	nop
  80:	36 c0       	rjmp	.+108    	; 0xee <__bad_interrupt>
  82:	00 00       	nop
  84:	34 c0       	rjmp	.+104    	; 0xee <__bad_interrupt>
  86:	00 00       	nop
  88:	32 c0       	rjmp	.+100    	; 0xee <__bad_interrupt>
  8a:	00 00       	nop
  8c:	40 03       	mulsu	r20, r16
  8e:	43 03       	mulsu	r20, r19
  90:	47 03       	mulsu	r20, r23
  92:	4b 03       	fmul	r20, r19
  94:	4f 03       	fmul	r20, r23
  96:	53 03       	mulsu	r21, r19
  98:	57 03       	mulsu	r21, r23
  9a:	5a 03       	fmul	r21, r18
  9c:	5e 03       	fmul	r21, r22
  9e:	61 03       	mulsu	r22, r17
  a0:	61 03       	mulsu	r22, r17
  a2:	61 03       	mulsu	r22, r17
  a4:	61 03       	mulsu	r22, r17
  a6:	61 03       	mulsu	r22, r17
  a8:	61 03       	mulsu	r22, r17
  aa:	61 03       	mulsu	r22, r17
  ac:	25 03       	mulsu	r18, r21
  ae:	2b 03       	fmul	r18, r19
  b0:	32 03       	mulsu	r19, r18
  b2:	39 03       	fmul	r19, r17

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d0 e4       	ldi	r29, 0x40	; 64
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ea       	ldi	r30, 0xA8	; 168
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	00 e0       	ldi	r16, 0x00	; 0
  cc:	0b bf       	out	0x3b, r16	; 59
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x14>
  d0:	07 90       	elpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	ac 32       	cpi	r26, 0x2C	; 44
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0x10>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	ac e2       	ldi	r26, 0x2C	; 44
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	ac 36       	cpi	r26, 0x6C	; 108
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	e2 d1       	rcall	.+964    	; 0x4b0 <main>
  ec:	5b c3       	rjmp	.+1718   	; 0x7a4 <_exit>

000000ee <__bad_interrupt>:
  ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <Tick2>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	91 05       	cpc	r25, r1
  f4:	49 f4       	brne	.+18     	; 0x108 <Tick2+0x18>
  f6:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <master>
  fa:	21 11       	cpse	r18, r1
  fc:	09 c0       	rjmp	.+18     	; 0x110 <Tick2+0x20>
  fe:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <receivedData>
 102:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <data>
 106:	08 95       	ret
 108:	00 97       	sbiw	r24, 0x00	; 0
 10a:	11 f4       	brne	.+4      	; 0x110 <Tick2+0x20>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	08 95       	ret

00000112 <TimerSet>:
 112:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <_avr_timer_M>
 116:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <_avr_timer_M+0x1>
 11a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_avr_timer_M+0x2>
 11e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <_avr_timer_M+0x3>
 122:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <_avr_timer_cntcurr>
 126:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <_avr_timer_cntcurr+0x1>
 12a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <_avr_timer_cntcurr+0x2>
 12e:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <_avr_timer_cntcurr+0x3>
 132:	08 95       	ret

00000134 <TimerOn>:
 134:	8b e0       	ldi	r24, 0x0B	; 11
 136:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 13a:	8d e7       	ldi	r24, 0x7D	; 125
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 142:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 14c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 150:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 154:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_avr_timer_M>
 158:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_avr_timer_M+0x1>
 15c:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <_avr_timer_M+0x2>
 160:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <_avr_timer_M+0x3>
 164:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <_avr_timer_cntcurr>
 168:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <_avr_timer_cntcurr+0x1>
 16c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <_avr_timer_cntcurr+0x2>
 170:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <_avr_timer_cntcurr+0x3>
 174:	8f b7       	in	r24, 0x3f	; 63
 176:	80 68       	ori	r24, 0x80	; 128
 178:	8f bf       	out	0x3f, r24	; 63
 17a:	08 95       	ret

0000017c <__vector_13>:
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_avr_timer_cntcurr>
 192:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_avr_timer_cntcurr+0x1>
 196:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <_avr_timer_cntcurr+0x2>
 19a:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <_avr_timer_cntcurr+0x3>
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	a1 09       	sbc	r26, r1
 1a2:	b1 09       	sbc	r27, r1
 1a4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <_avr_timer_cntcurr>
 1a8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <_avr_timer_cntcurr+0x1>
 1ac:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <_avr_timer_cntcurr+0x2>
 1b0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <_avr_timer_cntcurr+0x3>
 1b4:	89 2b       	or	r24, r25
 1b6:	8a 2b       	or	r24, r26
 1b8:	8b 2b       	or	r24, r27
 1ba:	99 f4       	brne	.+38     	; 0x1e2 <__vector_13+0x66>
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <TimerFlag>
 1c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_avr_timer_M>
 1c6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_avr_timer_M+0x1>
 1ca:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <_avr_timer_M+0x2>
 1ce:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <_avr_timer_M+0x3>
 1d2:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <_avr_timer_cntcurr>
 1d6:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <_avr_timer_cntcurr+0x1>
 1da:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <_avr_timer_cntcurr+0x2>
 1de:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <_avr_timer_cntcurr+0x3>
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 1f4:	18 16       	cp	r1, r24
 1f6:	19 06       	cpc	r1, r25
 1f8:	5c f0       	brlt	.+22     	; 0x210 <delay_ms+0x1c>
 1fa:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 1fc:	00 00       	nop
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 202:	e1 f7       	brne	.-8      	; 0x1fc <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	5f 4f       	sbci	r21, 0xFF	; 255
 208:	84 17       	cp	r24, r20
 20a:	95 07       	cpc	r25, r21
 20c:	19 f4       	brne	.+6      	; 0x214 <delay_ms+0x20>
 20e:	08 95       	ret
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 214:	27 e0       	ldi	r18, 0x07	; 7
 216:	33 e0       	ldi	r19, 0x03	; 3
 218:	f1 cf       	rjmp	.-30     	; 0x1fc <delay_ms+0x8>

0000021a <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 21a:	10 98       	cbi	0x02, 0	; 2
   DATA_BUS = Command;
 21c:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 21e:	11 9a       	sbi	0x02, 1	; 2
   asm("nop");
 220:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 222:	11 98       	cbi	0x02, 1	; 2
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	e5 cf       	rjmp	.-54     	; 0x1f4 <delay_ms>
 22a:	08 95       	ret

0000022c <LCD_ClearScreen>:
#define E 1			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	f5 cf       	rjmp	.-22     	; 0x21a <LCD_WriteCommand>
 230:	08 95       	ret

00000232 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 232:	81 31       	cpi	r24, 0x11	; 17
 234:	18 f4       	brcc	.+6      	; 0x23c <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 236:	81 58       	subi	r24, 0x81	; 129
 238:	f0 cf       	rjmp	.-32     	; 0x21a <LCD_WriteCommand>
 23a:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 23c:	81 55       	subi	r24, 0x51	; 81
 23e:	ed cf       	rjmp	.-38     	; 0x21a <LCD_WriteCommand>
 240:	08 95       	ret

00000242 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 242:	84 e6       	ldi	r24, 0x64	; 100
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	d6 df       	rcall	.-84     	; 0x1f4 <delay_ms>
	LCD_WriteCommand(0x38);
 248:	88 e3       	ldi	r24, 0x38	; 56
 24a:	e7 df       	rcall	.-50     	; 0x21a <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	e5 df       	rcall	.-54     	; 0x21a <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 250:	8f e0       	ldi	r24, 0x0F	; 15
 252:	e3 df       	rcall	.-58     	; 0x21a <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	e1 df       	rcall	.-62     	; 0x21a <LCD_WriteCommand>
	delay_ms(10);						 
 258:	8a e0       	ldi	r24, 0x0A	; 10
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	cb cf       	rjmp	.-106    	; 0x1f4 <delay_ms>
 25e:	08 95       	ret

00000260 <LCD_WriteData>:
 260:	10 9a       	sbi	0x02, 0	; 2
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 262:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 264:	11 9a       	sbi	0x02, 1	; 2
   asm("nop");
 266:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 268:	11 98       	cbi	0x02, 1	; 2
   delay_ms(1);
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	c2 cf       	rjmp	.-124    	; 0x1f4 <delay_ms>
 270:	08 95       	ret

00000272 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	18 2f       	mov	r17, r24
 27c:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 27e:	d6 df       	rcall	.-84     	; 0x22c <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	51 f0       	breq	.+20     	; 0x29a <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 286:	01 e0       	ldi	r16, 0x01	; 1
 288:	01 0f       	add	r16, r17
 28a:	81 2f       	mov	r24, r17
 28c:	d2 df       	rcall	.-92     	; 0x232 <LCD_Cursor>
      LCD_WriteData(*string++);
 28e:	89 91       	ld	r24, Y+
 290:	e7 df       	rcall	.-50     	; 0x260 <LCD_WriteData>
 292:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 294:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 296:	81 11       	cpse	r24, r1
 298:	f6 cf       	rjmp	.-20     	; 0x286 <LCD_DisplayString+0x14>
 29a:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	08 95       	ret

000002a4 <Tick4>:
 2a4:	0f 93       	push	r16
        default:break;
    }
    return state;
}

int Tick4(int state){
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	61 97       	sbiw	r28, 0x11	; 17
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
    
    switch(state){
 2bc:	00 97       	sbiw	r24, 0x00	; 0
 2be:	21 f0       	breq	.+8      	; 0x2c8 <Tick4+0x24>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	91 05       	cpc	r25, r1
 2c4:	91 f1       	breq	.+100    	; 0x32a <Tick4+0x86>
 2c6:	39 c0       	rjmp	.+114    	; 0x33a <Tick4+0x96>
        case START3:
            pattern =0; 
 2c8:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <pattern>
            p_size = 0; 
 2cc:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <p_size>
            speed=0; 
 2d0:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <speed>
            slave = 0; 
 2d4:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <slave>
            t_count=0 ;
 2d8:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <t_count>
            t_max=1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <t_max>
            iter = 0;
 2e2:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <iter+0x1>
 2e6:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <iter>
            if(master){
 2ea:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <master>
 2ee:	88 23       	and	r24, r24
 2f0:	31 f1       	breq	.+76     	; 0x33e <Tick4+0x9a>
                message_1[6] = (pattern +'1');
 2f2:	81 e3       	ldi	r24, 0x31	; 49
 2f4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <message_1+0x6>
                message_2[5] = (speed +'1');
 2f8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <message_2+0x5>
                message_3[4] = (slave +'0');
 2fc:	80 e3       	ldi	r24, 0x30	; 48
 2fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
                char line_1[17] = {};
 302:	8e 01       	movw	r16, r28
 304:	0f 5f       	subi	r16, 0xFF	; 255
 306:	1f 4f       	sbci	r17, 0xFF	; 255
 308:	81 e1       	ldi	r24, 0x11	; 17
 30a:	f8 01       	movw	r30, r16
 30c:	11 92       	st	Z+, r1
 30e:	8a 95       	dec	r24
 310:	e9 f7       	brne	.-6      	; 0x30c <Tick4+0x68>
                strcat(line_1, message_1);
 312:	6d e0       	ldi	r22, 0x0D	; 13
 314:	71 e0       	ldi	r23, 0x01	; 1
 316:	c8 01       	movw	r24, r16
 318:	3a d2       	rcall	.+1140   	; 0x78e <strcat>
                strcat(line_1, message_2);
 31a:	66 e0       	ldi	r22, 0x06	; 6
 31c:	71 e0       	ldi	r23, 0x01	; 1
 31e:	c8 01       	movw	r24, r16
 320:	36 d2       	rcall	.+1132   	; 0x78e <strcat>
                                    
                LCD_DisplayString( 1, (unsigned char*)line_1);
 322:	b8 01       	movw	r22, r16
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	a5 df       	rcall	.-182    	; 0x272 <LCD_DisplayString>
 328:	0a c0       	rjmp	.+20     	; 0x33e <Tick4+0x9a>
                    ++iter;
                    if(iter >= p_size) iter = 0;
                }
            }else ++t_count;    
                    */
                           if(!master) PORTA = data;     
 32a:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <master>
 32e:	21 11       	cpse	r18, r1
 330:	08 c0       	rjmp	.+16     	; 0x342 <Tick4+0x9e>
 332:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <data>
 336:	22 b9       	out	0x02, r18	; 2
 338:	04 c0       	rjmp	.+8      	; 0x342 <Tick4+0x9e>
        break;
        default:
        break;
    }
    
    switch(state){
 33a:	00 97       	sbiw	r24, 0x00	; 0
 33c:	11 f4       	brne	.+4      	; 0x342 <Tick4+0x9e>
        case START:
        state = ON;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
        case ON:
        break;
        default:break;
    }
    return state;
}
 342:	61 96       	adiw	r28, 0x11	; 17
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	08 95       	ret

00000358 <SPI_MasterInit>:
 //Straight from the datasheet
volatile unsigned char receivedData;
 
void SPI_MasterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_SS)|(1<<DD_MOSI) | (1<<DD_SCK);
 358:	80 eb       	ldi	r24, 0xB0	; 176
 35a:	84 b9       	out	0x04, r24	; 4
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 35c:	81 e5       	ldi	r24, 0x51	; 81
 35e:	8c bd       	out	0x2c, r24	; 44
 360:	08 95       	ret

00000362 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData){
	// Start transmission 
	SPDR = cData;
 362:	8e bd       	out	0x2e, r24	; 46
	
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 364:	0d b4       	in	r0, 0x2d	; 45
 366:	07 fe       	sbrs	r0, 7
 368:	fd cf       	rjmp	.-6      	; 0x364 <SPI_MasterTransmit+0x2>
}
 36a:	08 95       	ret

0000036c <Tick>:


void keyAssign();
void slaveData();

int Tick(int state){
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
    
    switch(state){
 372:	00 97       	sbiw	r24, 0x00	; 0
 374:	21 f0       	breq	.+8      	; 0x37e <Tick+0x12>
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	91 05       	cpc	r25, r1
 37a:	21 f0       	breq	.+8      	; 0x384 <Tick+0x18>
 37c:	0b c0       	rjmp	.+22     	; 0x394 <Tick+0x28>
        case START:
        trigger = 0;
 37e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <trigger>
 382:	0a c0       	rjmp	.+20     	; 0x398 <Tick+0x2c>
        break;
        case LISTEN:
        break;
        case SEND:    
            if(master) SPI_MasterTransmit(data);       
 384:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <master>
 388:	88 23       	and	r24, r24
 38a:	41 f0       	breq	.+16     	; 0x39c <Tick+0x30>
 38c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <data>
 390:	e8 df       	rcall	.-48     	; 0x362 <SPI_MasterTransmit>
 392:	04 c0       	rjmp	.+8      	; 0x39c <Tick+0x30>
        break;
        default:
        break;
    }
    
    switch(state){
 394:	89 2b       	or	r24, r25
 396:	11 f4       	brne	.+4      	; 0x39c <Tick+0x30>
        case START:
            state = SEND;
 398:	c2 e0       	ldi	r28, 0x02	; 2
 39a:	d0 e0       	ldi	r29, 0x00	; 0
            //state = LISTEN;
        break;
        default:break;
    }
    return state;
}
 39c:	ce 01       	movw	r24, r28
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <SPI_ServantInit>:

void SPI_ServantInit(void){
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
 3a4:	80 e4       	ldi	r24, 0x40	; 64
 3a6:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI */
	SPCR = (1<<SPE);
 3a8:	8c bd       	out	0x2c, r24	; 44
 3aa:	08 95       	ret

000003ac <SPI_ServantReceive>:
}

char SPI_ServantReceive(void)
{
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)));
 3ac:	0d b4       	in	r0, 0x2d	; 45
 3ae:	07 fe       	sbrs	r0, 7
 3b0:	fd cf       	rjmp	.-6      	; 0x3ac <SPI_ServantReceive>
/* Return Data Register */
return SPDR;
 3b2:	8e b5       	in	r24, 0x2e	; 46
}
 3b4:	08 95       	ret

000003b6 <__vector_19>:

ISR(SPI_STC_vect){
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	0b b6       	in	r0, 0x3b	; 59
 3c2:	0f 92       	push	r0
 3c4:	2f 93       	push	r18
 3c6:	3f 93       	push	r19
 3c8:	4f 93       	push	r20
 3ca:	5f 93       	push	r21
 3cc:	6f 93       	push	r22
 3ce:	7f 93       	push	r23
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	af 93       	push	r26
 3d6:	bf 93       	push	r27
 3d8:	cf 93       	push	r28
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
  receivedData = SPDR /SPI_ServantReceive();
 3de:	ce b5       	in	r28, 0x2e	; 46
 3e0:	e5 df       	rcall	.-54     	; 0x3ac <SPI_ServantReceive>
 3e2:	68 2f       	mov	r22, r24
 3e4:	8c 2f       	mov	r24, r28
 3e6:	be d1       	rcall	.+892    	; 0x764 <__udivmodqi4>
 3e8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <receivedData>
}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	cf 91       	pop	r28
 3f2:	bf 91       	pop	r27
 3f4:	af 91       	pop	r26
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	7f 91       	pop	r23
 3fc:	6f 91       	pop	r22
 3fe:	5f 91       	pop	r21
 400:	4f 91       	pop	r20
 402:	3f 91       	pop	r19
 404:	2f 91       	pop	r18
 406:	0f 90       	pop	r0
 408:	0b be       	out	0x3b, r0	; 59
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
 414:	8f ee       	ldi	r24, 0xEF	; 239
 416:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 418:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 41a:	30 9b       	sbis	0x06, 0	; 6
 41c:	29 c0       	rjmp	.+82     	; 0x470 <GetKeypadKey+0x5c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 41e:	31 9b       	sbis	0x06, 1	; 6
 420:	29 c0       	rjmp	.+82     	; 0x474 <GetKeypadKey+0x60>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 422:	32 9b       	sbis	0x06, 2	; 6
 424:	29 c0       	rjmp	.+82     	; 0x478 <GetKeypadKey+0x64>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 426:	33 9b       	sbis	0x06, 3	; 6
 428:	29 c0       	rjmp	.+82     	; 0x47c <GetKeypadKey+0x68>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
 42a:	8f ed       	ldi	r24, 0xDF	; 223
 42c:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 42e:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 430:	30 9b       	sbis	0x06, 0	; 6
 432:	26 c0       	rjmp	.+76     	; 0x480 <GetKeypadKey+0x6c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 434:	31 9b       	sbis	0x06, 1	; 6
 436:	26 c0       	rjmp	.+76     	; 0x484 <GetKeypadKey+0x70>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 438:	32 9b       	sbis	0x06, 2	; 6
 43a:	26 c0       	rjmp	.+76     	; 0x488 <GetKeypadKey+0x74>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 43c:	33 9b       	sbis	0x06, 3	; 6
 43e:	26 c0       	rjmp	.+76     	; 0x48c <GetKeypadKey+0x78>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
 440:	8f eb       	ldi	r24, 0xBF	; 191
 442:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 444:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 446:	30 9b       	sbis	0x06, 0	; 6
 448:	23 c0       	rjmp	.+70     	; 0x490 <GetKeypadKey+0x7c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 44a:	31 9b       	sbis	0x06, 1	; 6
 44c:	23 c0       	rjmp	.+70     	; 0x494 <GetKeypadKey+0x80>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 44e:	32 9b       	sbis	0x06, 2	; 6
 450:	23 c0       	rjmp	.+70     	; 0x498 <GetKeypadKey+0x84>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 452:	33 9b       	sbis	0x06, 3	; 6
 454:	23 c0       	rjmp	.+70     	; 0x49c <GetKeypadKey+0x88>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
 456:	8f e7       	ldi	r24, 0x7F	; 127
 458:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 45a:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 45c:	30 9b       	sbis	0x06, 0	; 6
 45e:	20 c0       	rjmp	.+64     	; 0x4a0 <GetKeypadKey+0x8c>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 460:	31 9b       	sbis	0x06, 1	; 6
 462:	20 c0       	rjmp	.+64     	; 0x4a4 <GetKeypadKey+0x90>
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 464:	32 9b       	sbis	0x06, 2	; 6
 466:	20 c0       	rjmp	.+64     	; 0x4a8 <GetKeypadKey+0x94>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 468:	33 9b       	sbis	0x06, 3	; 6
 46a:	20 c0       	rjmp	.+64     	; 0x4ac <GetKeypadKey+0x98>
	
	return '\0';
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	08 95       	ret
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 470:	81 e3       	ldi	r24, 0x31	; 49
 472:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 474:	84 e3       	ldi	r24, 0x34	; 52
 476:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 478:	87 e3       	ldi	r24, 0x37	; 55
 47a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 47c:	8a e2       	ldi	r24, 0x2A	; 42
 47e:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 480:	82 e3       	ldi	r24, 0x32	; 50
 482:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 484:	85 e3       	ldi	r24, 0x35	; 53
 486:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 488:	88 e3       	ldi	r24, 0x38	; 56
 48a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 48c:	80 e3       	ldi	r24, 0x30	; 48
 48e:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 490:	83 e3       	ldi	r24, 0x33	; 51
 492:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 494:	86 e3       	ldi	r24, 0x36	; 54
 496:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 498:	89 e3       	ldi	r24, 0x39	; 57
 49a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 49c:	83 e2       	ldi	r24, 0x23	; 35
 49e:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 4a0:	81 e4       	ldi	r24, 0x41	; 65
 4a2:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 4a4:	82 e4       	ldi	r24, 0x42	; 66
 4a6:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 4a8:	83 e4       	ldi	r24, 0x43	; 67
 4aa:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 4ac:	84 e4       	ldi	r24, 0x44	; 68
	
	return '\0';
}
 4ae:	08 95       	ret

000004b0 <main>:
    }
    return state;
}

int main(void)
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
 4b8:	28 97       	sbiw	r28, 0x08	; 8
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	f8 94       	cli
 4be:	de bf       	out	0x3e, r29	; 62
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF; PORTA = 0x10;
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	81 b9       	out	0x01, r24	; 1
 4c8:	90 e1       	ldi	r25, 0x10	; 16
 4ca:	92 b9       	out	0x02, r25	; 2
    //DDRB = 0xFE; PORTB = 0x00;
    DDRC = 0xF0; PORTC = 0x00;
 4cc:	10 ef       	ldi	r17, 0xF0	; 240
 4ce:	17 b9       	out	0x07, r17	; 7
 4d0:	18 b8       	out	0x08, r1	; 8
    DDRD = 0xFF; PORTD = 0x00;
 4d2:	8a b9       	out	0x0a, r24	; 10
 4d4:	1b b8       	out	0x0b, r1	; 11
    
    TimerSet(50);
 4d6:	62 e3       	ldi	r22, 0x32	; 50
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	19 de       	rcall	.-974    	; 0x112 <TimerSet>
    TimerOn();
 4e0:	29 de       	rcall	.-942    	; 0x134 <TimerOn>
    
    LCD_init();
 4e2:	af de       	rcall	.-674    	; 0x242 <LCD_init>
 4e4:	a3 de       	rcall	.-698    	; 0x22c <LCD_ClearScreen>
    LCD_ClearScreen();
 4e6:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <maskUp>
    //LCD_Cursor(1);   
    //LCD_DisplayString( 1, (unsigned char*)"YO");
    
    maskUp = 0xF0;
 4ea:	8f e0       	ldi	r24, 0x0F	; 15
 4ec:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <maskLow>
    maskLow = 0x0F;
 4f0:	88 e0       	ldi	r24, 0x08	; 8
 4f2:	e4 e2       	ldi	r30, 0x24	; 36
    unsigned long t2 = 2;
    unsigned long t3 = 1;
    unsigned long t4 = 1;
    
    static task task1, task2, task3, task4;
    task *tasks[] = { &task3, &task1, &task2, &task4};
 4f4:	f1 e0       	ldi	r31, 0x01	; 1
 4f6:	de 01       	movw	r26, r28
 4f8:	11 96       	adiw	r26, 0x01	; 1
 4fa:	01 90       	ld	r0, Z+
 4fc:	0d 92       	st	X+, r0
 4fe:	8a 95       	dec	r24
 500:	e1 f7       	brne	.-8      	; 0x4fa <main+0x4a>
 502:	ed e4       	ldi	r30, 0x4D	; 77
 504:	f1 e0       	ldi	r31, 0x01	; 1
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    
    task1.state = 0;//Task initial state.
 506:	10 82       	st	Z, r1
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	90 e0       	ldi	r25, 0x00	; 0
    task1.period = t1;//Task Period.
 50c:	a0 e0       	ldi	r26, 0x00	; 0
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	81 83       	std	Z+1, r24	; 0x01
 512:	92 83       	std	Z+2, r25	; 0x02
 514:	a3 83       	std	Z+3, r26	; 0x03
 516:	b4 83       	std	Z+4, r27	; 0x04
 518:	85 83       	std	Z+5, r24	; 0x05
 51a:	96 83       	std	Z+6, r25	; 0x06
    task1.elapsedTime = t1; // Task current elasped time.
 51c:	a7 83       	std	Z+7, r26	; 0x07
 51e:	b0 87       	std	Z+8, r27	; 0x08
 520:	86 eb       	ldi	r24, 0xB6	; 182
 522:	91 e0       	ldi	r25, 0x01	; 1
    task1.TickFct = &Tick; // Function pointer for the tick.
 524:	92 87       	std	Z+10, r25	; 0x0a
 526:	81 87       	std	Z+9, r24	; 0x09
 528:	e2 e4       	ldi	r30, 0x42	; 66
 52a:	f1 e0       	ldi	r31, 0x01	; 1
    
    task2.state = 0;//Task initial state.
 52c:	10 82       	st	Z, r1
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	90 e0       	ldi	r25, 0x00	; 0
    task2.period = t2;//Task Period.
 532:	a0 e0       	ldi	r26, 0x00	; 0
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	81 83       	std	Z+1, r24	; 0x01
 538:	92 83       	std	Z+2, r25	; 0x02
 53a:	a3 83       	std	Z+3, r26	; 0x03
 53c:	b4 83       	std	Z+4, r27	; 0x04
 53e:	85 83       	std	Z+5, r24	; 0x05
 540:	96 83       	std	Z+6, r25	; 0x06
    task2.elapsedTime = t2; // Task current elapsed time.
 542:	a7 83       	std	Z+7, r26	; 0x07
 544:	b0 87       	std	Z+8, r27	; 0x08
 546:	88 e7       	ldi	r24, 0x78	; 120
 548:	90 e0       	ldi	r25, 0x00	; 0
    task2.TickFct = &Tick2; // Function pointer for the tick.
 54a:	92 87       	std	Z+10, r25	; 0x0a
 54c:	81 87       	std	Z+9, r24	; 0x09
 54e:	e7 e3       	ldi	r30, 0x37	; 55
 550:	f1 e0       	ldi	r31, 0x01	; 1
    
    task3.state = 0;//Task initial state.
 552:	10 82       	st	Z, r1
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
    task3.period = t3;//Task Period.
 558:	a0 e0       	ldi	r26, 0x00	; 0
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	81 83       	std	Z+1, r24	; 0x01
 55e:	92 83       	std	Z+2, r25	; 0x02
 560:	a3 83       	std	Z+3, r26	; 0x03
 562:	b4 83       	std	Z+4, r27	; 0x04
 564:	85 83       	std	Z+5, r24	; 0x05
 566:	96 83       	std	Z+6, r25	; 0x06
    task3.elapsedTime = t3; // Task current elapsed time.
 568:	a7 83       	std	Z+7, r26	; 0x07
 56a:	b0 87       	std	Z+8, r27	; 0x08
 56c:	24 e9       	ldi	r18, 0x94	; 148
 56e:	33 e0       	ldi	r19, 0x03	; 3
    task3.TickFct = &Tick3; // Function pointer for the tick.
 570:	32 87       	std	Z+10, r19	; 0x0a
 572:	21 87       	std	Z+9, r18	; 0x09
 574:	ec e2       	ldi	r30, 0x2C	; 44
 576:	f1 e0       	ldi	r31, 0x01	; 1
    
    task4.state = 0;//Task initial state.
 578:	10 82       	st	Z, r1
 57a:	81 83       	std	Z+1, r24	; 0x01
 57c:	92 83       	std	Z+2, r25	; 0x02
    task4.period = t4;//Task Period.
 57e:	a3 83       	std	Z+3, r26	; 0x03
 580:	b4 83       	std	Z+4, r27	; 0x04
 582:	85 83       	std	Z+5, r24	; 0x05
 584:	96 83       	std	Z+6, r25	; 0x06
    task4.elapsedTime = t4; // Task current elapsed time.
 586:	a7 83       	std	Z+7, r26	; 0x07
 588:	b0 87       	std	Z+8, r27	; 0x08
 58a:	82 e5       	ldi	r24, 0x52	; 82
 58c:	91 e0       	ldi	r25, 0x01	; 1
    task4.TickFct = &Tick4; // Function pointer for the tick.
 58e:	92 87       	std	Z+10, r25	; 0x0a
 590:	81 87       	std	Z+9, r24	; 0x09
 592:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <data>
    
    data = 0;
 596:	18 9b       	sbis	0x03, 0	; 3
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <main+0xf4>
    
    if(PINB & 0x01) master = 0xFF;
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <master>
 5a0:	db de       	rcall	.-586    	; 0x358 <SPI_MasterInit>
    else master = 0x00;
    
    if(master) SPI_MasterInit();
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <main+0xfa>
 5a4:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <master>
    task4.TickFct = &Tick4; // Function pointer for the tick.
    
    data = 0;
    
    if(PINB & 0x01) master = 0xFF;
    else master = 0x00;
 5a8:	fd de       	rcall	.-518    	; 0x3a4 <SPI_ServantInit>
    
    if(master) SPI_MasterInit();
    else SPI_ServantInit();
 5aa:	7e 01       	movw	r14, r28
 5ac:	89 e0       	ldi	r24, 0x09	; 9
 5ae:	e8 0e       	add	r14, r24
 5b0:	f1 1c       	adc	r15, r1
 5b2:	de 01       	movw	r26, r28
 5b4:	11 96       	adiw	r26, 0x01	; 1
 5b6:	6d 01       	movw	r12, r26
 5b8:	f6 01       	movw	r30, r12
 5ba:	01 91       	ld	r16, Z+
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 5bc:	11 91       	ld	r17, Z+
 5be:	6f 01       	movw	r12, r30
 5c0:	d8 01       	movw	r26, r16
 5c2:	15 96       	adiw	r26, 0x05	; 5
 5c4:	4d 91       	ld	r20, X+
 5c6:	5d 91       	ld	r21, X+
 5c8:	6d 91       	ld	r22, X+
 5ca:	7c 91       	ld	r23, X
 5cc:	18 97       	sbiw	r26, 0x08	; 8
 5ce:	11 96       	adiw	r26, 0x01	; 1
 5d0:	8d 91       	ld	r24, X+
 5d2:	9d 91       	ld	r25, X+
 5d4:	0d 90       	ld	r0, X+
 5d6:	bc 91       	ld	r27, X
 5d8:	a0 2d       	mov	r26, r0
 5da:	48 17       	cp	r20, r24
 5dc:	59 07       	cpc	r21, r25
 5de:	6a 07       	cpc	r22, r26
 5e0:	7b 07       	cpc	r23, r27
 5e2:	81 f4       	brne	.+32     	; 0x604 <main+0x154>
 5e4:	f8 01       	movw	r30, r16
 5e6:	80 81       	ld	r24, Z
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 5e8:	01 84       	ldd	r0, Z+9	; 0x09
 5ea:	f2 85       	ldd	r31, Z+10	; 0x0a
 5ec:	e0 2d       	mov	r30, r0
 5ee:	08 2e       	mov	r0, r24
 5f0:	00 0c       	add	r0, r0
 5f2:	99 0b       	sbc	r25, r25
 5f4:	09 95       	icall
 5f6:	d8 01       	movw	r26, r16
 5f8:	8c 93       	st	X, r24
 5fa:	f8 01       	movw	r30, r16
 5fc:	15 82       	std	Z+5, r1	; 0x05
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 5fe:	16 82       	std	Z+6, r1	; 0x06
 600:	17 82       	std	Z+7, r1	; 0x07
 602:	10 86       	std	Z+8, r1	; 0x08
 604:	f8 01       	movw	r30, r16
 606:	85 81       	ldd	r24, Z+5	; 0x05
            }
            tasks[i]->elapsedTime += 1;
 608:	96 81       	ldd	r25, Z+6	; 0x06
 60a:	a7 81       	ldd	r26, Z+7	; 0x07
 60c:	b0 85       	ldd	r27, Z+8	; 0x08
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	a1 1d       	adc	r26, r1
 612:	b1 1d       	adc	r27, r1
 614:	85 83       	std	Z+5, r24	; 0x05
 616:	96 83       	std	Z+6, r25	; 0x06
 618:	a7 83       	std	Z+7, r26	; 0x07
 61a:	b0 87       	std	Z+8, r27	; 0x08
 61c:	ce 14       	cp	r12, r14
 61e:	df 04       	cpc	r13, r15
    else SPI_ServantInit();
    
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
 620:	59 f6       	brne	.-106    	; 0x5b8 <main+0x108>
 622:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <TimerFlag>
                tasks[i]->elapsedTime = 0;
            }
            tasks[i]->elapsedTime += 1;
        }

        while(!TimerFlag){}
 626:	88 23       	and	r24, r24
 628:	e1 f3       	breq	.-8      	; 0x622 <main+0x172>
 62a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <TimerFlag>
        TimerFlag = 0;
 62e:	c1 cf       	rjmp	.-126    	; 0x5b2 <main+0x102>

00000630 <keyAssign>:
 630:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <key>
    return 0;
}

void keyAssign(){
    
    switch(key){
 634:	8e 2f       	mov	r24, r30
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	fc 01       	movw	r30, r24
 63a:	f1 97       	sbiw	r30, 0x31	; 49
 63c:	e4 31       	cpi	r30, 0x14	; 20
 63e:	f1 05       	cpc	r31, r1
 640:	08 f0       	brcs	.+2      	; 0x644 <keyAssign+0x14>
 642:	3f c0       	rjmp	.+126    	; 0x6c2 <keyAssign+0x92>
 644:	ea 5b       	subi	r30, 0xBA	; 186
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	99 c0       	rjmp	.+306    	; 0x77c <__tablejump2__>
        case 'A':
            pattern = 0;
 64a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <pattern>
            p_size = 2;
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <p_size>
        break;
 654:	36 c0       	rjmp	.+108    	; 0x6c2 <keyAssign+0x92>
        case 'B':
            pattern = 1;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pattern>
        p_size = 2;
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <p_size>
        break;
 662:	2f c0       	rjmp	.+94     	; 0x6c2 <keyAssign+0x92>
        case 'C':
            pattern = 2;
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pattern>
        p_size = 14;
 66a:	8e e0       	ldi	r24, 0x0E	; 14
 66c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <p_size>
        break;
 670:	28 c0       	rjmp	.+80     	; 0x6c2 <keyAssign+0x92>
        case 'D':
            pattern = 3;
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pattern>
            p_size = 17;
 678:	81 e1       	ldi	r24, 0x11	; 17
 67a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <p_size>
        break;
 67e:	21 c0       	rjmp	.+66     	; 0x6c2 <keyAssign+0x92>
        case '1':
            speed = 0;
 680:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <speed>
        break;
 684:	1e c0       	rjmp	.+60     	; 0x6c2 <keyAssign+0x92>
        case '2':
            speed = 1;
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <speed>
        break;
 68c:	1a c0       	rjmp	.+52     	; 0x6c2 <keyAssign+0x92>
            case '3':
            speed = 2;
 68e:	82 e0       	ldi	r24, 0x02	; 2
 690:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <speed>
        break;
 694:	16 c0       	rjmp	.+44     	; 0x6c2 <keyAssign+0x92>
        case '4':
            speed = 3;
 696:	83 e0       	ldi	r24, 0x03	; 3
 698:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <speed>
        break;
 69c:	12 c0       	rjmp	.+36     	; 0x6c2 <keyAssign+0x92>
        case '5':
            speed = 4;
 69e:	84 e0       	ldi	r24, 0x04	; 4
 6a0:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <speed>
        break;
 6a4:	0e c0       	rjmp	.+28     	; 0x6c2 <keyAssign+0x92>
        case '6':
            speed = 5;
 6a6:	85 e0       	ldi	r24, 0x05	; 5
 6a8:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <speed>
        break;
 6ac:	0a c0       	rjmp	.+20     	; 0x6c2 <keyAssign+0x92>
        case '7':
            slave = 0;
 6ae:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <slave>
        break;
 6b2:	07 c0       	rjmp	.+14     	; 0x6c2 <keyAssign+0x92>
        case '8':
            slave = 1;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <slave>
        break;
 6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <keyAssign+0x92>
        case '9':
            slave = 2;
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <slave>
        break;
        default:
        break;
    }
    
    data = ( (data & ~maskUp) | ( (pattern << 4) & maskUp) )
 6c2:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <data>
 6c6:	50 91 5d 01 	lds	r21, 0x015D	; 0x80015d <maskLow>
 6ca:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <pattern>
 6ce:	80 e1       	ldi	r24, 0x10	; 16
 6d0:	28 9f       	mul	r18, r24
 6d2:	90 01       	movw	r18, r0
 6d4:	11 24       	eor	r1, r1
 6d6:	24 27       	eor	r18, r20
 6d8:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <maskUp>
 6dc:	23 23       	and	r18, r19
 6de:	24 27       	eor	r18, r20
 6e0:	85 2f       	mov	r24, r21
 6e2:	80 95       	com	r24
 6e4:	48 23       	and	r20, r24
 6e6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <speed>
 6ea:	95 23       	and	r25, r21
 6ec:	84 2f       	mov	r24, r20
 6ee:	89 2b       	or	r24, r25
 6f0:	82 2b       	or	r24, r18
 6f2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <data>
 6f6:	08 95       	ret

000006f8 <slaveData>:
    | ( ( data & ~maskLow) | ( (speed) & maskLow) );
}

void slaveData(){ 
    pattern = (data >> 4);
 6f8:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <data>
 6fc:	8e 2f       	mov	r24, r30
 6fe:	82 95       	swap	r24
 700:	8f 70       	andi	r24, 0x0F	; 15
 702:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pattern>
    speed = (data & 0x0F);
 706:	ef 70       	andi	r30, 0x0F	; 15
 708:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <speed>
    t_max = speeds[speed];
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	ea 5e       	subi	r30, 0xEA	; 234
 710:	fe 4f       	sbci	r31, 0xFE	; 254
 712:	90 81       	ld	r25, Z
 714:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <t_max>
    p_size = sizes[pattern];
 718:	e8 2f       	mov	r30, r24
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	e4 5e       	subi	r30, 0xE4	; 228
 71e:	fe 4f       	sbci	r31, 0xFE	; 254
 720:	80 81       	ld	r24, Z
 722:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <p_size>
 726:	08 95       	ret

00000728 <Tick3>:
        default:break;
    }
    return state;
}

int Tick3(int state){
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	ec 01       	movw	r28, r24
    
    switch(state){
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	91 05       	cpc	r25, r1
 732:	81 f4       	brne	.+32     	; 0x754 <Tick3+0x2c>
        case START3:
        break;
        case ON:
            if(master) {
 734:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <master>
 738:	88 23       	and	r24, r24
 73a:	51 f0       	breq	.+20     	; 0x750 <Tick3+0x28>
                key = GetKeypadKey();
 73c:	6b de       	rcall	.-810    	; 0x414 <GetKeypadKey>
 73e:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <key>
                if(key != '\0' ){
 742:	88 23       	and	r24, r24
                    keyAssign();
 744:	59 f0       	breq	.+22     	; 0x75c <Tick3+0x34>
 746:	74 df       	rcall	.-280    	; 0x630 <keyAssign>
                    trigger = 0xFF;
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <trigger>
                 }
            }else  slaveData();           
 74e:	06 c0       	rjmp	.+12     	; 0x75c <Tick3+0x34>
 750:	d3 df       	rcall	.-90     	; 0x6f8 <slaveData>
 752:	04 c0       	rjmp	.+8      	; 0x75c <Tick3+0x34>
        break;
        default:
        break;
    }
    
    switch(state){
 754:	89 2b       	or	r24, r25
 756:	11 f4       	brne	.+4      	; 0x75c <Tick3+0x34>
        case START3:
            state = ON;
 758:	c1 e0       	ldi	r28, 0x01	; 1
 75a:	d0 e0       	ldi	r29, 0x00	; 0
        case ON:
        break;
        default:break;
    }
    return state;
}
 75c:	ce 01       	movw	r24, r28
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	08 95       	ret

00000764 <__udivmodqi4>:
 764:	99 1b       	sub	r25, r25
 766:	79 e0       	ldi	r23, 0x09	; 9
 768:	04 c0       	rjmp	.+8      	; 0x772 <__udivmodqi4_ep>

0000076a <__udivmodqi4_loop>:
 76a:	99 1f       	adc	r25, r25
 76c:	96 17       	cp	r25, r22
 76e:	08 f0       	brcs	.+2      	; 0x772 <__udivmodqi4_ep>
 770:	96 1b       	sub	r25, r22

00000772 <__udivmodqi4_ep>:
 772:	88 1f       	adc	r24, r24
 774:	7a 95       	dec	r23
 776:	c9 f7       	brne	.-14     	; 0x76a <__udivmodqi4_loop>
 778:	80 95       	com	r24
 77a:	08 95       	ret

0000077c <__tablejump2__>:
 77c:	ee 0f       	add	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	00 24       	eor	r0, r0
 782:	00 1c       	adc	r0, r0
 784:	0b be       	out	0x3b, r0	; 59
 786:	07 90       	elpm	r0, Z+
 788:	f6 91       	elpm	r31, Z
 78a:	e0 2d       	mov	r30, r0
 78c:	09 94       	ijmp

0000078e <strcat>:
 78e:	fb 01       	movw	r30, r22
 790:	dc 01       	movw	r26, r24
 792:	0d 90       	ld	r0, X+
 794:	00 20       	and	r0, r0
 796:	e9 f7       	brne	.-6      	; 0x792 <strcat+0x4>
 798:	11 97       	sbiw	r26, 0x01	; 1
 79a:	01 90       	ld	r0, Z+
 79c:	0d 92       	st	X+, r0
 79e:	00 20       	and	r0, r0
 7a0:	e1 f7       	brne	.-8      	; 0x79a <strcat+0xc>
 7a2:	08 95       	ret

000007a4 <_exit>:
 7a4:	f8 94       	cli

000007a6 <__stop_program>:
 7a6:	ff cf       	rjmp	.-2      	; 0x7a6 <__stop_program>
