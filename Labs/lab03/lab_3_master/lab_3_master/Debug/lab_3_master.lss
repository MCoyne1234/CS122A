
lab_3_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000752  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800120  00800120  00000806  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e4  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1d  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ae  00000000  00000000  00002661  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069d  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c8  00000000  00000000  00003941  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004109  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
   6:	00 00       	nop
   8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
   a:	00 00       	nop
   c:	70 c0       	rjmp	.+224    	; 0xee <__bad_interrupt>
   e:	00 00       	nop
  10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
  12:	00 00       	nop
  14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
  16:	00 00       	nop
  18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
  1a:	00 00       	nop
  1c:	68 c0       	rjmp	.+208    	; 0xee <__bad_interrupt>
  1e:	00 00       	nop
  20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
  22:	00 00       	nop
  24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>
  26:	00 00       	nop
  28:	62 c0       	rjmp	.+196    	; 0xee <__bad_interrupt>
  2a:	00 00       	nop
  2c:	60 c0       	rjmp	.+192    	; 0xee <__bad_interrupt>
  2e:	00 00       	nop
  30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
  32:	00 00       	nop
  34:	92 c0       	rjmp	.+292    	; 0x15a <__vector_13>
  36:	00 00       	nop
  38:	5a c0       	rjmp	.+180    	; 0xee <__bad_interrupt>
  3a:	00 00       	nop
  3c:	58 c0       	rjmp	.+176    	; 0xee <__bad_interrupt>
  3e:	00 00       	nop
  40:	56 c0       	rjmp	.+172    	; 0xee <__bad_interrupt>
  42:	00 00       	nop
  44:	54 c0       	rjmp	.+168    	; 0xee <__bad_interrupt>
  46:	00 00       	nop
  48:	52 c0       	rjmp	.+164    	; 0xee <__bad_interrupt>
  4a:	00 00       	nop
  4c:	c9 c1       	rjmp	.+914    	; 0x3e0 <__vector_19>
  4e:	00 00       	nop
  50:	4e c0       	rjmp	.+156    	; 0xee <__bad_interrupt>
  52:	00 00       	nop
  54:	4c c0       	rjmp	.+152    	; 0xee <__bad_interrupt>
  56:	00 00       	nop
  58:	4a c0       	rjmp	.+148    	; 0xee <__bad_interrupt>
  5a:	00 00       	nop
  5c:	48 c0       	rjmp	.+144    	; 0xee <__bad_interrupt>
  5e:	00 00       	nop
  60:	46 c0       	rjmp	.+140    	; 0xee <__bad_interrupt>
  62:	00 00       	nop
  64:	44 c0       	rjmp	.+136    	; 0xee <__bad_interrupt>
  66:	00 00       	nop
  68:	42 c0       	rjmp	.+132    	; 0xee <__bad_interrupt>
  6a:	00 00       	nop
  6c:	40 c0       	rjmp	.+128    	; 0xee <__bad_interrupt>
  6e:	00 00       	nop
  70:	3e c0       	rjmp	.+124    	; 0xee <__bad_interrupt>
  72:	00 00       	nop
  74:	3c c0       	rjmp	.+120    	; 0xee <__bad_interrupt>
  76:	00 00       	nop
  78:	3a c0       	rjmp	.+116    	; 0xee <__bad_interrupt>
  7a:	00 00       	nop
  7c:	38 c0       	rjmp	.+112    	; 0xee <__bad_interrupt>
  7e:	00 00       	nop
  80:	36 c0       	rjmp	.+108    	; 0xee <__bad_interrupt>
  82:	00 00       	nop
  84:	34 c0       	rjmp	.+104    	; 0xee <__bad_interrupt>
  86:	00 00       	nop
  88:	32 c0       	rjmp	.+100    	; 0xee <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 03       	mulsu	r20, r18
  8e:	45 03       	mulsu	r20, r21
  90:	49 03       	fmul	r20, r17
  92:	4d 03       	fmul	r20, r21
  94:	51 03       	mulsu	r21, r17
  96:	55 03       	mulsu	r21, r21
  98:	59 03       	fmul	r21, r17
  9a:	5c 03       	fmul	r21, r20
  9c:	60 03       	mulsu	r22, r16
  9e:	63 03       	mulsu	r22, r19
  a0:	63 03       	mulsu	r22, r19
  a2:	63 03       	mulsu	r22, r19
  a4:	63 03       	mulsu	r22, r19
  a6:	63 03       	mulsu	r22, r19
  a8:	63 03       	mulsu	r22, r19
  aa:	63 03       	mulsu	r22, r19
  ac:	27 03       	mulsu	r18, r23
  ae:	2d 03       	fmul	r18, r21
  b0:	34 03       	mulsu	r19, r20
  b2:	3b 03       	fmul	r19, r19

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d0 e4       	ldi	r29, 0x40	; 64
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e5       	ldi	r30, 0x52	; 82
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	00 e0       	ldi	r16, 0x00	; 0
  cc:	0b bf       	out	0x3b, r16	; 59
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x14>
  d0:	07 90       	elpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a0 32       	cpi	r26, 0x20	; 32
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0x10>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a0 e2       	ldi	r26, 0x20	; 32
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	a5 35       	cpi	r26, 0x55	; 85
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	f7 d1       	rcall	.+1006   	; 0x4da <main>
  ec:	30 c3       	rjmp	.+1632   	; 0x74e <_exit>

000000ee <__bad_interrupt>:
  ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <TimerSet>:
void SPI_ServantInit(void){
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
	
	/* Enable SPI */
	SPCR = (1<<SPE);
  f0:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <_avr_timer_M>
  f4:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <_avr_timer_M+0x1>
  f8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_avr_timer_M+0x2>
  fc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_avr_timer_M+0x3>
 100:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <_avr_timer_cntcurr>
 104:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <_avr_timer_cntcurr+0x1>
 108:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_avr_timer_cntcurr+0x2>
 10c:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_avr_timer_cntcurr+0x3>
 110:	08 95       	ret

00000112 <TimerOn>:
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 118:	8d e7       	ldi	r24, 0x7D	; 125
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 12a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 132:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_avr_timer_M>
 136:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_avr_timer_M+0x1>
 13a:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_avr_timer_M+0x2>
 13e:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_avr_timer_M+0x3>
 142:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 146:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 14a:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 14e:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
 152:	8f b7       	in	r24, 0x3f	; 63
 154:	80 68       	ori	r24, 0x80	; 128
 156:	8f bf       	out	0x3f, r24	; 63
 158:	08 95       	ret

0000015a <__vector_13>:
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_avr_timer_cntcurr>
 170:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_avr_timer_cntcurr+0x1>
 174:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <_avr_timer_cntcurr+0x2>
 178:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <_avr_timer_cntcurr+0x3>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	a1 09       	sbc	r26, r1
 180:	b1 09       	sbc	r27, r1
 182:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 186:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 18a:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 18e:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
 192:	89 2b       	or	r24, r25
 194:	8a 2b       	or	r24, r26
 196:	8b 2b       	or	r24, r27
 198:	99 f4       	brne	.+38     	; 0x1c0 <__vector_13+0x66>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <TimerFlag>
 1a0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_avr_timer_M>
 1a4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_avr_timer_M+0x1>
 1a8:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_avr_timer_M+0x2>
 1ac:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_avr_timer_M+0x3>
 1b0:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 1b4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 1b8:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 1bc:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <delay_ms>:
 1d2:	18 16       	cp	r1, r24
 1d4:	19 06       	cpc	r1, r25
 1d6:	5c f0       	brlt	.+22     	; 0x1ee <delay_ms+0x1c>
 1d8:	08 95       	ret
 1da:	00 00       	nop
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	31 09       	sbc	r19, r1
 1e0:	e1 f7       	brne	.-8      	; 0x1da <delay_ms+0x8>
 1e2:	4f 5f       	subi	r20, 0xFF	; 255
 1e4:	5f 4f       	sbci	r21, 0xFF	; 255
 1e6:	84 17       	cp	r24, r20
 1e8:	95 07       	cpc	r25, r21
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <delay_ms+0x20>
 1ec:	08 95       	ret
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	27 e0       	ldi	r18, 0x07	; 7
 1f4:	33 e0       	ldi	r19, 0x03	; 3
 1f6:	f1 cf       	rjmp	.-30     	; 0x1da <delay_ms+0x8>

000001f8 <LCD_WriteCommand>:
 1f8:	10 98       	cbi	0x02, 0	; 2
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	11 9a       	sbi	0x02, 1	; 2
 1fe:	00 00       	nop
 200:	11 98       	cbi	0x02, 1	; 2
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	e5 cf       	rjmp	.-54     	; 0x1d2 <delay_ms>
 208:	08 95       	ret

0000020a <LCD_ClearScreen>:
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	f5 cf       	rjmp	.-22     	; 0x1f8 <LCD_WriteCommand>
 20e:	08 95       	ret

00000210 <LCD_Cursor>:
 210:	81 31       	cpi	r24, 0x11	; 17
 212:	18 f4       	brcc	.+6      	; 0x21a <LCD_Cursor+0xa>
 214:	81 58       	subi	r24, 0x81	; 129
 216:	f0 cf       	rjmp	.-32     	; 0x1f8 <LCD_WriteCommand>
 218:	08 95       	ret
 21a:	81 55       	subi	r24, 0x51	; 81
 21c:	ed cf       	rjmp	.-38     	; 0x1f8 <LCD_WriteCommand>
 21e:	08 95       	ret

00000220 <LCD_init>:
 220:	84 e6       	ldi	r24, 0x64	; 100
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	d6 df       	rcall	.-84     	; 0x1d2 <delay_ms>
 226:	88 e3       	ldi	r24, 0x38	; 56
 228:	e7 df       	rcall	.-50     	; 0x1f8 <LCD_WriteCommand>
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	e5 df       	rcall	.-54     	; 0x1f8 <LCD_WriteCommand>
 22e:	8f e0       	ldi	r24, 0x0F	; 15
 230:	e3 df       	rcall	.-58     	; 0x1f8 <LCD_WriteCommand>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	e1 df       	rcall	.-62     	; 0x1f8 <LCD_WriteCommand>
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	cb cf       	rjmp	.-106    	; 0x1d2 <delay_ms>
 23c:	08 95       	ret

0000023e <LCD_WriteData>:
 23e:	10 9a       	sbi	0x02, 0	; 2
 240:	8b b9       	out	0x0b, r24	; 11
 242:	11 9a       	sbi	0x02, 1	; 2
 244:	00 00       	nop
 246:	11 98       	cbi	0x02, 1	; 2
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	c2 cf       	rjmp	.-124    	; 0x1d2 <delay_ms>
 24e:	08 95       	ret

00000250 <LCD_DisplayString>:
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	18 2f       	mov	r17, r24
 25a:	eb 01       	movw	r28, r22
 25c:	d6 df       	rcall	.-84     	; 0x20a <LCD_ClearScreen>
 25e:	88 81       	ld	r24, Y
 260:	88 23       	and	r24, r24
 262:	51 f0       	breq	.+20     	; 0x278 <LCD_DisplayString+0x28>
 264:	01 e0       	ldi	r16, 0x01	; 1
 266:	01 0f       	add	r16, r17
 268:	81 2f       	mov	r24, r17
 26a:	d2 df       	rcall	.-92     	; 0x210 <LCD_Cursor>
 26c:	89 91       	ld	r24, Y+
 26e:	e7 df       	rcall	.-50     	; 0x23e <LCD_WriteData>
 270:	10 2f       	mov	r17, r16
 272:	88 81       	ld	r24, Y
 274:	81 11       	cpse	r24, r1
 276:	f6 cf       	rjmp	.-20     	; 0x264 <LCD_DisplayString+0x14>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <Tick4>:
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	a1 97       	sbiw	r28, 0x21	; 33
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	8c 01       	movw	r16, r24
 2a0:	00 97       	sbiw	r24, 0x00	; 0
 2a2:	21 f0       	breq	.+8      	; 0x2ac <Tick4+0x2a>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	91 05       	cpc	r25, r1
 2a8:	91 f1       	breq	.+100    	; 0x30e <Tick4+0x8c>
 2aa:	60 c0       	rjmp	.+192    	; 0x36c <Tick4+0xea>
 2ac:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <pattern>
 2b0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <p_size>
 2b4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <speed>
 2b8:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <slave>
 2bc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <t_count>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <t_max>
 2c6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <iter+0x1>
 2ca:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <iter>
 2ce:	81 e3       	ldi	r24, 0x31	; 49
 2d0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <message_1+0x6>
 2d4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <message_2+0x5>
 2d8:	80 e3       	ldi	r24, 0x30	; 48
 2da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
 2de:	8e 01       	movw	r16, r28
 2e0:	0f 5f       	subi	r16, 0xFF	; 255
 2e2:	1f 4f       	sbci	r17, 0xFF	; 255
 2e4:	81 e2       	ldi	r24, 0x21	; 33
 2e6:	f8 01       	movw	r30, r16
 2e8:	11 92       	st	Z+, r1
 2ea:	8a 95       	dec	r24
 2ec:	e9 f7       	brne	.-6      	; 0x2e8 <Tick4+0x66>
 2ee:	6d e0       	ldi	r22, 0x0D	; 13
 2f0:	71 e0       	ldi	r23, 0x01	; 1
 2f2:	c8 01       	movw	r24, r16
 2f4:	21 d2       	rcall	.+1090   	; 0x738 <strcat>
 2f6:	66 e0       	ldi	r22, 0x06	; 6
 2f8:	71 e0       	ldi	r23, 0x01	; 1
 2fa:	c8 01       	movw	r24, r16
 2fc:	1d d2       	rcall	.+1082   	; 0x738 <strcat>
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	71 e0       	ldi	r23, 0x01	; 1
 302:	c8 01       	movw	r24, r16
 304:	19 d2       	rcall	.+1074   	; 0x738 <strcat>
 306:	b8 01       	movw	r22, r16
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	a2 df       	rcall	.-188    	; 0x250 <LCD_DisplayString>
 30c:	31 c0       	rjmp	.+98     	; 0x370 <Tick4+0xee>
 30e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <trigger>
 312:	88 23       	and	r24, r24
 314:	79 f1       	breq	.+94     	; 0x374 <Tick4+0xf2>
 316:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <pattern>
 31a:	8f 5c       	subi	r24, 0xCF	; 207
 31c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <message_1+0x6>
 320:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <speed>
 324:	8f 5c       	subi	r24, 0xCF	; 207
 326:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <message_2+0x5>
 32a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <slave>
 32e:	8f 5c       	subi	r24, 0xCF	; 207
 330:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
 334:	ce 01       	movw	r24, r28
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	7c 01       	movw	r14, r24
 33a:	81 e2       	ldi	r24, 0x21	; 33
 33c:	f7 01       	movw	r30, r14
 33e:	11 92       	st	Z+, r1
 340:	8a 95       	dec	r24
 342:	e9 f7       	brne	.-6      	; 0x33e <Tick4+0xbc>
 344:	6d e0       	ldi	r22, 0x0D	; 13
 346:	71 e0       	ldi	r23, 0x01	; 1
 348:	c7 01       	movw	r24, r14
 34a:	f6 d1       	rcall	.+1004   	; 0x738 <strcat>
 34c:	66 e0       	ldi	r22, 0x06	; 6
 34e:	71 e0       	ldi	r23, 0x01	; 1
 350:	c7 01       	movw	r24, r14
 352:	f2 d1       	rcall	.+996    	; 0x738 <strcat>
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	71 e0       	ldi	r23, 0x01	; 1
 358:	c7 01       	movw	r24, r14
 35a:	ee d1       	rcall	.+988    	; 0x738 <strcat>
 35c:	b7 01       	movw	r22, r14
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	77 df       	rcall	.-274    	; 0x250 <LCD_DisplayString>
 362:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <t_count>
 366:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <trigger>
 36a:	04 c0       	rjmp	.+8      	; 0x374 <Tick4+0xf2>
 36c:	89 2b       	or	r24, r25
 36e:	11 f4       	brne	.+4      	; 0x374 <Tick4+0xf2>
 370:	01 e0       	ldi	r16, 0x01	; 1
 372:	10 e0       	ldi	r17, 0x00	; 0
 374:	c8 01       	movw	r24, r16
 376:	a1 96       	adiw	r28, 0x21	; 33
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	08 95       	ret

00000390 <SPI_MasterInit>:
 390:	80 eb       	ldi	r24, 0xB0	; 176
 392:	84 b9       	out	0x04, r24	; 4
 394:	81 e5       	ldi	r24, 0x51	; 81
 396:	8c bd       	out	0x2c, r24	; 44
 398:	08 95       	ret

0000039a <SPI_MasterTransmit>:
 39a:	8e bd       	out	0x2e, r24	; 46
 39c:	0d b4       	in	r0, 0x2d	; 45
 39e:	07 fe       	sbrs	r0, 7
 3a0:	fd cf       	rjmp	.-6      	; 0x39c <SPI_MasterTransmit+0x2>
 3a2:	08 95       	ret

000003a4 <Tick>:
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	ec 01       	movw	r28, r24
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	21 f0       	breq	.+8      	; 0x3b6 <Tick+0x12>
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	91 05       	cpc	r25, r1
 3b2:	29 f0       	breq	.+10     	; 0x3be <Tick+0x1a>
 3b4:	08 c0       	rjmp	.+16     	; 0x3c6 <Tick+0x22>
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <trigger>
 3bc:	06 c0       	rjmp	.+12     	; 0x3ca <Tick+0x26>
 3be:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <data>
 3c2:	eb df       	rcall	.-42     	; 0x39a <SPI_MasterTransmit>
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <Tick+0x2a>
 3c6:	89 2b       	or	r24, r25
 3c8:	11 f4       	brne	.+4      	; 0x3ce <Tick+0x2a>
 3ca:	c2 e0       	ldi	r28, 0x02	; 2
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	ce 01       	movw	r24, r28
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <SPI_ServantReceive>:
}

char SPI_ServantReceive(void)
{
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)));
 3d6:	0d b4       	in	r0, 0x2d	; 45
 3d8:	07 fe       	sbrs	r0, 7
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <SPI_ServantReceive>
/* Return Data Register */
return SPDR;
 3dc:	8e b5       	in	r24, 0x2e	; 46
}
 3de:	08 95       	ret

000003e0 <__vector_19>:

ISR(SPI_STC_vect){
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	0b b6       	in	r0, 0x3b	; 59
 3ec:	0f 92       	push	r0
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	6f 93       	push	r22
 3f8:	7f 93       	push	r23
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
 402:	cf 93       	push	r28
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
  receivedData = SPDR /SPI_ServantReceive();
 408:	ce b5       	in	r28, 0x2e	; 46
 40a:	e5 df       	rcall	.-54     	; 0x3d6 <SPI_ServantReceive>
 40c:	68 2f       	mov	r22, r24
 40e:	8c 2f       	mov	r24, r28
 410:	7e d1       	rcall	.+764    	; 0x70e <__udivmodqi4>
 412:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <receivedData>
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	cf 91       	pop	r28
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0b be       	out	0x3b, r0	; 59
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
 43e:	8f ee       	ldi	r24, 0xEF	; 239
 440:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 442:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 444:	30 9b       	sbis	0x06, 0	; 6
 446:	29 c0       	rjmp	.+82     	; 0x49a <GetKeypadKey+0x5c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 448:	31 9b       	sbis	0x06, 1	; 6
 44a:	29 c0       	rjmp	.+82     	; 0x49e <GetKeypadKey+0x60>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 44c:	32 9b       	sbis	0x06, 2	; 6
 44e:	29 c0       	rjmp	.+82     	; 0x4a2 <GetKeypadKey+0x64>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 450:	33 9b       	sbis	0x06, 3	; 6
 452:	29 c0       	rjmp	.+82     	; 0x4a6 <GetKeypadKey+0x68>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
 454:	8f ed       	ldi	r24, 0xDF	; 223
 456:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 458:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 45a:	30 9b       	sbis	0x06, 0	; 6
 45c:	26 c0       	rjmp	.+76     	; 0x4aa <GetKeypadKey+0x6c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 45e:	31 9b       	sbis	0x06, 1	; 6
 460:	26 c0       	rjmp	.+76     	; 0x4ae <GetKeypadKey+0x70>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 462:	32 9b       	sbis	0x06, 2	; 6
 464:	26 c0       	rjmp	.+76     	; 0x4b2 <GetKeypadKey+0x74>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 466:	33 9b       	sbis	0x06, 3	; 6
 468:	26 c0       	rjmp	.+76     	; 0x4b6 <GetKeypadKey+0x78>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
 46a:	8f eb       	ldi	r24, 0xBF	; 191
 46c:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 46e:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 470:	30 9b       	sbis	0x06, 0	; 6
 472:	23 c0       	rjmp	.+70     	; 0x4ba <GetKeypadKey+0x7c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 474:	31 9b       	sbis	0x06, 1	; 6
 476:	23 c0       	rjmp	.+70     	; 0x4be <GetKeypadKey+0x80>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 478:	32 9b       	sbis	0x06, 2	; 6
 47a:	23 c0       	rjmp	.+70     	; 0x4c2 <GetKeypadKey+0x84>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 47c:	33 9b       	sbis	0x06, 3	; 6
 47e:	23 c0       	rjmp	.+70     	; 0x4c6 <GetKeypadKey+0x88>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
 480:	8f e7       	ldi	r24, 0x7F	; 127
 482:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 484:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 486:	30 9b       	sbis	0x06, 0	; 6
 488:	20 c0       	rjmp	.+64     	; 0x4ca <GetKeypadKey+0x8c>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 48a:	31 9b       	sbis	0x06, 1	; 6
 48c:	20 c0       	rjmp	.+64     	; 0x4ce <GetKeypadKey+0x90>
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 48e:	32 9b       	sbis	0x06, 2	; 6
 490:	20 c0       	rjmp	.+64     	; 0x4d2 <GetKeypadKey+0x94>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 492:	33 9b       	sbis	0x06, 3	; 6
 494:	20 c0       	rjmp	.+64     	; 0x4d6 <GetKeypadKey+0x98>
	
	return '\0';
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 49a:	81 e3       	ldi	r24, 0x31	; 49
 49c:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 49e:	84 e3       	ldi	r24, 0x34	; 52
 4a0:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 4a2:	87 e3       	ldi	r24, 0x37	; 55
 4a4:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 4a6:	8a e2       	ldi	r24, 0x2A	; 42
 4a8:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 4aa:	82 e3       	ldi	r24, 0x32	; 50
 4ac:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 4ae:	85 e3       	ldi	r24, 0x35	; 53
 4b0:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 4b2:	88 e3       	ldi	r24, 0x38	; 56
 4b4:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 4b6:	80 e3       	ldi	r24, 0x30	; 48
 4b8:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 4ba:	83 e3       	ldi	r24, 0x33	; 51
 4bc:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 4be:	86 e3       	ldi	r24, 0x36	; 54
 4c0:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 4c2:	89 e3       	ldi	r24, 0x39	; 57
 4c4:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 4c6:	83 e2       	ldi	r24, 0x23	; 35
 4c8:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 4ca:	81 e4       	ldi	r24, 0x41	; 65
 4cc:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 4ce:	82 e4       	ldi	r24, 0x42	; 66
 4d0:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 4d2:	83 e4       	ldi	r24, 0x43	; 67
 4d4:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 4d6:	84 e4       	ldi	r24, 0x44	; 68
	
	return '\0';
}
 4d8:	08 95       	ret

000004da <main>:
    }
    return state;
}

int main(void)
{
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	00 d0       	rcall	.+0      	; 0x4e0 <main+0x6>
 4e0:	00 d0       	rcall	.+0      	; 0x4e2 <main+0x8>
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <main+0xa>
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF; PORTA = 0x10;
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	81 b9       	out	0x01, r24	; 1
 4ec:	90 e1       	ldi	r25, 0x10	; 16
 4ee:	92 b9       	out	0x02, r25	; 2
    //DDRB = 0xFE; PORTB = 0x00;
    DDRC = 0xF0; PORTC = 0x00;
 4f0:	10 ef       	ldi	r17, 0xF0	; 240
 4f2:	17 b9       	out	0x07, r17	; 7
 4f4:	18 b8       	out	0x08, r1	; 8
    DDRD = 0xFF; PORTD = 0x00;
 4f6:	8a b9       	out	0x0a, r24	; 10
 4f8:	1b b8       	out	0x0b, r1	; 11
    
    TimerSet(50);
 4fa:	62 e3       	ldi	r22, 0x32	; 50
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	f6 dd       	rcall	.-1044   	; 0xf0 <TimerSet>
    TimerOn();
 504:	06 de       	rcall	.-1012   	; 0x112 <TimerOn>
    
    LCD_init();
 506:	8c de       	rcall	.-744    	; 0x220 <LCD_init>
 508:	80 de       	rcall	.-768    	; 0x20a <LCD_ClearScreen>
    LCD_ClearScreen();
 50a:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <maskUp>
    //LCD_Cursor(1);   
    //LCD_DisplayString( 1, (unsigned char*)"YO");
    
    maskUp = 0xF0;
 50e:	8f e0       	ldi	r24, 0x0F	; 15
 510:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <maskLow>
    maskLow = 0x0F;
 514:	86 e0       	ldi	r24, 0x06	; 6
 516:	ea e1       	ldi	r30, 0x1A	; 26
    unsigned long t1 = 3;
    unsigned long t3 = 1;
    unsigned long t4 = 2;
    
    static task task1, task3, task4;
    task *tasks[] = { &task1, &task3, &task4};
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	de 01       	movw	r26, r28
 51c:	11 96       	adiw	r26, 0x01	; 1
 51e:	01 90       	ld	r0, Z+
 520:	0d 92       	st	X+, r0
 522:	8a 95       	dec	r24
 524:	e1 f7       	brne	.-8      	; 0x51e <main+0x44>
 526:	e6 e3       	ldi	r30, 0x36	; 54
 528:	f1 e0       	ldi	r31, 0x01	; 1
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    
    task1.state = 0;//Task initial state.
 52a:	10 82       	st	Z, r1
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	90 e0       	ldi	r25, 0x00	; 0
    task1.period = t1;//Task Period.
 530:	a0 e0       	ldi	r26, 0x00	; 0
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	81 83       	std	Z+1, r24	; 0x01
 536:	92 83       	std	Z+2, r25	; 0x02
 538:	a3 83       	std	Z+3, r26	; 0x03
 53a:	b4 83       	std	Z+4, r27	; 0x04
 53c:	85 83       	std	Z+5, r24	; 0x05
 53e:	96 83       	std	Z+6, r25	; 0x06
    task1.elapsedTime = t1; // Task current elasped time.
 540:	a7 83       	std	Z+7, r26	; 0x07
 542:	b0 87       	std	Z+8, r27	; 0x08
 544:	82 ed       	ldi	r24, 0xD2	; 210
 546:	91 e0       	ldi	r25, 0x01	; 1
    task1.TickFct = &Tick; // Function pointer for the tick.
 548:	92 87       	std	Z+10, r25	; 0x0a
 54a:	81 87       	std	Z+9, r24	; 0x09
 54c:	eb e2       	ldi	r30, 0x2B	; 43
 54e:	f1 e0       	ldi	r31, 0x01	; 1
    
    task3.state = 0;//Task initial state.
 550:	10 82       	st	Z, r1
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
    task3.period = t3;//Task Period.
 556:	a0 e0       	ldi	r26, 0x00	; 0
 558:	b0 e0       	ldi	r27, 0x00	; 0
 55a:	81 83       	std	Z+1, r24	; 0x01
 55c:	92 83       	std	Z+2, r25	; 0x02
 55e:	a3 83       	std	Z+3, r26	; 0x03
 560:	b4 83       	std	Z+4, r27	; 0x04
 562:	85 83       	std	Z+5, r24	; 0x05
 564:	96 83       	std	Z+6, r25	; 0x06
    task3.elapsedTime = t3; // Task current elapsed time.
 566:	a7 83       	std	Z+7, r26	; 0x07
 568:	b0 87       	std	Z+8, r27	; 0x08
 56a:	8f e6       	ldi	r24, 0x6F	; 111
 56c:	93 e0       	ldi	r25, 0x03	; 3
    task3.TickFct = &Tick3; // Function pointer for the tick.
 56e:	92 87       	std	Z+10, r25	; 0x0a
 570:	81 87       	std	Z+9, r24	; 0x09
 572:	e0 e2       	ldi	r30, 0x20	; 32
 574:	f1 e0       	ldi	r31, 0x01	; 1
    
    task4.state = 0;//Task initial state.
 576:	10 82       	st	Z, r1
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	90 e0       	ldi	r25, 0x00	; 0
    task4.period = t4;//Task Period.
 57c:	a0 e0       	ldi	r26, 0x00	; 0
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	81 83       	std	Z+1, r24	; 0x01
 582:	92 83       	std	Z+2, r25	; 0x02
 584:	a3 83       	std	Z+3, r26	; 0x03
 586:	b4 83       	std	Z+4, r27	; 0x04
 588:	85 83       	std	Z+5, r24	; 0x05
 58a:	96 83       	std	Z+6, r25	; 0x06
    task4.elapsedTime = t4; // Task current elapsed time.
 58c:	a7 83       	std	Z+7, r26	; 0x07
 58e:	b0 87       	std	Z+8, r27	; 0x08
 590:	81 e4       	ldi	r24, 0x41	; 65
 592:	91 e0       	ldi	r25, 0x01	; 1
    task4.TickFct = &Tick4; // Function pointer for the tick.
 594:	92 87       	std	Z+10, r25	; 0x0a
 596:	81 87       	std	Z+9, r24	; 0x09
 598:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <data>
    
    data = 0;
 59c:	18 9b       	sbis	0x03, 0	; 3
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <main+0xce>
    
    if(PINB & 0x01) master = 0xFF;
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <master>
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <main+0xd2>
 5a8:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <master>
    else master = 0x00;
 5ac:	f1 de       	rcall	.-542    	; 0x390 <SPI_MasterInit>
    
    SPI_MasterInit();
 5ae:	7e 01       	movw	r14, r28
 5b0:	87 e0       	ldi	r24, 0x07	; 7
 5b2:	e8 0e       	add	r14, r24
 5b4:	f1 1c       	adc	r15, r1
 5b6:	de 01       	movw	r26, r28
 5b8:	11 96       	adiw	r26, 0x01	; 1
 5ba:	6d 01       	movw	r12, r26
 5bc:	f6 01       	movw	r30, r12
 5be:	01 91       	ld	r16, Z+
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 5c0:	11 91       	ld	r17, Z+
 5c2:	6f 01       	movw	r12, r30
 5c4:	d8 01       	movw	r26, r16
 5c6:	15 96       	adiw	r26, 0x05	; 5
 5c8:	4d 91       	ld	r20, X+
 5ca:	5d 91       	ld	r21, X+
 5cc:	6d 91       	ld	r22, X+
 5ce:	7c 91       	ld	r23, X
 5d0:	18 97       	sbiw	r26, 0x08	; 8
 5d2:	11 96       	adiw	r26, 0x01	; 1
 5d4:	8d 91       	ld	r24, X+
 5d6:	9d 91       	ld	r25, X+
 5d8:	0d 90       	ld	r0, X+
 5da:	bc 91       	ld	r27, X
 5dc:	a0 2d       	mov	r26, r0
 5de:	48 17       	cp	r20, r24
 5e0:	59 07       	cpc	r21, r25
 5e2:	6a 07       	cpc	r22, r26
 5e4:	7b 07       	cpc	r23, r27
 5e6:	81 f4       	brne	.+32     	; 0x608 <main+0x12e>
 5e8:	f8 01       	movw	r30, r16
 5ea:	80 81       	ld	r24, Z
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 5ec:	01 84       	ldd	r0, Z+9	; 0x09
 5ee:	f2 85       	ldd	r31, Z+10	; 0x0a
 5f0:	e0 2d       	mov	r30, r0
 5f2:	08 2e       	mov	r0, r24
 5f4:	00 0c       	add	r0, r0
 5f6:	99 0b       	sbc	r25, r25
 5f8:	09 95       	icall
 5fa:	d8 01       	movw	r26, r16
 5fc:	8c 93       	st	X, r24
 5fe:	f8 01       	movw	r30, r16
 600:	15 82       	std	Z+5, r1	; 0x05
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 602:	16 82       	std	Z+6, r1	; 0x06
 604:	17 82       	std	Z+7, r1	; 0x07
 606:	10 86       	std	Z+8, r1	; 0x08
 608:	f8 01       	movw	r30, r16
 60a:	85 81       	ldd	r24, Z+5	; 0x05
            }
            tasks[i]->elapsedTime += 1;
 60c:	96 81       	ldd	r25, Z+6	; 0x06
 60e:	a7 81       	ldd	r26, Z+7	; 0x07
 610:	b0 85       	ldd	r27, Z+8	; 0x08
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	a1 1d       	adc	r26, r1
 616:	b1 1d       	adc	r27, r1
 618:	85 83       	std	Z+5, r24	; 0x05
 61a:	96 83       	std	Z+6, r25	; 0x06
 61c:	a7 83       	std	Z+7, r26	; 0x07
 61e:	b0 87       	std	Z+8, r27	; 0x08
 620:	ce 14       	cp	r12, r14
 622:	df 04       	cpc	r13, r15
    SPI_MasterInit();
    
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
 624:	59 f6       	brne	.-106    	; 0x5bc <main+0xe2>
 626:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <TimerFlag>
                tasks[i]->elapsedTime = 0;
            }
            tasks[i]->elapsedTime += 1;
        }

        while(!TimerFlag){}
 62a:	88 23       	and	r24, r24
 62c:	e1 f3       	breq	.-8      	; 0x626 <main+0x14c>
 62e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <TimerFlag>
        TimerFlag = 0;
 632:	c1 cf       	rjmp	.-126    	; 0x5b6 <main+0xdc>

00000634 <keyAssign>:
 634:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <key>
    return 0;
}

void keyAssign(){
    
    switch(key){
 638:	8e 2f       	mov	r24, r30
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	fc 01       	movw	r30, r24
 63e:	f1 97       	sbiw	r30, 0x31	; 49
 640:	e4 31       	cpi	r30, 0x14	; 20
 642:	f1 05       	cpc	r31, r1
 644:	08 f0       	brcs	.+2      	; 0x648 <keyAssign+0x14>
 646:	3f c0       	rjmp	.+126    	; 0x6c6 <keyAssign+0x92>
 648:	ea 5b       	subi	r30, 0xBA	; 186
 64a:	ff 4f       	sbci	r31, 0xFF	; 255
 64c:	6c c0       	rjmp	.+216    	; 0x726 <__tablejump2__>
        case 'A':
            pattern = 0;
 64e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <pattern>
            p_size = 2;
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <p_size>
        break;
 658:	36 c0       	rjmp	.+108    	; 0x6c6 <keyAssign+0x92>
        case 'B':
            pattern = 1;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pattern>
            p_size = 2;
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <p_size>
        break;
 666:	2f c0       	rjmp	.+94     	; 0x6c6 <keyAssign+0x92>
        case 'C':
            pattern = 2;
 668:	82 e0       	ldi	r24, 0x02	; 2
 66a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pattern>
            p_size = 14;
 66e:	8e e0       	ldi	r24, 0x0E	; 14
 670:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <p_size>
        break;
 674:	28 c0       	rjmp	.+80     	; 0x6c6 <keyAssign+0x92>
        case 'D':
            pattern = 3;
 676:	83 e0       	ldi	r24, 0x03	; 3
 678:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pattern>
            p_size = 17;
 67c:	81 e1       	ldi	r24, 0x11	; 17
 67e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <p_size>
        break;
 682:	21 c0       	rjmp	.+66     	; 0x6c6 <keyAssign+0x92>
        case '1':
            speed = 0;
 684:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <speed>
        break;
 688:	1e c0       	rjmp	.+60     	; 0x6c6 <keyAssign+0x92>
        case '2':
            speed = 1;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <speed>
        break;
 690:	1a c0       	rjmp	.+52     	; 0x6c6 <keyAssign+0x92>
            case '3':
            speed = 2;
 692:	82 e0       	ldi	r24, 0x02	; 2
 694:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <speed>
        break;
 698:	16 c0       	rjmp	.+44     	; 0x6c6 <keyAssign+0x92>
        case '4':
            speed = 3;
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <speed>
        break;
 6a0:	12 c0       	rjmp	.+36     	; 0x6c6 <keyAssign+0x92>
        case '5':
            speed = 4;
 6a2:	84 e0       	ldi	r24, 0x04	; 4
 6a4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <speed>
        break;
 6a8:	0e c0       	rjmp	.+28     	; 0x6c6 <keyAssign+0x92>
        case '6':
            speed = 5;
 6aa:	85 e0       	ldi	r24, 0x05	; 5
 6ac:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <speed>
        break;
 6b0:	0a c0       	rjmp	.+20     	; 0x6c6 <keyAssign+0x92>
        case '7':
            slave = 0;
 6b2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <slave>
        break;
 6b6:	07 c0       	rjmp	.+14     	; 0x6c6 <keyAssign+0x92>
        case '8':
            slave = 1;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <slave>
        break;
 6be:	03 c0       	rjmp	.+6      	; 0x6c6 <keyAssign+0x92>
        case '9':
            slave = 2;
 6c0:	82 e0       	ldi	r24, 0x02	; 2
 6c2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <slave>
        break;
        default:
        break;
    }
    
    data =  ((pattern << 4)) | speed ;
 6c6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <pattern>
 6ca:	20 e1       	ldi	r18, 0x10	; 16
 6cc:	82 9f       	mul	r24, r18
 6ce:	c0 01       	movw	r24, r0
 6d0:	11 24       	eor	r1, r1
 6d2:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <speed>
 6d6:	89 2b       	or	r24, r25
 6d8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <data>
 6dc:	08 95       	ret

000006de <Tick3>:
    return state;
}



int Tick3(int state){
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	ec 01       	movw	r28, r24
    
    switch(state){
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	91 05       	cpc	r25, r1
 6e8:	51 f4       	brne	.+20     	; 0x6fe <Tick3+0x20>
        case START3:
        break;
        case ON:      
                key = GetKeypadKey();
 6ea:	a9 de       	rcall	.-686    	; 0x43e <GetKeypadKey>
 6ec:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <key>
                if(key != '\0' ){
 6f0:	88 23       	and	r24, r24
                    keyAssign();
 6f2:	49 f0       	breq	.+18     	; 0x706 <Tick3+0x28>
 6f4:	9f df       	rcall	.-194    	; 0x634 <keyAssign>
                    trigger = 0xFF;
 6f6:	8f ef       	ldi	r24, 0xFF	; 255
 6f8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <trigger>
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <Tick3+0x28>
        break;
        default:
        break;
    }
    
    switch(state){
 6fe:	89 2b       	or	r24, r25
 700:	11 f4       	brne	.+4      	; 0x706 <Tick3+0x28>
        case START3:
            state = ON;
 702:	c1 e0       	ldi	r28, 0x01	; 1
 704:	d0 e0       	ldi	r29, 0x00	; 0
        case ON:
        break;
        default:break;
    }
    return state;
}
 706:	ce 01       	movw	r24, r28
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <__udivmodqi4>:
 70e:	99 1b       	sub	r25, r25
 710:	79 e0       	ldi	r23, 0x09	; 9
 712:	04 c0       	rjmp	.+8      	; 0x71c <__udivmodqi4_ep>

00000714 <__udivmodqi4_loop>:
 714:	99 1f       	adc	r25, r25
 716:	96 17       	cp	r25, r22
 718:	08 f0       	brcs	.+2      	; 0x71c <__udivmodqi4_ep>
 71a:	96 1b       	sub	r25, r22

0000071c <__udivmodqi4_ep>:
 71c:	88 1f       	adc	r24, r24
 71e:	7a 95       	dec	r23
 720:	c9 f7       	brne	.-14     	; 0x714 <__udivmodqi4_loop>
 722:	80 95       	com	r24
 724:	08 95       	ret

00000726 <__tablejump2__>:
 726:	ee 0f       	add	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	00 24       	eor	r0, r0
 72c:	00 1c       	adc	r0, r0
 72e:	0b be       	out	0x3b, r0	; 59
 730:	07 90       	elpm	r0, Z+
 732:	f6 91       	elpm	r31, Z
 734:	e0 2d       	mov	r30, r0
 736:	09 94       	ijmp

00000738 <strcat>:
 738:	fb 01       	movw	r30, r22
 73a:	dc 01       	movw	r26, r24
 73c:	0d 90       	ld	r0, X+
 73e:	00 20       	and	r0, r0
 740:	e9 f7       	brne	.-6      	; 0x73c <strcat+0x4>
 742:	11 97       	sbiw	r26, 0x01	; 1
 744:	01 90       	ld	r0, Z+
 746:	0d 92       	st	X+, r0
 748:	00 20       	and	r0, r0
 74a:	e1 f7       	brne	.-8      	; 0x744 <strcat+0xc>
 74c:	08 95       	ret

0000074e <_exit>:
 74e:	f8 94       	cli

00000750 <__stop_program>:
 750:	ff cf       	rjmp	.-2      	; 0x750 <__stop_program>
