
lab_3_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000782  00000816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800122  00800122  00000838  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e5  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1d  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d2  00000000  00000000  00002692  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069d  00000000  00000000  000032f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c8  00000000  00000000  00003995  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000415d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
   6:	00 00       	nop
   8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
   a:	00 00       	nop
   c:	70 c0       	rjmp	.+224    	; 0xee <__bad_interrupt>
   e:	00 00       	nop
  10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
  12:	00 00       	nop
  14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
  16:	00 00       	nop
  18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
  1a:	00 00       	nop
  1c:	68 c0       	rjmp	.+208    	; 0xee <__bad_interrupt>
  1e:	00 00       	nop
  20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
  22:	00 00       	nop
  24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>
  26:	00 00       	nop
  28:	62 c0       	rjmp	.+196    	; 0xee <__bad_interrupt>
  2a:	00 00       	nop
  2c:	60 c0       	rjmp	.+192    	; 0xee <__bad_interrupt>
  2e:	00 00       	nop
  30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
  32:	00 00       	nop
  34:	92 c0       	rjmp	.+292    	; 0x15a <__vector_13>
  36:	00 00       	nop
  38:	5a c0       	rjmp	.+180    	; 0xee <__bad_interrupt>
  3a:	00 00       	nop
  3c:	58 c0       	rjmp	.+176    	; 0xee <__bad_interrupt>
  3e:	00 00       	nop
  40:	56 c0       	rjmp	.+172    	; 0xee <__bad_interrupt>
  42:	00 00       	nop
  44:	54 c0       	rjmp	.+168    	; 0xee <__bad_interrupt>
  46:	00 00       	nop
  48:	52 c0       	rjmp	.+164    	; 0xee <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d4 c1       	rjmp	.+936    	; 0x3f6 <__vector_19>
  4e:	00 00       	nop
  50:	4e c0       	rjmp	.+156    	; 0xee <__bad_interrupt>
  52:	00 00       	nop
  54:	4c c0       	rjmp	.+152    	; 0xee <__bad_interrupt>
  56:	00 00       	nop
  58:	4a c0       	rjmp	.+148    	; 0xee <__bad_interrupt>
  5a:	00 00       	nop
  5c:	48 c0       	rjmp	.+144    	; 0xee <__bad_interrupt>
  5e:	00 00       	nop
  60:	46 c0       	rjmp	.+140    	; 0xee <__bad_interrupt>
  62:	00 00       	nop
  64:	44 c0       	rjmp	.+136    	; 0xee <__bad_interrupt>
  66:	00 00       	nop
  68:	42 c0       	rjmp	.+132    	; 0xee <__bad_interrupt>
  6a:	00 00       	nop
  6c:	40 c0       	rjmp	.+128    	; 0xee <__bad_interrupt>
  6e:	00 00       	nop
  70:	3e c0       	rjmp	.+124    	; 0xee <__bad_interrupt>
  72:	00 00       	nop
  74:	3c c0       	rjmp	.+120    	; 0xee <__bad_interrupt>
  76:	00 00       	nop
  78:	3a c0       	rjmp	.+116    	; 0xee <__bad_interrupt>
  7a:	00 00       	nop
  7c:	38 c0       	rjmp	.+112    	; 0xee <__bad_interrupt>
  7e:	00 00       	nop
  80:	36 c0       	rjmp	.+108    	; 0xee <__bad_interrupt>
  82:	00 00       	nop
  84:	34 c0       	rjmp	.+104    	; 0xee <__bad_interrupt>
  86:	00 00       	nop
  88:	32 c0       	rjmp	.+100    	; 0xee <__bad_interrupt>
  8a:	00 00       	nop
  8c:	50 03       	mulsu	r21, r16
  8e:	53 03       	mulsu	r21, r19
  90:	57 03       	mulsu	r21, r23
  92:	5b 03       	fmul	r21, r19
  94:	5f 03       	fmul	r21, r23
  96:	63 03       	mulsu	r22, r19
  98:	67 03       	mulsu	r22, r23
  9a:	6e 03       	fmul	r22, r22
  9c:	75 03       	mulsu	r23, r21
  9e:	7b 03       	fmul	r23, r19
  a0:	7b 03       	fmul	r23, r19
  a2:	7b 03       	fmul	r23, r19
  a4:	7b 03       	fmul	r23, r19
  a6:	7b 03       	fmul	r23, r19
  a8:	7b 03       	fmul	r23, r19
  aa:	7b 03       	fmul	r23, r19
  ac:	35 03       	mulsu	r19, r21
  ae:	3b 03       	fmul	r19, r19
  b0:	42 03       	mulsu	r20, r18
  b2:	49 03       	fmul	r20, r17

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d0 e4       	ldi	r29, 0x40	; 64
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e8       	ldi	r30, 0x82	; 130
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	00 e0       	ldi	r16, 0x00	; 0
  cc:	0b bf       	out	0x3b, r16	; 59
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x14>
  d0:	07 90       	elpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a2 32       	cpi	r26, 0x22	; 34
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0x10>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a2 e2       	ldi	r26, 0x22	; 34
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	a8 35       	cpi	r26, 0x58	; 88
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	02 d2       	rcall	.+1028   	; 0x4f0 <main>
  ec:	48 c3       	rjmp	.+1680   	; 0x77e <_exit>

000000ee <__bad_interrupt>:
  ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <TimerSet>:
void SPI_ServantInit(void){
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
	
	/* Enable SPI */
	SPCR = (1<<SPE);
  f0:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <_avr_timer_M>
  f4:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <_avr_timer_M+0x1>
  f8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_M+0x2>
  fc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_M+0x3>
 100:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <_avr_timer_cntcurr>
 104:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <_avr_timer_cntcurr+0x1>
 108:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_avr_timer_cntcurr+0x2>
 10c:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <_avr_timer_cntcurr+0x3>
 110:	08 95       	ret

00000112 <TimerOn>:
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 118:	8d e7       	ldi	r24, 0x7D	; 125
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 12a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 132:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_avr_timer_M>
 136:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_avr_timer_M+0x1>
 13a:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <_avr_timer_M+0x2>
 13e:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <_avr_timer_M+0x3>
 142:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_avr_timer_cntcurr>
 146:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_avr_timer_cntcurr+0x1>
 14a:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <_avr_timer_cntcurr+0x2>
 14e:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <_avr_timer_cntcurr+0x3>
 152:	8f b7       	in	r24, 0x3f	; 63
 154:	80 68       	ori	r24, 0x80	; 128
 156:	8f bf       	out	0x3f, r24	; 63
 158:	08 95       	ret

0000015a <__vector_13>:
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_avr_timer_cntcurr>
 170:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <_avr_timer_cntcurr+0x1>
 174:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <_avr_timer_cntcurr+0x2>
 178:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <_avr_timer_cntcurr+0x3>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	a1 09       	sbc	r26, r1
 180:	b1 09       	sbc	r27, r1
 182:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_avr_timer_cntcurr>
 186:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_avr_timer_cntcurr+0x1>
 18a:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <_avr_timer_cntcurr+0x2>
 18e:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <_avr_timer_cntcurr+0x3>
 192:	89 2b       	or	r24, r25
 194:	8a 2b       	or	r24, r26
 196:	8b 2b       	or	r24, r27
 198:	99 f4       	brne	.+38     	; 0x1c0 <__vector_13+0x66>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <TimerFlag>
 1a0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_avr_timer_M>
 1a4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_avr_timer_M+0x1>
 1a8:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <_avr_timer_M+0x2>
 1ac:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <_avr_timer_M+0x3>
 1b0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_avr_timer_cntcurr>
 1b4:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_avr_timer_cntcurr+0x1>
 1b8:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <_avr_timer_cntcurr+0x2>
 1bc:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <_avr_timer_cntcurr+0x3>
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <delay_ms>:
 1d2:	18 16       	cp	r1, r24
 1d4:	19 06       	cpc	r1, r25
 1d6:	5c f0       	brlt	.+22     	; 0x1ee <delay_ms+0x1c>
 1d8:	08 95       	ret
 1da:	00 00       	nop
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	31 09       	sbc	r19, r1
 1e0:	e1 f7       	brne	.-8      	; 0x1da <delay_ms+0x8>
 1e2:	4f 5f       	subi	r20, 0xFF	; 255
 1e4:	5f 4f       	sbci	r21, 0xFF	; 255
 1e6:	84 17       	cp	r24, r20
 1e8:	95 07       	cpc	r25, r21
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <delay_ms+0x20>
 1ec:	08 95       	ret
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	27 e0       	ldi	r18, 0x07	; 7
 1f4:	33 e0       	ldi	r19, 0x03	; 3
 1f6:	f1 cf       	rjmp	.-30     	; 0x1da <delay_ms+0x8>

000001f8 <LCD_WriteCommand>:
 1f8:	10 98       	cbi	0x02, 0	; 2
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	11 9a       	sbi	0x02, 1	; 2
 1fe:	00 00       	nop
 200:	11 98       	cbi	0x02, 1	; 2
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	e5 cf       	rjmp	.-54     	; 0x1d2 <delay_ms>
 208:	08 95       	ret

0000020a <LCD_ClearScreen>:
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	f5 cf       	rjmp	.-22     	; 0x1f8 <LCD_WriteCommand>
 20e:	08 95       	ret

00000210 <LCD_Cursor>:
 210:	81 31       	cpi	r24, 0x11	; 17
 212:	18 f4       	brcc	.+6      	; 0x21a <LCD_Cursor+0xa>
 214:	81 58       	subi	r24, 0x81	; 129
 216:	f0 cf       	rjmp	.-32     	; 0x1f8 <LCD_WriteCommand>
 218:	08 95       	ret
 21a:	81 55       	subi	r24, 0x51	; 81
 21c:	ed cf       	rjmp	.-38     	; 0x1f8 <LCD_WriteCommand>
 21e:	08 95       	ret

00000220 <LCD_init>:
 220:	84 e6       	ldi	r24, 0x64	; 100
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	d6 df       	rcall	.-84     	; 0x1d2 <delay_ms>
 226:	88 e3       	ldi	r24, 0x38	; 56
 228:	e7 df       	rcall	.-50     	; 0x1f8 <LCD_WriteCommand>
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	e5 df       	rcall	.-54     	; 0x1f8 <LCD_WriteCommand>
 22e:	8f e0       	ldi	r24, 0x0F	; 15
 230:	e3 df       	rcall	.-58     	; 0x1f8 <LCD_WriteCommand>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	e1 df       	rcall	.-62     	; 0x1f8 <LCD_WriteCommand>
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	cb cf       	rjmp	.-106    	; 0x1d2 <delay_ms>
 23c:	08 95       	ret

0000023e <LCD_WriteData>:
 23e:	10 9a       	sbi	0x02, 0	; 2
 240:	8b b9       	out	0x0b, r24	; 11
 242:	11 9a       	sbi	0x02, 1	; 2
 244:	00 00       	nop
 246:	11 98       	cbi	0x02, 1	; 2
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	c2 cf       	rjmp	.-124    	; 0x1d2 <delay_ms>
 24e:	08 95       	ret

00000250 <LCD_DisplayString>:
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	18 2f       	mov	r17, r24
 25a:	eb 01       	movw	r28, r22
 25c:	d6 df       	rcall	.-84     	; 0x20a <LCD_ClearScreen>
 25e:	88 81       	ld	r24, Y
 260:	88 23       	and	r24, r24
 262:	51 f0       	breq	.+20     	; 0x278 <LCD_DisplayString+0x28>
 264:	01 e0       	ldi	r16, 0x01	; 1
 266:	01 0f       	add	r16, r17
 268:	81 2f       	mov	r24, r17
 26a:	d2 df       	rcall	.-92     	; 0x210 <LCD_Cursor>
 26c:	89 91       	ld	r24, Y+
 26e:	e7 df       	rcall	.-50     	; 0x23e <LCD_WriteData>
 270:	10 2f       	mov	r17, r16
 272:	88 81       	ld	r24, Y
 274:	81 11       	cpse	r24, r1
 276:	f6 cf       	rjmp	.-20     	; 0x264 <LCD_DisplayString+0x14>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <Tick4>:
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	a1 97       	sbiw	r28, 0x21	; 33
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	8c 01       	movw	r16, r24
 2a0:	00 97       	sbiw	r24, 0x00	; 0
 2a2:	21 f0       	breq	.+8      	; 0x2ac <Tick4+0x2a>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	91 05       	cpc	r25, r1
 2a8:	89 f1       	breq	.+98     	; 0x30c <Tick4+0x8a>
 2aa:	5f c0       	rjmp	.+190    	; 0x36a <Tick4+0xe8>
 2ac:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <pattern>
 2b0:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <p_size>
 2b4:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <speed>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <slave>
 2be:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <t_count>
 2c2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <t_max>
 2c6:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <iter+0x1>
 2ca:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <iter>
 2ce:	81 e3       	ldi	r24, 0x31	; 49
 2d0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <message_1+0x6>
 2d4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <message_2+0x5>
 2d8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
 2dc:	8e 01       	movw	r16, r28
 2de:	0f 5f       	subi	r16, 0xFF	; 255
 2e0:	1f 4f       	sbci	r17, 0xFF	; 255
 2e2:	81 e2       	ldi	r24, 0x21	; 33
 2e4:	f8 01       	movw	r30, r16
 2e6:	11 92       	st	Z+, r1
 2e8:	8a 95       	dec	r24
 2ea:	e9 f7       	brne	.-6      	; 0x2e6 <Tick4+0x64>
 2ec:	6f e0       	ldi	r22, 0x0F	; 15
 2ee:	71 e0       	ldi	r23, 0x01	; 1
 2f0:	c8 01       	movw	r24, r16
 2f2:	3a d2       	rcall	.+1140   	; 0x768 <strcat>
 2f4:	66 e0       	ldi	r22, 0x06	; 6
 2f6:	71 e0       	ldi	r23, 0x01	; 1
 2f8:	c8 01       	movw	r24, r16
 2fa:	36 d2       	rcall	.+1132   	; 0x768 <strcat>
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	71 e0       	ldi	r23, 0x01	; 1
 300:	c8 01       	movw	r24, r16
 302:	32 d2       	rcall	.+1124   	; 0x768 <strcat>
 304:	b8 01       	movw	r22, r16
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	a3 df       	rcall	.-186    	; 0x250 <LCD_DisplayString>
 30a:	31 c0       	rjmp	.+98     	; 0x36e <Tick4+0xec>
 30c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <trigger>
 310:	88 23       	and	r24, r24
 312:	79 f1       	breq	.+94     	; 0x372 <Tick4+0xf0>
 314:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pattern>
 318:	8f 5c       	subi	r24, 0xCF	; 207
 31a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <message_1+0x6>
 31e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <speed>
 322:	8f 5c       	subi	r24, 0xCF	; 207
 324:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <message_2+0x5>
 328:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <slave>
 32c:	80 5d       	subi	r24, 0xD0	; 208
 32e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
 332:	ce 01       	movw	r24, r28
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	7c 01       	movw	r14, r24
 338:	81 e2       	ldi	r24, 0x21	; 33
 33a:	f7 01       	movw	r30, r14
 33c:	11 92       	st	Z+, r1
 33e:	8a 95       	dec	r24
 340:	e9 f7       	brne	.-6      	; 0x33c <Tick4+0xba>
 342:	6f e0       	ldi	r22, 0x0F	; 15
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	c7 01       	movw	r24, r14
 348:	0f d2       	rcall	.+1054   	; 0x768 <strcat>
 34a:	66 e0       	ldi	r22, 0x06	; 6
 34c:	71 e0       	ldi	r23, 0x01	; 1
 34e:	c7 01       	movw	r24, r14
 350:	0b d2       	rcall	.+1046   	; 0x768 <strcat>
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	71 e0       	ldi	r23, 0x01	; 1
 356:	c7 01       	movw	r24, r14
 358:	07 d2       	rcall	.+1038   	; 0x768 <strcat>
 35a:	b7 01       	movw	r22, r14
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	78 df       	rcall	.-272    	; 0x250 <LCD_DisplayString>
 360:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <t_count>
 364:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <trigger>
 368:	04 c0       	rjmp	.+8      	; 0x372 <Tick4+0xf0>
 36a:	89 2b       	or	r24, r25
 36c:	11 f4       	brne	.+4      	; 0x372 <Tick4+0xf0>
 36e:	01 e0       	ldi	r16, 0x01	; 1
 370:	10 e0       	ldi	r17, 0x00	; 0
 372:	c8 01       	movw	r24, r16
 374:	a1 96       	adiw	r28, 0x21	; 33
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	08 95       	ret

0000038e <SPI_MasterInit>:
 38e:	80 eb       	ldi	r24, 0xB0	; 176
 390:	84 b9       	out	0x04, r24	; 4
 392:	81 e5       	ldi	r24, 0x51	; 81
 394:	8c bd       	out	0x2c, r24	; 44
 396:	08 95       	ret

00000398 <SPI_MasterTransmit>:
 398:	8e bd       	out	0x2e, r24	; 46
 39a:	0d b4       	in	r0, 0x2d	; 45
 39c:	07 fe       	sbrs	r0, 7
 39e:	fd cf       	rjmp	.-6      	; 0x39a <SPI_MasterTransmit+0x2>
 3a0:	08 95       	ret

000003a2 <Tick>:
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ec 01       	movw	r28, r24
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	21 f0       	breq	.+8      	; 0x3b4 <Tick+0x12>
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	91 05       	cpc	r25, r1
 3b0:	29 f0       	breq	.+10     	; 0x3bc <Tick+0x1a>
 3b2:	14 c0       	rjmp	.+40     	; 0x3dc <Tick+0x3a>
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <trigger>
 3ba:	12 c0       	rjmp	.+36     	; 0x3e0 <Tick+0x3e>
 3bc:	95 b1       	in	r25, 0x05	; 5
 3be:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <sN>
 3c2:	80 95       	com	r24
 3c4:	89 23       	and	r24, r25
 3c6:	85 b9       	out	0x05, r24	; 5
 3c8:	95 b1       	in	r25, 0x05	; 5
 3ca:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <sN>
 3ce:	80 95       	com	r24
 3d0:	89 2b       	or	r24, r25
 3d2:	85 b9       	out	0x05, r24	; 5
 3d4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>
 3d8:	df df       	rcall	.-66     	; 0x398 <SPI_MasterTransmit>
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <Tick+0x42>
 3dc:	89 2b       	or	r24, r25
 3de:	11 f4       	brne	.+4      	; 0x3e4 <Tick+0x42>
 3e0:	c2 e0       	ldi	r28, 0x02	; 2
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
 3e4:	ce 01       	movw	r24, r28
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <SPI_ServantReceive>:
}

char SPI_ServantReceive(void)
{
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)));
 3ec:	0d b4       	in	r0, 0x2d	; 45
 3ee:	07 fe       	sbrs	r0, 7
 3f0:	fd cf       	rjmp	.-6      	; 0x3ec <SPI_ServantReceive>
/* Return Data Register */
return SPDR;
 3f2:	8e b5       	in	r24, 0x2e	; 46
}
 3f4:	08 95       	ret

000003f6 <__vector_19>:

ISR(SPI_STC_vect){
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	0b b6       	in	r0, 0x3b	; 59
 402:	0f 92       	push	r0
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	cf 93       	push	r28
 41a:	ef 93       	push	r30
 41c:	ff 93       	push	r31
  receivedData = SPDR /SPI_ServantReceive();
 41e:	ce b5       	in	r28, 0x2e	; 46
 420:	e5 df       	rcall	.-54     	; 0x3ec <SPI_ServantReceive>
 422:	68 2f       	mov	r22, r24
 424:	8c 2f       	mov	r24, r28
 426:	8b d1       	rcall	.+790    	; 0x73e <__udivmodqi4>
 428:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <receivedData>
}
 42c:	ff 91       	pop	r31
 42e:	ef 91       	pop	r30
 430:	cf 91       	pop	r28
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	3f 91       	pop	r19
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	0b be       	out	0x3b, r0	; 59
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
 454:	8f ee       	ldi	r24, 0xEF	; 239
 456:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 458:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 45a:	30 9b       	sbis	0x06, 0	; 6
 45c:	29 c0       	rjmp	.+82     	; 0x4b0 <GetKeypadKey+0x5c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 45e:	31 9b       	sbis	0x06, 1	; 6
 460:	29 c0       	rjmp	.+82     	; 0x4b4 <GetKeypadKey+0x60>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 462:	32 9b       	sbis	0x06, 2	; 6
 464:	29 c0       	rjmp	.+82     	; 0x4b8 <GetKeypadKey+0x64>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 466:	33 9b       	sbis	0x06, 3	; 6
 468:	29 c0       	rjmp	.+82     	; 0x4bc <GetKeypadKey+0x68>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
 46a:	8f ed       	ldi	r24, 0xDF	; 223
 46c:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 46e:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 470:	30 9b       	sbis	0x06, 0	; 6
 472:	26 c0       	rjmp	.+76     	; 0x4c0 <GetKeypadKey+0x6c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 474:	31 9b       	sbis	0x06, 1	; 6
 476:	26 c0       	rjmp	.+76     	; 0x4c4 <GetKeypadKey+0x70>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 478:	32 9b       	sbis	0x06, 2	; 6
 47a:	26 c0       	rjmp	.+76     	; 0x4c8 <GetKeypadKey+0x74>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 47c:	33 9b       	sbis	0x06, 3	; 6
 47e:	26 c0       	rjmp	.+76     	; 0x4cc <GetKeypadKey+0x78>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
 480:	8f eb       	ldi	r24, 0xBF	; 191
 482:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 484:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 486:	30 9b       	sbis	0x06, 0	; 6
 488:	23 c0       	rjmp	.+70     	; 0x4d0 <GetKeypadKey+0x7c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 48a:	31 9b       	sbis	0x06, 1	; 6
 48c:	23 c0       	rjmp	.+70     	; 0x4d4 <GetKeypadKey+0x80>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 48e:	32 9b       	sbis	0x06, 2	; 6
 490:	23 c0       	rjmp	.+70     	; 0x4d8 <GetKeypadKey+0x84>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 492:	33 9b       	sbis	0x06, 3	; 6
 494:	23 c0       	rjmp	.+70     	; 0x4dc <GetKeypadKey+0x88>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
 496:	8f e7       	ldi	r24, 0x7F	; 127
 498:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 49a:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 49c:	30 9b       	sbis	0x06, 0	; 6
 49e:	20 c0       	rjmp	.+64     	; 0x4e0 <GetKeypadKey+0x8c>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 4a0:	31 9b       	sbis	0x06, 1	; 6
 4a2:	20 c0       	rjmp	.+64     	; 0x4e4 <GetKeypadKey+0x90>
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 4a4:	32 9b       	sbis	0x06, 2	; 6
 4a6:	20 c0       	rjmp	.+64     	; 0x4e8 <GetKeypadKey+0x94>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 4a8:	33 9b       	sbis	0x06, 3	; 6
 4aa:	20 c0       	rjmp	.+64     	; 0x4ec <GetKeypadKey+0x98>
	
	return '\0';
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	08 95       	ret
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 4b0:	81 e3       	ldi	r24, 0x31	; 49
 4b2:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 4b4:	84 e3       	ldi	r24, 0x34	; 52
 4b6:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 4b8:	87 e3       	ldi	r24, 0x37	; 55
 4ba:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 4bc:	8a e2       	ldi	r24, 0x2A	; 42
 4be:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 4c0:	82 e3       	ldi	r24, 0x32	; 50
 4c2:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 4c4:	85 e3       	ldi	r24, 0x35	; 53
 4c6:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 4c8:	88 e3       	ldi	r24, 0x38	; 56
 4ca:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 4cc:	80 e3       	ldi	r24, 0x30	; 48
 4ce:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 4d0:	83 e3       	ldi	r24, 0x33	; 51
 4d2:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 4d4:	86 e3       	ldi	r24, 0x36	; 54
 4d6:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 4d8:	89 e3       	ldi	r24, 0x39	; 57
 4da:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 4dc:	83 e2       	ldi	r24, 0x23	; 35
 4de:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 4e0:	81 e4       	ldi	r24, 0x41	; 65
 4e2:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 4e4:	82 e4       	ldi	r24, 0x42	; 66
 4e6:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 4e8:	83 e4       	ldi	r24, 0x43	; 67
 4ea:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 4ec:	84 e4       	ldi	r24, 0x44	; 68
	
	return '\0';
}
 4ee:	08 95       	ret

000004f0 <main>:
    }
    return state;
}

int main(void)
{
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <main+0x6>
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <main+0x8>
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <main+0xa>
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF; PORTA = 0x10;
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	81 b9       	out	0x01, r24	; 1
 502:	90 e1       	ldi	r25, 0x10	; 16
 504:	92 b9       	out	0x02, r25	; 2
    //DDRB = 0xFE; PORTB = 0x00;
    DDRC = 0xF0; PORTC = 0x00;
 506:	10 ef       	ldi	r17, 0xF0	; 240
 508:	17 b9       	out	0x07, r17	; 7
 50a:	18 b8       	out	0x08, r1	; 8
    DDRD = 0xFF; PORTD = 0x00;
 50c:	8a b9       	out	0x0a, r24	; 10
 50e:	1b b8       	out	0x0b, r1	; 11
    
    TimerSet(50);
 510:	62 e3       	ldi	r22, 0x32	; 50
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	eb dd       	rcall	.-1066   	; 0xf0 <TimerSet>
    TimerOn();
 51a:	fb dd       	rcall	.-1034   	; 0x112 <TimerOn>
    
    LCD_init();
 51c:	81 de       	rcall	.-766    	; 0x220 <LCD_init>
 51e:	75 de       	rcall	.-790    	; 0x20a <LCD_ClearScreen>
    LCD_ClearScreen();
 520:	10 93 56 01 	sts	0x0156, r17	; 0x800156 <maskUp>
    //LCD_Cursor(1);   
    //LCD_DisplayString( 1, (unsigned char*)"YO");
    
    maskUp = 0xF0;
 524:	8f e0       	ldi	r24, 0x0F	; 15
 526:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <maskLow>
    maskLow = 0x0F;
 52a:	86 e0       	ldi	r24, 0x06	; 6
 52c:	ec e1       	ldi	r30, 0x1C	; 28
    unsigned long t1 = 3;
    unsigned long t3 = 1;
    unsigned long t4 = 2;
    
    static task task1, task3, task4;
    task *tasks[] = { &task1, &task3, &task4};
 52e:	f1 e0       	ldi	r31, 0x01	; 1
 530:	de 01       	movw	r26, r28
 532:	11 96       	adiw	r26, 0x01	; 1
 534:	01 90       	ld	r0, Z+
 536:	0d 92       	st	X+, r0
 538:	8a 95       	dec	r24
 53a:	e1 f7       	brne	.-8      	; 0x534 <main+0x44>
 53c:	e8 e3       	ldi	r30, 0x38	; 56
 53e:	f1 e0       	ldi	r31, 0x01	; 1
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    
    task1.state = 0;//Task initial state.
 540:	10 82       	st	Z, r1
 542:	83 e0       	ldi	r24, 0x03	; 3
 544:	90 e0       	ldi	r25, 0x00	; 0
    task1.period = t1;//Task Period.
 546:	a0 e0       	ldi	r26, 0x00	; 0
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	81 83       	std	Z+1, r24	; 0x01
 54c:	92 83       	std	Z+2, r25	; 0x02
 54e:	a3 83       	std	Z+3, r26	; 0x03
 550:	b4 83       	std	Z+4, r27	; 0x04
 552:	85 83       	std	Z+5, r24	; 0x05
 554:	96 83       	std	Z+6, r25	; 0x06
    task1.elapsedTime = t1; // Task current elasped time.
 556:	a7 83       	std	Z+7, r26	; 0x07
 558:	b0 87       	std	Z+8, r27	; 0x08
 55a:	81 ed       	ldi	r24, 0xD1	; 209
 55c:	91 e0       	ldi	r25, 0x01	; 1
    task1.TickFct = &Tick; // Function pointer for the tick.
 55e:	92 87       	std	Z+10, r25	; 0x0a
 560:	81 87       	std	Z+9, r24	; 0x09
 562:	ed e2       	ldi	r30, 0x2D	; 45
 564:	f1 e0       	ldi	r31, 0x01	; 1
    
    task3.state = 0;//Task initial state.
 566:	10 82       	st	Z, r1
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
    task3.period = t3;//Task Period.
 56c:	a0 e0       	ldi	r26, 0x00	; 0
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	81 83       	std	Z+1, r24	; 0x01
 572:	92 83       	std	Z+2, r25	; 0x02
 574:	a3 83       	std	Z+3, r26	; 0x03
 576:	b4 83       	std	Z+4, r27	; 0x04
 578:	85 83       	std	Z+5, r24	; 0x05
 57a:	96 83       	std	Z+6, r25	; 0x06
    task3.elapsedTime = t3; // Task current elapsed time.
 57c:	a7 83       	std	Z+7, r26	; 0x07
 57e:	b0 87       	std	Z+8, r27	; 0x08
 580:	87 e8       	ldi	r24, 0x87	; 135
 582:	93 e0       	ldi	r25, 0x03	; 3
    task3.TickFct = &Tick3; // Function pointer for the tick.
 584:	92 87       	std	Z+10, r25	; 0x0a
 586:	81 87       	std	Z+9, r24	; 0x09
 588:	e2 e2       	ldi	r30, 0x22	; 34
 58a:	f1 e0       	ldi	r31, 0x01	; 1
    
    task4.state = 0;//Task initial state.
 58c:	10 82       	st	Z, r1
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	90 e0       	ldi	r25, 0x00	; 0
    task4.period = t4;//Task Period.
 592:	a0 e0       	ldi	r26, 0x00	; 0
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	81 83       	std	Z+1, r24	; 0x01
 598:	92 83       	std	Z+2, r25	; 0x02
 59a:	a3 83       	std	Z+3, r26	; 0x03
 59c:	b4 83       	std	Z+4, r27	; 0x04
 59e:	85 83       	std	Z+5, r24	; 0x05
 5a0:	96 83       	std	Z+6, r25	; 0x06
    task4.elapsedTime = t4; // Task current elapsed time.
 5a2:	a7 83       	std	Z+7, r26	; 0x07
 5a4:	b0 87       	std	Z+8, r27	; 0x08
 5a6:	81 e4       	ldi	r24, 0x41	; 65
 5a8:	91 e0       	ldi	r25, 0x01	; 1
    task4.TickFct = &Tick4; // Function pointer for the tick.
 5aa:	92 87       	std	Z+10, r25	; 0x0a
 5ac:	81 87       	std	Z+9, r24	; 0x09
 5ae:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <data>
    
    data = 0;
 5b2:	18 9b       	sbis	0x03, 0	; 3
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <main+0xce>
    
    if(PINB & 0x01) master = 0xFF;
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <master>
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <main+0xd2>
 5be:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <master>
    else master = 0x00;
 5c2:	e5 de       	rcall	.-566    	; 0x38e <SPI_MasterInit>
    
    SPI_MasterInit();
 5c4:	84 b1       	in	r24, 0x04	; 4
 5c6:	8f 60       	ori	r24, 0x0F	; 15
    DDRB = DDRB | 0x0F;
 5c8:	84 b9       	out	0x04, r24	; 4
 5ca:	7e 01       	movw	r14, r28
 5cc:	87 e0       	ldi	r24, 0x07	; 7
 5ce:	e8 0e       	add	r14, r24
 5d0:	f1 1c       	adc	r15, r1
 5d2:	de 01       	movw	r26, r28
 5d4:	11 96       	adiw	r26, 0x01	; 1
 5d6:	6d 01       	movw	r12, r26
 5d8:	f6 01       	movw	r30, r12
 5da:	01 91       	ld	r16, Z+
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 5dc:	11 91       	ld	r17, Z+
 5de:	6f 01       	movw	r12, r30
 5e0:	d8 01       	movw	r26, r16
 5e2:	15 96       	adiw	r26, 0x05	; 5
 5e4:	4d 91       	ld	r20, X+
 5e6:	5d 91       	ld	r21, X+
 5e8:	6d 91       	ld	r22, X+
 5ea:	7c 91       	ld	r23, X
 5ec:	18 97       	sbiw	r26, 0x08	; 8
 5ee:	11 96       	adiw	r26, 0x01	; 1
 5f0:	8d 91       	ld	r24, X+
 5f2:	9d 91       	ld	r25, X+
 5f4:	0d 90       	ld	r0, X+
 5f6:	bc 91       	ld	r27, X
 5f8:	a0 2d       	mov	r26, r0
 5fa:	48 17       	cp	r20, r24
 5fc:	59 07       	cpc	r21, r25
 5fe:	6a 07       	cpc	r22, r26
 600:	7b 07       	cpc	r23, r27
 602:	81 f4       	brne	.+32     	; 0x624 <main+0x134>
 604:	f8 01       	movw	r30, r16
 606:	80 81       	ld	r24, Z
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 608:	01 84       	ldd	r0, Z+9	; 0x09
 60a:	f2 85       	ldd	r31, Z+10	; 0x0a
 60c:	e0 2d       	mov	r30, r0
 60e:	08 2e       	mov	r0, r24
 610:	00 0c       	add	r0, r0
 612:	99 0b       	sbc	r25, r25
 614:	09 95       	icall
 616:	d8 01       	movw	r26, r16
 618:	8c 93       	st	X, r24
 61a:	f8 01       	movw	r30, r16
 61c:	15 82       	std	Z+5, r1	; 0x05
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 61e:	16 82       	std	Z+6, r1	; 0x06
 620:	17 82       	std	Z+7, r1	; 0x07
 622:	10 86       	std	Z+8, r1	; 0x08
 624:	f8 01       	movw	r30, r16
 626:	85 81       	ldd	r24, Z+5	; 0x05
            }
            tasks[i]->elapsedTime += 1;
 628:	96 81       	ldd	r25, Z+6	; 0x06
 62a:	a7 81       	ldd	r26, Z+7	; 0x07
 62c:	b0 85       	ldd	r27, Z+8	; 0x08
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	a1 1d       	adc	r26, r1
 632:	b1 1d       	adc	r27, r1
 634:	85 83       	std	Z+5, r24	; 0x05
 636:	96 83       	std	Z+6, r25	; 0x06
 638:	a7 83       	std	Z+7, r26	; 0x07
 63a:	b0 87       	std	Z+8, r27	; 0x08
 63c:	ce 14       	cp	r12, r14
 63e:	df 04       	cpc	r13, r15
    DDRB = DDRB | 0x0F;
    
    unsigned short i = 0; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
 640:	59 f6       	brne	.-106    	; 0x5d8 <main+0xe8>
 642:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <TimerFlag>
                tasks[i]->elapsedTime = 0;
            }
            tasks[i]->elapsedTime += 1;
        }

        while(!TimerFlag){}
 646:	88 23       	and	r24, r24
 648:	e1 f3       	breq	.-8      	; 0x642 <main+0x152>
 64a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <TimerFlag>
        TimerFlag = 0;
 64e:	c1 cf       	rjmp	.-126    	; 0x5d2 <main+0xe2>

00000650 <keyAssign>:
 650:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <key>
    return 0;
}

void keyAssign(){
    
    switch(key){
 654:	8e 2f       	mov	r24, r30
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	fc 01       	movw	r30, r24
 65a:	f1 97       	sbiw	r30, 0x31	; 49
 65c:	e4 31       	cpi	r30, 0x14	; 20
 65e:	f1 05       	cpc	r31, r1
 660:	08 f0       	brcs	.+2      	; 0x664 <keyAssign+0x14>
 662:	49 c0       	rjmp	.+146    	; 0x6f6 <keyAssign+0xa6>
 664:	ea 5b       	subi	r30, 0xBA	; 186
 666:	ff 4f       	sbci	r31, 0xFF	; 255
 668:	76 c0       	rjmp	.+236    	; 0x756 <__tablejump2__>
        case 'A':
            pattern = 0;
 66a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <pattern>
            p_size = 2;
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <p_size>
        break;
 674:	40 c0       	rjmp	.+128    	; 0x6f6 <keyAssign+0xa6>
        case 'B':
            pattern = 1;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <pattern>
            p_size = 2;
 67c:	82 e0       	ldi	r24, 0x02	; 2
 67e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <p_size>
        break;
 682:	39 c0       	rjmp	.+114    	; 0x6f6 <keyAssign+0xa6>
        case 'C':
            pattern = 2;
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <pattern>
            p_size = 14;
 68a:	8e e0       	ldi	r24, 0x0E	; 14
 68c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <p_size>
        break;
 690:	32 c0       	rjmp	.+100    	; 0x6f6 <keyAssign+0xa6>
        case 'D':
            pattern = 3;
 692:	83 e0       	ldi	r24, 0x03	; 3
 694:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <pattern>
            p_size = 17;
 698:	81 e1       	ldi	r24, 0x11	; 17
 69a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <p_size>
        break;
 69e:	2b c0       	rjmp	.+86     	; 0x6f6 <keyAssign+0xa6>
        case '1':
            speed = 0;
 6a0:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <speed>
        break;
 6a4:	28 c0       	rjmp	.+80     	; 0x6f6 <keyAssign+0xa6>
        case '2':
            speed = 1;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <speed>
        break;
 6ac:	24 c0       	rjmp	.+72     	; 0x6f6 <keyAssign+0xa6>
            case '3':
            speed = 2;
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <speed>
        break;
 6b4:	20 c0       	rjmp	.+64     	; 0x6f6 <keyAssign+0xa6>
        case '4':
            speed = 3;
 6b6:	83 e0       	ldi	r24, 0x03	; 3
 6b8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <speed>
        break;
 6bc:	1c c0       	rjmp	.+56     	; 0x6f6 <keyAssign+0xa6>
        case '5':
            speed = 4;
 6be:	84 e0       	ldi	r24, 0x04	; 4
 6c0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <speed>
        break;
 6c4:	18 c0       	rjmp	.+48     	; 0x6f6 <keyAssign+0xa6>
        case '6':
            speed = 5;
 6c6:	85 e0       	ldi	r24, 0x05	; 5
 6c8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <speed>
        break;
 6cc:	14 c0       	rjmp	.+40     	; 0x6f6 <keyAssign+0xa6>
        case '7':
            slave = 1;
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <slave>
            sN = 16;
 6d4:	80 e1       	ldi	r24, 0x10	; 16
 6d6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <sN>
        break;
 6da:	0d c0       	rjmp	.+26     	; 0x6f6 <keyAssign+0xa6>
        case '8':
            slave = 2;
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <slave>
            sN = 8;
 6e2:	88 e0       	ldi	r24, 0x08	; 8
 6e4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <sN>
        break;
 6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <keyAssign+0xa6>
        case '9':
            slave = 3;
 6ea:	83 e0       	ldi	r24, 0x03	; 3
 6ec:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <slave>
            sN = 4;
 6f0:	84 e0       	ldi	r24, 0x04	; 4
 6f2:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <sN>
        break;
        default:
        break;
    }
    
    data =  ((pattern << 4)) | speed ;
 6f6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pattern>
 6fa:	20 e1       	ldi	r18, 0x10	; 16
 6fc:	82 9f       	mul	r24, r18
 6fe:	c0 01       	movw	r24, r0
 700:	11 24       	eor	r1, r1
 702:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <speed>
 706:	89 2b       	or	r24, r25
 708:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <data>
 70c:	08 95       	ret

0000070e <Tick3>:
    return state;
}



int Tick3(int state){
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	ec 01       	movw	r28, r24
    
    switch(state){
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	91 05       	cpc	r25, r1
 718:	51 f4       	brne	.+20     	; 0x72e <Tick3+0x20>
        case START3:
        break;
        case ON:      
                key = GetKeypadKey();
 71a:	9c de       	rcall	.-712    	; 0x454 <GetKeypadKey>
 71c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <key>
                if(key != '\0' ){
 720:	88 23       	and	r24, r24
                    keyAssign();
 722:	49 f0       	breq	.+18     	; 0x736 <Tick3+0x28>
 724:	95 df       	rcall	.-214    	; 0x650 <keyAssign>
                    trigger = 0xFF;
 726:	8f ef       	ldi	r24, 0xFF	; 255
 728:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <trigger>
 72c:	04 c0       	rjmp	.+8      	; 0x736 <Tick3+0x28>
        break;
        default:
        break;
    }
    
    switch(state){
 72e:	89 2b       	or	r24, r25
 730:	11 f4       	brne	.+4      	; 0x736 <Tick3+0x28>
        case START3:
            state = ON;
 732:	c1 e0       	ldi	r28, 0x01	; 1
 734:	d0 e0       	ldi	r29, 0x00	; 0
        case ON:
        break;
        default:break;
    }
    return state;
}
 736:	ce 01       	movw	r24, r28
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	08 95       	ret

0000073e <__udivmodqi4>:
 73e:	99 1b       	sub	r25, r25
 740:	79 e0       	ldi	r23, 0x09	; 9
 742:	04 c0       	rjmp	.+8      	; 0x74c <__udivmodqi4_ep>

00000744 <__udivmodqi4_loop>:
 744:	99 1f       	adc	r25, r25
 746:	96 17       	cp	r25, r22
 748:	08 f0       	brcs	.+2      	; 0x74c <__udivmodqi4_ep>
 74a:	96 1b       	sub	r25, r22

0000074c <__udivmodqi4_ep>:
 74c:	88 1f       	adc	r24, r24
 74e:	7a 95       	dec	r23
 750:	c9 f7       	brne	.-14     	; 0x744 <__udivmodqi4_loop>
 752:	80 95       	com	r24
 754:	08 95       	ret

00000756 <__tablejump2__>:
 756:	ee 0f       	add	r30, r30
 758:	ff 1f       	adc	r31, r31
 75a:	00 24       	eor	r0, r0
 75c:	00 1c       	adc	r0, r0
 75e:	0b be       	out	0x3b, r0	; 59
 760:	07 90       	elpm	r0, Z+
 762:	f6 91       	elpm	r31, Z
 764:	e0 2d       	mov	r30, r0
 766:	09 94       	ijmp

00000768 <strcat>:
 768:	fb 01       	movw	r30, r22
 76a:	dc 01       	movw	r26, r24
 76c:	0d 90       	ld	r0, X+
 76e:	00 20       	and	r0, r0
 770:	e9 f7       	brne	.-6      	; 0x76c <strcat+0x4>
 772:	11 97       	sbiw	r26, 0x01	; 1
 774:	01 90       	ld	r0, Z+
 776:	0d 92       	st	X+, r0
 778:	00 20       	and	r0, r0
 77a:	e1 f7       	brne	.-8      	; 0x774 <strcat+0xc>
 77c:	08 95       	ret

0000077e <_exit>:
 77e:	f8 94       	cli

00000780 <__stop_program>:
 780:	ff cf       	rjmp	.-2      	; 0x780 <__stop_program>
