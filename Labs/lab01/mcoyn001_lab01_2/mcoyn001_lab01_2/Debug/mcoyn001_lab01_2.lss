
mcoyn001_lab01_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004aa  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800104  00800104  00000542  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de4  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000974  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068b  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000573  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000580  00000000  00000000  00002b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000308f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	0a c1       	rjmp	.+532    	; 0x24a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ea       	ldi	r30, 0xAA	; 170
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3e d1       	rcall	.+636    	; 0x340 <main>
  c4:	f0 c1       	rjmp	.+992    	; 0x4a6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Tick>:
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	69 f0       	breq	.+26     	; 0xe8 <Tick+0x20>
  ce:	1c f4       	brge	.+6      	; 0xd6 <Tick+0xe>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <Tick+0x1c>
  d4:	4c c0       	rjmp	.+152    	; 0x16e <Tick+0xa6>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	91 05       	cpc	r25, r1
  da:	e1 f0       	breq	.+56     	; 0x114 <Tick+0x4c>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	79 f1       	breq	.+94     	; 0x140 <Tick+0x78>
  e2:	45 c0       	rjmp	.+138    	; 0x16e <Tick+0xa6>
  e4:	15 b8       	out	0x05, r1	; 5
  e6:	51 c0       	rjmp	.+162    	; 0x18a <Tick+0xc2>
  e8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <button>
  ec:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <button+0x1>
  f0:	89 2b       	or	r24, r25
  f2:	59 f0       	breq	.+22     	; 0x10a <Tick+0x42>
  f4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <score>
  f8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <score+0x1>
  fc:	00 97       	sbiw	r24, 0x00	; 0
  fe:	29 f0       	breq	.+10     	; 0x10a <Tick+0x42>
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <score+0x1>
 106:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <score>
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	88 7f       	andi	r24, 0xF8	; 248
 10e:	85 b9       	out	0x05, r24	; 5
 110:	28 9a       	sbi	0x05, 0	; 5
 112:	3e c0       	rjmp	.+124    	; 0x190 <Tick+0xc8>
 114:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <button>
 118:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <button+0x1>
 11c:	89 2b       	or	r24, r25
 11e:	59 f0       	breq	.+22     	; 0x136 <Tick+0x6e>
 120:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <score>
 124:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <score+0x1>
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	29 f0       	breq	.+10     	; 0x136 <Tick+0x6e>
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <score+0x1>
 132:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <score>
 136:	85 b1       	in	r24, 0x05	; 5
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	29 9a       	sbi	0x05, 1	; 5
 13e:	2b c0       	rjmp	.+86     	; 0x196 <Tick+0xce>
 140:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <button>
 144:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <button+0x1>
 148:	89 2b       	or	r24, r25
 14a:	61 f0       	breq	.+24     	; 0x164 <Tick+0x9c>
 14c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <score>
 150:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <score+0x1>
 154:	89 30       	cpi	r24, 0x09	; 9
 156:	91 05       	cpc	r25, r1
 158:	28 f4       	brcc	.+10     	; 0x164 <Tick+0x9c>
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <score+0x1>
 160:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <score>
 164:	85 b1       	in	r24, 0x05	; 5
 166:	88 7f       	andi	r24, 0xF8	; 248
 168:	85 b9       	out	0x05, r24	; 5
 16a:	2a 9a       	sbi	0x05, 2	; 5
 16c:	17 c0       	rjmp	.+46     	; 0x19c <Tick+0xd4>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	91 05       	cpc	r25, r1
 172:	71 f0       	breq	.+28     	; 0x190 <Tick+0xc8>
 174:	1c f4       	brge	.+6      	; 0x17c <Tick+0xb4>
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	99 f4       	brne	.+38     	; 0x1a0 <Tick+0xd8>
 17a:	07 c0       	rjmp	.+14     	; 0x18a <Tick+0xc2>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	91 05       	cpc	r25, r1
 180:	51 f0       	breq	.+20     	; 0x196 <Tick+0xce>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	91 05       	cpc	r25, r1
 186:	61 f4       	brne	.+24     	; 0x1a0 <Tick+0xd8>
 188:	09 c0       	rjmp	.+18     	; 0x19c <Tick+0xd4>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	08 95       	ret
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	08 95       	ret
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	08 95       	ret

000001a2 <Tick2>:
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 05       	cpc	r25, r1
 1a6:	39 f0       	breq	.+14     	; 0x1b6 <Tick2+0x14>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	91 05       	cpc	r25, r1
 1ac:	31 f0       	breq	.+12     	; 0x1ba <Tick2+0x18>
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	31 f4       	brne	.+12     	; 0x1be <Tick2+0x1c>
 1b2:	15 b8       	out	0x05, r1	; 5
 1b4:	0c c0       	rjmp	.+24     	; 0x1ce <Tick2+0x2c>
 1b6:	2b 9a       	sbi	0x05, 3	; 5
 1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <Tick2+0x32>
 1ba:	2b 98       	cbi	0x05, 3	; 5
 1bc:	0e c0       	rjmp	.+28     	; 0x1da <Tick2+0x38>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	91 05       	cpc	r25, r1
 1c2:	41 f0       	breq	.+16     	; 0x1d4 <Tick2+0x32>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	91 05       	cpc	r25, r1
 1c8:	41 f0       	breq	.+16     	; 0x1da <Tick2+0x38>
 1ca:	00 97       	sbiw	r24, 0x00	; 0
 1cc:	41 f4       	brne	.+16     	; 0x1de <Tick2+0x3c>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 95       	ret
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	08 95       	ret
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	08 95       	ret

000001e0 <TimerSet>:
 1e0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1e4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1ec:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1f0:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <_avr_timer_cntcurr>
 1f4:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <_avr_timer_cntcurr+0x1>
 1f8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr+0x2>
 1fc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x3>
 200:	08 95       	ret

00000202 <TimerOn>:
 202:	8b e0       	ldi	r24, 0x0B	; 11
 204:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 208:	8d e7       	ldi	r24, 0x7D	; 125
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 210:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 21a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 21e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 226:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 22a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 22e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 232:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 236:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 23a:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 23e:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
 242:	8f b7       	in	r24, 0x3f	; 63
 244:	80 68       	ori	r24, 0x80	; 128
 246:	8f bf       	out	0x3f, r24	; 63
 248:	08 95       	ret

0000024a <__vector_13>:
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	af 93       	push	r26
 25a:	bf 93       	push	r27
 25c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_avr_timer_cntcurr>
 260:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <_avr_timer_cntcurr+0x1>
 264:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <_avr_timer_cntcurr+0x2>
 268:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <_avr_timer_cntcurr+0x3>
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	a1 09       	sbc	r26, r1
 270:	b1 09       	sbc	r27, r1
 272:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 276:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 27a:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 27e:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
 282:	89 2b       	or	r24, r25
 284:	8a 2b       	or	r24, r26
 286:	8b 2b       	or	r24, r27
 288:	99 f4       	brne	.+38     	; 0x2b0 <__vector_13+0x66>
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <TimerFlag>
 290:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 294:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 298:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 29c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2a0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 2a4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 2a8:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 2ac:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <delay_ms>:
 2c2:	18 16       	cp	r1, r24
 2c4:	19 06       	cpc	r1, r25
 2c6:	5c f0       	brlt	.+22     	; 0x2de <delay_ms+0x1c>
 2c8:	08 95       	ret
 2ca:	00 00       	nop
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	31 09       	sbc	r19, r1
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <delay_ms+0x8>
 2d2:	4f 5f       	subi	r20, 0xFF	; 255
 2d4:	5f 4f       	sbci	r21, 0xFF	; 255
 2d6:	84 17       	cp	r24, r20
 2d8:	95 07       	cpc	r25, r21
 2da:	19 f4       	brne	.+6      	; 0x2e2 <delay_ms+0x20>
 2dc:	08 95       	ret
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	27 e0       	ldi	r18, 0x07	; 7
 2e4:	33 e0       	ldi	r19, 0x03	; 3
 2e6:	f1 cf       	rjmp	.-30     	; 0x2ca <delay_ms+0x8>

000002e8 <LCD_WriteCommand>:
 2e8:	10 98       	cbi	0x02, 0	; 2
 2ea:	8b b9       	out	0x0b, r24	; 11
 2ec:	11 9a       	sbi	0x02, 1	; 2
 2ee:	00 00       	nop
 2f0:	11 98       	cbi	0x02, 1	; 2
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	e5 cf       	rjmp	.-54     	; 0x2c2 <delay_ms>
 2f8:	08 95       	ret

000002fa <LCD_ClearScreen>:
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	f5 cf       	rjmp	.-22     	; 0x2e8 <LCD_WriteCommand>
 2fe:	08 95       	ret

00000300 <LCD_Cursor>:
 300:	81 31       	cpi	r24, 0x11	; 17
 302:	18 f4       	brcc	.+6      	; 0x30a <LCD_Cursor+0xa>
 304:	81 58       	subi	r24, 0x81	; 129
 306:	f0 cf       	rjmp	.-32     	; 0x2e8 <LCD_WriteCommand>
 308:	08 95       	ret
 30a:	81 55       	subi	r24, 0x51	; 81
 30c:	ed cf       	rjmp	.-38     	; 0x2e8 <LCD_WriteCommand>
 30e:	08 95       	ret

00000310 <LCD_init>:
 310:	84 e6       	ldi	r24, 0x64	; 100
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	d6 df       	rcall	.-84     	; 0x2c2 <delay_ms>
 316:	88 e3       	ldi	r24, 0x38	; 56
 318:	e7 df       	rcall	.-50     	; 0x2e8 <LCD_WriteCommand>
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	e5 df       	rcall	.-54     	; 0x2e8 <LCD_WriteCommand>
 31e:	8f e0       	ldi	r24, 0x0F	; 15
 320:	e3 df       	rcall	.-58     	; 0x2e8 <LCD_WriteCommand>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	e1 df       	rcall	.-62     	; 0x2e8 <LCD_WriteCommand>
 326:	8a e0       	ldi	r24, 0x0A	; 10
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	cb cf       	rjmp	.-106    	; 0x2c2 <delay_ms>
 32c:	08 95       	ret

0000032e <LCD_WriteData>:
 32e:	10 9a       	sbi	0x02, 0	; 2
 330:	8b b9       	out	0x0b, r24	; 11
 332:	11 9a       	sbi	0x02, 1	; 2
 334:	00 00       	nop
 336:	11 98       	cbi	0x02, 1	; 2
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	c2 cf       	rjmp	.-124    	; 0x2c2 <delay_ms>
 33e:	08 95       	ret

00000340 <main>:
          default:break;
      }
      return state;
  }
int main(void)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	00 d0       	rcall	.+0      	; 0x346 <main+0x6>
 346:	00 d0       	rcall	.+0      	; 0x348 <main+0x8>
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFB; PORTA = 0x00;
 34c:	8b ef       	ldi	r24, 0xFB	; 251
 34e:	81 b9       	out	0x01, r24	; 1
 350:	12 b8       	out	0x02, r1	; 2
    DDRB = 0xFF; PORTB = 0x00;
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	84 b9       	out	0x04, r24	; 4
 356:	15 b8       	out	0x05, r1	; 5
    DDRC = 0xFF; PORTC = 0x00;
 358:	87 b9       	out	0x07, r24	; 7
 35a:	18 b8       	out	0x08, r1	; 8
    DDRD = 0xFF; PORTD = 0x00;
 35c:	8a b9       	out	0x0a, r24	; 10
 35e:	1b b8       	out	0x0b, r1	; 11
    
    score = 0;
 360:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <score+0x1>
 364:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <score>
    
    TimerSet(500);
 368:	64 ef       	ldi	r22, 0xF4	; 244
 36a:	71 e0       	ldi	r23, 0x01	; 1
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	37 df       	rcall	.-402    	; 0x1e0 <TimerSet>
    TimerOn();
 372:	47 df       	rcall	.-370    	; 0x202 <TimerOn>
    
    LCD_init();
 374:	cd df       	rcall	.-102    	; 0x310 <LCD_init>
    LCD_ClearScreen();
 376:	c1 df       	rcall	.-126    	; 0x2fa <LCD_ClearScreen>
 378:	81 e0       	ldi	r24, 0x01	; 1
    LCD_Cursor(1);
 37a:	c2 df       	rcall	.-124    	; 0x300 <LCD_Cursor>
 37c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <score>
    LCD_WriteData(48 + score);
 380:	80 5d       	subi	r24, 0xD0	; 208
 382:	d5 df       	rcall	.-86     	; 0x32e <LCD_WriteData>
 384:	af e0       	ldi	r26, 0x0F	; 15
 386:	b1 e0       	ldi	r27, 0x01	; 1

    unsigned long t1 = 1;
    unsigned long t2 = 2;
    
    static task task1, task2;
    task *tasks[] = { &task1, &task2};
 388:	ba 83       	std	Y+2, r27	; 0x02
 38a:	a9 83       	std	Y+1, r26	; 0x01
 38c:	e4 e0       	ldi	r30, 0x04	; 4
 38e:	f1 e0       	ldi	r31, 0x01	; 1
 390:	fc 83       	std	Y+4, r31	; 0x04
 392:	eb 83       	std	Y+3, r30	; 0x03
 394:	1c 92       	st	X, r1
 396:	41 e0       	ldi	r20, 0x01	; 1
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    
    task1.state = 0;//Task initial state.
 398:	50 e0       	ldi	r21, 0x00	; 0
    task1.period = t1;//Task Period.
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	11 96       	adiw	r26, 0x01	; 1
 3a0:	4d 93       	st	X+, r20
 3a2:	5d 93       	st	X+, r21
 3a4:	6d 93       	st	X+, r22
 3a6:	7c 93       	st	X, r23
 3a8:	14 97       	sbiw	r26, 0x04	; 4
 3aa:	15 96       	adiw	r26, 0x05	; 5
 3ac:	4d 93       	st	X+, r20
    task1.elapsedTime = t1; // Task current elasped time.
 3ae:	5d 93       	st	X+, r21
 3b0:	6d 93       	st	X+, r22
 3b2:	7c 93       	st	X, r23
 3b4:	18 97       	sbiw	r26, 0x08	; 8
 3b6:	84 e6       	ldi	r24, 0x64	; 100
 3b8:	90 e0       	ldi	r25, 0x00	; 0
    task1.TickFct = &Tick; // Function pointer for the tick.
 3ba:	1a 96       	adiw	r26, 0x0a	; 10
 3bc:	9c 93       	st	X, r25
 3be:	8e 93       	st	-X, r24
 3c0:	19 97       	sbiw	r26, 0x09	; 9
 3c2:	10 82       	st	Z, r1
 3c4:	82 e0       	ldi	r24, 0x02	; 2
    
    task2.state = 0;//Task initial state.
 3c6:	90 e0       	ldi	r25, 0x00	; 0
    task2.period = t2;//Task Period.
 3c8:	a0 e0       	ldi	r26, 0x00	; 0
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	81 83       	std	Z+1, r24	; 0x01
 3ce:	92 83       	std	Z+2, r25	; 0x02
 3d0:	a3 83       	std	Z+3, r26	; 0x03
 3d2:	b4 83       	std	Z+4, r27	; 0x04
 3d4:	85 83       	std	Z+5, r24	; 0x05
 3d6:	96 83       	std	Z+6, r25	; 0x06
    task2.elapsedTime = t2; // Task current elapsed time.
 3d8:	a7 83       	std	Z+7, r26	; 0x07
 3da:	b0 87       	std	Z+8, r27	; 0x08
 3dc:	81 ed       	ldi	r24, 0xD1	; 209
 3de:	90 e0       	ldi	r25, 0x00	; 0
    task2.TickFct = &Tick2; // Function pointer for the tick.
 3e0:	92 87       	std	Z+10, r25	; 0x0a
 3e2:	81 87       	std	Z+9, r24	; 0x09
 3e4:	6e 01       	movw	r12, r28
 3e6:	85 e0       	ldi	r24, 0x05	; 5
 3e8:	c8 0e       	add	r12, r24
 3ea:	d1 1c       	adc	r13, r1
 3ec:	aa 24       	eor	r10, r10
 3ee:	a3 94       	inc	r10
        
        button = 0;
        while(!TimerFlag){
            butt = ( !(PINA & 0x04) );
            if(butt){
                button = 1;
 3f0:	b1 2c       	mov	r11, r1
 3f2:	0f 2e       	mov	r0, r31
 3f4:	f1 e2       	ldi	r31, 0x21	; 33
            }
        };
        TimerFlag = 0;
        PORTC = score;
 3f6:	ef 2e       	mov	r14, r31
 3f8:	f1 e0       	ldi	r31, 0x01	; 1
 3fa:	ff 2e       	mov	r15, r31
 3fc:	f0 2d       	mov	r31, r0
 3fe:	de 01       	movw	r26, r28
 400:	11 96       	adiw	r26, 0x01	; 1
 402:	4d 01       	movw	r8, r26
 404:	f4 01       	movw	r30, r8
 406:	01 91       	ld	r16, Z+
    unsigned short i; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 408:	11 91       	ld	r17, Z+
 40a:	4f 01       	movw	r8, r30
 40c:	d8 01       	movw	r26, r16
 40e:	15 96       	adiw	r26, 0x05	; 5
 410:	4d 91       	ld	r20, X+
 412:	5d 91       	ld	r21, X+
 414:	6d 91       	ld	r22, X+
 416:	7c 91       	ld	r23, X
 418:	18 97       	sbiw	r26, 0x08	; 8
 41a:	11 96       	adiw	r26, 0x01	; 1
 41c:	8d 91       	ld	r24, X+
 41e:	9d 91       	ld	r25, X+
 420:	0d 90       	ld	r0, X+
 422:	bc 91       	ld	r27, X
 424:	a0 2d       	mov	r26, r0
 426:	48 17       	cp	r20, r24
 428:	59 07       	cpc	r21, r25
 42a:	6a 07       	cpc	r22, r26
 42c:	7b 07       	cpc	r23, r27
 42e:	81 f4       	brne	.+32     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 430:	f8 01       	movw	r30, r16
 432:	80 81       	ld	r24, Z
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 434:	01 84       	ldd	r0, Z+9	; 0x09
 436:	f2 85       	ldd	r31, Z+10	; 0x0a
 438:	e0 2d       	mov	r30, r0
 43a:	08 2e       	mov	r0, r24
 43c:	00 0c       	add	r0, r0
 43e:	99 0b       	sbc	r25, r25
 440:	09 95       	icall
 442:	d8 01       	movw	r26, r16
 444:	8c 93       	st	X, r24
 446:	f8 01       	movw	r30, r16
 448:	15 82       	std	Z+5, r1	; 0x05
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 44a:	16 82       	std	Z+6, r1	; 0x06
 44c:	17 82       	std	Z+7, r1	; 0x07
 44e:	10 86       	std	Z+8, r1	; 0x08
 450:	f8 01       	movw	r30, r16
 452:	85 81       	ldd	r24, Z+5	; 0x05
            }
            tasks[i]->elapsedTime += 1;
 454:	96 81       	ldd	r25, Z+6	; 0x06
 456:	a7 81       	ldd	r26, Z+7	; 0x07
 458:	b0 85       	ldd	r27, Z+8	; 0x08
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	a1 1d       	adc	r26, r1
 45e:	b1 1d       	adc	r27, r1
 460:	85 83       	std	Z+5, r24	; 0x05
 462:	96 83       	std	Z+6, r25	; 0x06
 464:	a7 83       	std	Z+7, r26	; 0x07
 466:	b0 87       	std	Z+8, r27	; 0x08
 468:	8c 14       	cp	r8, r12
 46a:	9d 04       	cpc	r9, r13
    
    char butt = 0;
    unsigned short i; // Scheduler for-loop iterator
    while(1){
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
 46c:	59 f6       	brne	.-106    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 46e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <button+0x1>
                tasks[i]->elapsedTime = 0;
            }
            tasks[i]->elapsedTime += 1;
        }
        
        button = 0;
 472:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <button>
 476:	06 c0       	rjmp	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 478:	02 99       	sbic	0x00, 2	; 0
        while(!TimerFlag){
 47a:	04 c0       	rjmp	.+8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
            butt = ( !(PINA & 0x04) );
            if(butt){
 47c:	b0 92 20 01 	sts	0x0120, r11	; 0x800120 <button+0x1>
                button = 1;
 480:	a0 92 1f 01 	sts	0x011F, r10	; 0x80011f <button>
 484:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <TimerFlag>
            }
            tasks[i]->elapsedTime += 1;
        }
        
        button = 0;
        while(!TimerFlag){
 488:	88 23       	and	r24, r24
 48a:	b1 f3       	breq	.-20     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 48c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <TimerFlag>
            if(butt){
                button = 1;
            }
        };
        TimerFlag = 0;
        PORTC = score;
 490:	d7 01       	movw	r26, r14
 492:	8c 91       	ld	r24, X
 494:	88 b9       	out	0x08, r24	; 8
        LCD_ClearScreen();
 496:	31 df       	rcall	.-414    	; 0x2fa <LCD_ClearScreen>
        LCD_Cursor(1);
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	32 df       	rcall	.-412    	; 0x300 <LCD_Cursor>
 49c:	f7 01       	movw	r30, r14
        LCD_WriteData(48 + score);
 49e:	80 81       	ld	r24, Z
 4a0:	80 5d       	subi	r24, 0xD0	; 208
 4a2:	45 df       	rcall	.-374    	; 0x32e <LCD_WriteData>
 4a4:	ac cf       	rjmp	.-168    	; 0x3fe <main+0xbe>

000004a6 <_exit>:
 4a6:	f8 94       	cli

000004a8 <__stop_program>:
    }
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__stop_program>
