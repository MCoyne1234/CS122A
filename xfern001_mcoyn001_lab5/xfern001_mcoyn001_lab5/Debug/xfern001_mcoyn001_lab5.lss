
xfern001_mcoyn001_lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ed  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083a  00000000  00000000  00000bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031c  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000170c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000037  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	77 d0       	rcall	.+238    	; 0x198 <main>
  aa:	81 c0       	rjmp	.+258    	; 0x1ae <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <transmit_data>:

unsigned char D = 0x00;

enum States{Check, Debounce, Reset, Inc, Dec} state;
	
void transmit_data(unsigned char data) {
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
	// for each bit of data, set SRCLR (PB3) high and RCLK (PB1) Low,
	// Then for each bit, set SRCLK (PB2) low, then set SER (PB0) to the value of the
	// bit being transfered (1 or 0), then set SRCLK (PB2) high
	unsigned char i = 0;
	while(i < 8) {
		PORTB = 0x08;
  b2:	58 e0       	ldi	r21, 0x08	; 8
		PORTB |= ((data >> i) & 0x01);
  b4:	e8 2f       	mov	r30, r24
  b6:	f0 e0       	ldi	r31, 0x00	; 0
	// for each bit of data, set SRCLR (PB3) high and RCLK (PB1) Low,
	// Then for each bit, set SRCLK (PB2) low, then set SER (PB0) to the value of the
	// bit being transfered (1 or 0), then set SRCLK (PB2) high
	unsigned char i = 0;
	while(i < 8) {
		PORTB = 0x08;
  b8:	55 b9       	out	0x05, r21	; 5
		PORTB |= ((data >> i) & 0x01);
  ba:	45 b1       	in	r20, 0x05	; 5
  bc:	bf 01       	movw	r22, r30
  be:	02 2e       	mov	r0, r18
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <transmit_data+0x18>
  c2:	75 95       	asr	r23
  c4:	67 95       	ror	r22
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <transmit_data+0x14>
  ca:	96 2f       	mov	r25, r22
  cc:	91 70       	andi	r25, 0x01	; 1
  ce:	94 2b       	or	r25, r20
  d0:	95 b9       	out	0x05, r25	; 5
		PORTB |= 0x04;
  d2:	2a 9a       	sbi	0x05, 2	; 5
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
	// when ready to begin transmitting, set RCLK (PB1) low and SRCLR (PB3) high
	// for each bit of data, set SRCLR (PB3) high and RCLK (PB1) Low,
	// Then for each bit, set SRCLK (PB2) low, then set SER (PB0) to the value of the
	// bit being transfered (1 or 0), then set SRCLK (PB2) high
	unsigned char i = 0;
	while(i < 8) {
  d8:	28 30       	cpi	r18, 0x08	; 8
  da:	31 05       	cpc	r19, r1
  dc:	69 f7       	brne	.-38     	; 0xb8 <transmit_data+0xa>
		PORTB |= ((data >> i) & 0x01);
		PORTB |= 0x04;
		i++;
	}
	
	PORTB |= 0x02;
  de:	29 9a       	sbi	0x05, 1	; 5
	PORTB = 0x00;
  e0:	15 b8       	out	0x05, r1	; 5
  e2:	08 95       	ret

000000e4 <Tick>:
}
	
void Tick() {
	switch(state) { // state transitions
  e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	31 f1       	breq	.+76     	; 0x138 <Tick+0x54>
  ec:	28 f4       	brcc	.+10     	; 0xf8 <Tick+0x14>
  ee:	88 23       	and	r24, r24
  f0:	41 f0       	breq	.+16     	; 0x102 <Tick+0x1e>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	91 f0       	breq	.+36     	; 0x11a <Tick+0x36>
  f6:	2f c0       	rjmp	.+94     	; 0x156 <Tick+0x72>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <Tick+0x62>
  fc:	84 30       	cpi	r24, 0x04	; 4
  fe:	39 f1       	breq	.+78     	; 0x14e <Tick+0x6a>
 100:	2a c0       	rjmp	.+84     	; 0x156 <Tick+0x72>
		case Check:
			if (!(PINA & 0x01)) {
 102:	00 99       	sbic	0x00, 0	; 0
 104:	04 c0       	rjmp	.+8      	; 0x10e <Tick+0x2a>
				state = Inc;
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 10c:	2f c0       	rjmp	.+94     	; 0x16c <Tick+0x88>
			} else if (!(PINA & 0x02)) {
 10e:	01 99       	sbic	0x00, 1	; 0
 110:	42 c0       	rjmp	.+132    	; 0x196 <Tick+0xb2>
				state = Dec;
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 118:	34 c0       	rjmp	.+104    	; 0x182 <Tick+0x9e>
			} else {
				state = Check;
			}
		break;
		case Debounce:
			if (!(PINA & 0x01) && !(PINA & 0x02)) {
 11a:	00 99       	sbic	0x00, 0	; 0
 11c:	06 c0       	rjmp	.+12     	; 0x12a <Tick+0x46>
 11e:	01 99       	sbic	0x00, 1	; 0
 120:	04 c0       	rjmp	.+8      	; 0x12a <Tick+0x46>
				state = Reset;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 128:	1c c0       	rjmp	.+56     	; 0x162 <Tick+0x7e>
			} else if (!(PINA & 0x01) || !(PINA & 0x02)) {
 12a:	00 9b       	sbis	0x00, 0	; 0
 12c:	34 c0       	rjmp	.+104    	; 0x196 <Tick+0xb2>
 12e:	01 9b       	sbis	0x00, 1	; 0
 130:	32 c0       	rjmp	.+100    	; 0x196 <Tick+0xb2>
				state = Debounce;
			} else {
				state = Check;
 132:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
 136:	08 95       	ret
			}
		break;
		case Reset:
			if (!(PINA & 0x01) || !(PINA & 0x02)) {
 138:	00 9b       	sbis	0x00, 0	; 0
 13a:	13 c0       	rjmp	.+38     	; 0x162 <Tick+0x7e>
 13c:	01 9b       	sbis	0x00, 1	; 0
 13e:	11 c0       	rjmp	.+34     	; 0x162 <Tick+0x7e>
				//nothin
			} else {
				state = Check;
 140:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
 144:	08 95       	ret
			}
		break;
		case Inc:
			state = Debounce;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		break;
 14c:	08 95       	ret
		case Dec:
			state = Debounce;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		break;
 154:	08 95       	ret
	}
	
	switch(state) { // state actions
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	49 f0       	breq	.+18     	; 0x16c <Tick+0x88>
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	91 f0       	breq	.+36     	; 0x182 <Tick+0x9e>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	d1 f4       	brne	.+52     	; 0x196 <Tick+0xb2>
		break;
		case Debounce:
			//
		break;
		case Reset:
			D = 0x00;
 162:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			transmit_data(D);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	a2 cf       	rjmp	.-188    	; 0xae <transmit_data>
		break;
 16a:	08 95       	ret
		case Inc:
			if (D < 0xFF) {
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 170:	8f 3f       	cpi	r24, 0xFF	; 255
 172:	19 f0       	breq	.+6      	; 0x17a <Tick+0x96>
				D++;
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			transmit_data(D);
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17e:	97 cf       	rjmp	.-210    	; 0xae <transmit_data>
		break;
 180:	08 95       	ret
		case Dec:
			if (D > 0x00) {
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 186:	88 23       	and	r24, r24
 188:	19 f0       	breq	.+6      	; 0x190 <Tick+0xac>
				D--;
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			transmit_data(D);
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 194:	8c cf       	rjmp	.-232    	; 0xae <transmit_data>
 196:	08 95       	ret

00000198 <main>:
	}
}

int main(void) {
	// Initialize ports
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	84 b9       	out	0x04, r24	; 4
 19c:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 19e:	80 ef       	ldi	r24, 0xF0	; 240
 1a0:	87 b9       	out	0x07, r24	; 7
 1a2:	8f e0       	ldi	r24, 0x0F	; 15
 1a4:	88 b9       	out	0x08, r24	; 8
	DDRA = 0x00; PORTA = 0x00;
 1a6:	11 b8       	out	0x01, r1	; 1
 1a8:	12 b8       	out	0x02, r1	; 2
	
	while(1) {
		Tick();
 1aa:	9c df       	rcall	.-200    	; 0xe4 <Tick>
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <main+0x12>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
