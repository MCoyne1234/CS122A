
xfern001_Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000041e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  000004b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cdc  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008af  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bc  00000000  00000000  00001b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000505  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  0000273d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000029ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	bd c0       	rjmp	.+378    	; 0x1b0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	64 d1       	rcall	.+712    	; 0x38c <main>
  c4:	aa c1       	rjmp	.+852    	; 0x41a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	10 98       	cbi	0x02, 0	; 2
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	11 9a       	sbi	0x02, 1	; 2
  f4:	00 00       	nop
  f6:	11 98       	cbi	0x02, 1	; 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	10 9a       	sbi	0x02, 0	; 2
 136:	8b b9       	out	0x0b, r24	; 11
 138:	11 9a       	sbi	0x02, 1	; 2
 13a:	00 00       	nop
 13c:	11 98       	cbi	0x02, 1	; 2
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <TimerSet>:
 146:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 14a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 14e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 152:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 156:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <_avr_timer_cntcurr>
 15a:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <_avr_timer_cntcurr+0x1>
 15e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_avr_timer_cntcurr+0x2>
 162:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <_avr_timer_cntcurr+0x3>
 166:	08 95       	ret

00000168 <TimerOn>:
 168:	8b e0       	ldi	r24, 0x0B	; 11
 16a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 16e:	8d e7       	ldi	r24, 0x7D	; 125
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 176:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 18c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 190:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 194:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 198:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
 19c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
 1a0:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
 1a4:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
 1a8:	8f b7       	in	r24, 0x3f	; 63
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	8f bf       	out	0x3f, r24	; 63
 1ae:	08 95       	ret

000001b0 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 1c2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_avr_timer_cntcurr>
 1c6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_avr_timer_cntcurr+0x1>
 1ca:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x2>
 1ce:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x3>
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	a1 09       	sbc	r26, r1
 1d6:	b1 09       	sbc	r27, r1
 1d8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
 1dc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
 1e0:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
 1e4:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 1e8:	89 2b       	or	r24, r25
 1ea:	8a 2b       	or	r24, r26
 1ec:	8b 2b       	or	r24, r27
 1ee:	99 f4       	brne	.+38     	; 0x216 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 1f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1fe:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 202:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 206:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
 20a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
 20e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
 212:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
	}
}
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <Tick>:
unsigned char Button;
unsigned int pressed = 0;
int score = 0;

void Tick() {
	switch(state) { //state transitions
 228:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <state>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	51 f0       	breq	.+20     	; 0x244 <Tick+0x1c>
 230:	28 f0       	brcs	.+10     	; 0x23c <Tick+0x14>
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	59 f0       	breq	.+22     	; 0x24c <Tick+0x24>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	69 f0       	breq	.+26     	; 0x254 <Tick+0x2c>
 23a:	10 c0       	rjmp	.+32     	; 0x25c <Tick+0x34>
		case START:
			state = B0;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
		break;
 242:	13 c0       	rjmp	.+38     	; 0x26a <Tick+0x42>
		case B0:
			state = B1;
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
 24a:	28 c0       	rjmp	.+80     	; 0x29c <Tick+0x74>
		break;
		case B1:
			state = B2;
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
 252:	3d c0       	rjmp	.+122    	; 0x2ce <Tick+0xa6>
		break;
		case B2:
			state = B0;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
		break;
 25a:	07 c0       	rjmp	.+14     	; 0x26a <Tick+0x42>
	}
	
	switch(state) { // state actions
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	f1 f0       	breq	.+60     	; 0x29c <Tick+0x74>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	a9 f1       	breq	.+106    	; 0x2ce <Tick+0xa6>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	09 f0       	breq	.+2      	; 0x26a <Tick+0x42>
 268:	4a c0       	rjmp	.+148    	; 0x2fe <Tick+0xd6>
		case START:
			// PORTB = 0x00;
		break;
		case B0:
			//PORTB = ((PORTB & 0x08) | 0x01);
			light1 = 0x01;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <light1+0x1>
 272:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <light1>
			if (pressed) {
 276:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pressed>
 27a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <pressed+0x1>
 27e:	89 2b       	or	r24, r25
 280:	f1 f1       	breq	.+124    	; 0x2fe <Tick+0xd6>
				if (score > 0) {
 282:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 286:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 28a:	18 16       	cp	r1, r24
 28c:	19 06       	cpc	r1, r25
 28e:	bc f5       	brge	.+110    	; 0x2fe <Tick+0xd6>
					score--;
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 296:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 29a:	08 95       	ret
				}
			}
		break;
		case B1:
			//PORTB = ((PORTB & 0x08) | 0x02);
			light1 = 0x02;
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <light1+0x1>
 2a4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <light1>
			if (pressed) {
 2a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pressed>
 2ac:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <pressed+0x1>
 2b0:	89 2b       	or	r24, r25
 2b2:	29 f1       	breq	.+74     	; 0x2fe <Tick+0xd6>
				if (score < 9) {
 2b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2b8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 2bc:	89 30       	cpi	r24, 0x09	; 9
 2be:	91 05       	cpc	r25, r1
 2c0:	f4 f4       	brge	.+60     	; 0x2fe <Tick+0xd6>
					score++;
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 2c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2cc:	08 95       	ret
				}
			}
		break;
		case B2:
			//PORTB = ((PORTB & 0x08) | 0x04);
			light1 = 0x04;
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <light1+0x1>
 2d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <light1>
			if (pressed) {
 2da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pressed>
 2de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <pressed+0x1>
 2e2:	89 2b       	or	r24, r25
 2e4:	61 f0       	breq	.+24     	; 0x2fe <Tick+0xd6>
				if (score > 0) {
 2e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2ea:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 2ee:	18 16       	cp	r1, r24
 2f0:	19 06       	cpc	r1, r25
 2f2:	2c f4       	brge	.+10     	; 0x2fe <Tick+0xd6>
					score--;
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 2fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2fe:	08 95       	ret

00000300 <Tick2>:
		break;
	}
}

void Tick2() {
	switch(state2) {
 300:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state2>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	99 f0       	breq	.+38     	; 0x32e <Tick2+0x2e>
 308:	28 f4       	brcc	.+10     	; 0x314 <Tick2+0x14>
 30a:	88 23       	and	r24, r24
 30c:	41 f0       	breq	.+16     	; 0x31e <Tick2+0x1e>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	51 f0       	breq	.+20     	; 0x326 <Tick2+0x26>
 312:	19 c0       	rjmp	.+50     	; 0x346 <Tick2+0x46>
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	79 f0       	breq	.+30     	; 0x336 <Tick2+0x36>
 318:	84 30       	cpi	r24, 0x04	; 4
 31a:	89 f0       	breq	.+34     	; 0x33e <Tick2+0x3e>
 31c:	14 c0       	rjmp	.+40     	; 0x346 <Tick2+0x46>
		case START2:
			state2 = ON1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <state2>
		break;
 324:	1b c0       	rjmp	.+54     	; 0x35c <Tick2+0x5c>
		case ON1:
			state2 = ON2;
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <state2>
 32c:	1e c0       	rjmp	.+60     	; 0x36a <Tick2+0x6a>
		break;
		case ON2:
			state2 = OFF1;
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <state2>
 334:	21 c0       	rjmp	.+66     	; 0x378 <Tick2+0x78>
		break;
		case OFF1:
			state2 = OFF2;
 336:	84 e0       	ldi	r24, 0x04	; 4
 338:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <state2>
 33c:	22 c0       	rjmp	.+68     	; 0x382 <Tick2+0x82>
		break;
		case OFF2:
			state2 = ON1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <state2>
		break;
 344:	0b c0       	rjmp	.+22     	; 0x35c <Tick2+0x5c>
	}
	
	switch(state2) {
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	81 f0       	breq	.+32     	; 0x36a <Tick2+0x6a>
 34a:	18 f4       	brcc	.+6      	; 0x352 <Tick2+0x52>
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	e9 f4       	brne	.+58     	; 0x38a <Tick2+0x8a>
 350:	05 c0       	rjmp	.+10     	; 0x35c <Tick2+0x5c>
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	89 f0       	breq	.+34     	; 0x378 <Tick2+0x78>
 356:	84 30       	cpi	r24, 0x04	; 4
 358:	c1 f4       	brne	.+48     	; 0x38a <Tick2+0x8a>
 35a:	13 c0       	rjmp	.+38     	; 0x382 <Tick2+0x82>
		case START2:
			//PORTB = 0x00;
		break;
		case ON1:
			//PORTB = PORTB | 0x08;
			light2 = 0x08;
 35c:	88 e0       	ldi	r24, 0x08	; 8
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <light2+0x1>
 364:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <light2>
		break;
 368:	08 95       	ret
		case ON2:
			//PORTB = PORTB | 0x08;
			light2 = 0x08;
 36a:	88 e0       	ldi	r24, 0x08	; 8
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <light2+0x1>
 372:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <light2>
		break;
 376:	08 95       	ret
		case OFF1:
			//PORTB = PORTB & 0xF7; // 1111 0111
			light2 = 0x00;
 378:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <light2+0x1>
 37c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <light2>
		break;
 380:	08 95       	ret
		case OFF2:
			//PORTB = PORTB & 0xF7;
			light2 = 0x00;
 382:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <light2+0x1>
 386:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <light2>
 38a:	08 95       	ret

0000038c <main>:
		break;
	}
}

int main(void) {
	DDRB = 0xFF; PORTB = 0X00;
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	84 b9       	out	0x04, r24	; 4
 390:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
 392:	8a b9       	out	0x0a, r24	; 10
 394:	1b b8       	out	0x0b, r1	; 11
	DDRA = 0xFF; PORTA = 0x00; // LCD control lines
 396:	81 b9       	out	0x01, r24	; 1
 398:	12 b8       	out	0x02, r1	; 2
	
	LCD_init();
 39a:	bd de       	rcall	.-646    	; 0x116 <LCD_init>
	LCD_ClearScreen();
 39c:	b1 de       	rcall	.-670    	; 0x100 <LCD_ClearScreen>
	LCD_Cursor(1);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	b2 de       	rcall	.-668    	; 0x106 <LCD_Cursor>
 3a2:	64 ef       	ldi	r22, 0xF4	; 244
	// LCD_WriteData(48 + score);
	// LCD_DisplayString(1, "Hello World!");
	
	TimerSet(500);
 3a4:	71 e0       	ldi	r23, 0x01	; 1
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	cd de       	rcall	.-614    	; 0x146 <TimerSet>
	TimerOn();
 3ac:	dd de       	rcall	.-582    	; 0x168 <TimerOn>
 3ae:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <state>
	
	state = START;
 3b2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <state2>
	state2 = START2;
 3b6:	0f 2e       	mov	r0, r31

    while (1) {
		Tick();
		Tick2();
		PORTB = light1 + light2;
 3b8:	fa e0       	ldi	r31, 0x0A	; 10
 3ba:	ef 2e       	mov	r14, r31
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	ff 2e       	mov	r15, r31
 3c0:	f0 2d       	mov	r31, r0
 3c2:	08 e0       	ldi	r16, 0x08	; 8
 3c4:	11 e0       	ldi	r17, 0x01	; 1
 3c6:	c4 e0       	ldi	r28, 0x04	; 4
		LCD_ClearScreen();
		LCD_Cursor(1);
		LCD_WriteData(48 + score);
 3c8:	d1 e0       	ldi	r29, 0x01	; 1
		pressed = 0;
		while(!TimerFlag) {
			Button = (~PINA & 0x04);
			if (Button) {
				pressed = 1;
 3ca:	cc 24       	eor	r12, r12
 3cc:	c3 94       	inc	r12
 3ce:	d1 2c       	mov	r13, r1
	
	state = START;
	state2 = START2;

    while (1) {
		Tick();
 3d0:	2b df       	rcall	.-426    	; 0x228 <Tick>
 3d2:	96 df       	rcall	.-212    	; 0x300 <Tick2>
		Tick2();
 3d4:	f7 01       	movw	r30, r14
		PORTB = light1 + light2;
 3d6:	90 81       	ld	r25, Z
 3d8:	f8 01       	movw	r30, r16
 3da:	80 81       	ld	r24, Z
 3dc:	89 0f       	add	r24, r25
		LCD_ClearScreen();
 3de:	85 b9       	out	0x05, r24	; 5
 3e0:	8f de       	rcall	.-738    	; 0x100 <LCD_ClearScreen>
		LCD_Cursor(1);
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 de       	rcall	.-736    	; 0x106 <LCD_Cursor>
 3e6:	88 81       	ld	r24, Y
		LCD_WriteData(48 + score);
 3e8:	80 5d       	subi	r24, 0xD0	; 208
 3ea:	a4 de       	rcall	.-696    	; 0x134 <LCD_WriteData>
 3ec:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pressed+0x1>
		pressed = 0;
 3f0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pressed>
 3f4:	0b c0       	rjmp	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f6:	80 b1       	in	r24, 0x00	; 0
		while(!TimerFlag) {
 3f8:	80 95       	com	r24
			Button = (~PINA & 0x04);
 3fa:	84 70       	andi	r24, 0x04	; 4
 3fc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Button>
 400:	88 23       	and	r24, r24
 402:	21 f0       	breq	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			if (Button) {
 404:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <pressed+0x1>
				pressed = 1;
 408:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <pressed>
 40c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <TimerFlag>
		PORTB = light1 + light2;
		LCD_ClearScreen();
		LCD_Cursor(1);
		LCD_WriteData(48 + score);
		pressed = 0;
		while(!TimerFlag) {
 410:	88 23       	and	r24, r24
 412:	89 f3       	breq	.-30     	; 0x3f6 <main+0x6a>
 414:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <TimerFlag>
			Button = (~PINA & 0x04);
			if (Button) {
				pressed = 1;
			}
		}
		TimerFlag = 0;	
 418:	db cf       	rjmp	.-74     	; 0x3d0 <main+0x44>

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
    }
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
