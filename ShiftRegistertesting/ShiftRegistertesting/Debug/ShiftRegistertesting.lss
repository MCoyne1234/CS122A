
ShiftRegistertesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088e  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f8  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000294  00000000  00000000  0000126e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000037  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1f d0       	rcall	.+62     	; 0xd8 <main>
  9a:	2e c0       	rjmp	.+92     	; 0xf8 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <transmit_data>:
#define SER PORTA4 
#define RCLK PORTA2
#define SRCLK PORTA1
#define SRCLR PORTA0

void transmit_data(unsigned char data) {
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
	// bit being transfered (1 or 0), then set SRCLK (PB2) high
	unsigned char i = 0, bit;
	unsigned char mask = (1 << SER);
	while(i < 8) {
		bit = ( (data >> i) & 0x01) << SER;
		SHIFT_REG = (1 << SRCLR);
  a2:	e1 e0       	ldi	r30, 0x01	; 1
		//SHIFT_REG |= ((data >> i) & SER);
		SHIFT_REG &= ~(1 << SER);
		SHIFT_REG |= bit;
  a4:	68 2f       	mov	r22, r24
  a6:	70 e0       	ldi	r23, 0x00	; 0
	// bit being transfered (1 or 0), then set SRCLK (PB2) high
	unsigned char i = 0, bit;
	unsigned char mask = (1 << SER);
	while(i < 8) {
		bit = ( (data >> i) & 0x01) << SER;
		SHIFT_REG = (1 << SRCLR);
  a8:	e2 b9       	out	0x02, r30	; 2
		//SHIFT_REG |= ((data >> i) & SER);
		SHIFT_REG &= ~(1 << SER);
  aa:	14 98       	cbi	0x02, 4	; 2
		SHIFT_REG |= bit;
  ac:	92 b1       	in	r25, 0x02	; 2
  ae:	9b 01       	movw	r18, r22
  b0:	04 2e       	mov	r0, r20
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <transmit_data+0x1a>
  b4:	35 95       	asr	r19
  b6:	27 95       	ror	r18
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <transmit_data+0x16>
  bc:	21 70       	andi	r18, 0x01	; 1
  be:	22 95       	swap	r18
  c0:	20 7f       	andi	r18, 0xF0	; 240
  c2:	29 2b       	or	r18, r25
  c4:	22 b9       	out	0x02, r18	; 2
		
		SHIFT_REG |= (1 << SRCLK);
  c6:	11 9a       	sbi	0x02, 1	; 2
  c8:	4f 5f       	subi	r20, 0xFF	; 255
  ca:	5f 4f       	sbci	r21, 0xFF	; 255
	// for each bit of data, set SRCLR (PB3) high and RCLK (PB1) Low,
	// Then for each bit, set SRCLK (PB2) low, then set SER (PB0) to the value of the
	// bit being transfered (1 or 0), then set SRCLK (PB2) high
	unsigned char i = 0, bit;
	unsigned char mask = (1 << SER);
	while(i < 8) {
  cc:	48 30       	cpi	r20, 0x08	; 8
  ce:	51 05       	cpc	r21, r1
  d0:	59 f7       	brne	.-42     	; 0xa8 <transmit_data+0xa>
		
		SHIFT_REG |= (1 << SRCLK);
		i++;
	}
	
	SHIFT_REG |= (1 << RCLK);
  d2:	12 9a       	sbi	0x02, 2	; 2
	SHIFT_REG = 0x00;
  d4:	12 b8       	out	0x02, r1	; 2
  d6:	08 95       	ret

000000d8 <main>:
}
*/

int main(void) {
	// Initialize ports
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 b9       	out	0x04, r24	; 4
  dc:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
  de:	90 ef       	ldi	r25, 0xF0	; 240
  e0:	97 b9       	out	0x07, r25	; 7
  e2:	9f e0       	ldi	r25, 0x0F	; 15
  e4:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
  e6:	8a b9       	out	0x0a, r24	; 10
  e8:	1b b8       	out	0x0b, r1	; 11
	DDRA = 0xFF; PORTA = 0x00; // LCD control lines
  ea:	81 b9       	out	0x01, r24	; 1
  ec:	12 b8       	out	0x02, r1	; 2
	
	char data = 0xAF;
	transmit_data(data);
  ee:	8f ea       	ldi	r24, 0xAF	; 175
  f0:	d6 df       	rcall	.-84     	; 0x9e <transmit_data>
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
